/**
 *
 * @param kavaAddress string
 * @returns string representing eth address from given kava address
 */
export declare function kavaToEthAddress(kavaAddress: string): string;
/**
 *
 * @param ethereumAddress string
 * @returns string representing kava address from give eth address
 */
export declare function ethToKavaAddress(ethereumAddress: string): string;
export declare const utils: {
    generateRandomNumber: () => string;
    calculateRandomNumberHash: (randomNumber: string, timestamp: number) => string;
    calculateSwapID: (randomNumberHash: string, sender: string, senderOtherChain: string) => string;
    calculateUnixTime: (seconds?: number) => string;
    convertCoinDecimals: (inputAmount: string, inputDenom: string, outputDenom: string) => {
        denom: string;
        amount: string;
    }[] | undefined;
    formatCoin: (amount: string | number, denom: string) => {
        denom: string;
        amount: string;
    };
    formatCoins: (amount: string | number, denom: string) => {
        denom: string;
        amount: string;
    }[];
    formatMultiCoins: (amounts: string[], denoms: string[]) => {
        denom: string;
        amount: string;
    }[] | undefined;
    ethToKavaAddress: typeof ethToKavaAddress;
    kavaToEthAddress: typeof kavaToEthAddress;
};
