"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tx = void 0;
var sig = require('@kava-labs/sig');
var axios_1 = __importDefault(require("axios"));
var url_1 = require("url");
var api = {
    getAccount: '/auth/accounts',
    postTx: '/txs',
};
/**
 * Sends an HTTP GET request to Kava
 * @param {String} path the request's url extension
 * @param {String} base the request's base url
 * @return {Promise}
 */
function getTx(path, base, timeout, args) {
    if (timeout === void 0) { timeout = 5000; }
    if (args === void 0) { args = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var requestUrl, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    requestUrl = new url_1.URL(path, base).toString();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, retry(axios_1.default.get, axios_1.default, [applyRequestArgs(requestUrl, args)], Math.floor(timeout / 1000), 1000, false)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    err_1 = _a.sent();
                    throw err_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * Apply args to an HTTP GET request's url
 * @param {String} url the request's url (base + path extension)
 * @param {String} args the request's http arguments in JSON e.g. {status: 'Open'}
 * @return {String}
 */
function applyRequestArgs(url, args) {
    if (args === void 0) { args = {}; }
    var search = [];
    for (var k in args) {
        search.push(k + "=" + args[k]);
    }
    return url + "?" + search.join('&');
}
/**
 * Retries the given function until it succeeds given a number of retries and an interval between them. They are set
 * by default to retry 5 times with 1sec in between. There's also a flag for exponential back-off.
 * source (with minor edits): https://gitlab.com/snippets/1775781
 * @param {Function} fn - Returns a promise
 * @param {Object} thisArg - the object that will be the 'this' argument to the input function
 * @param {Array} args - array of arguments to call the input function with
 * @param {Number} retriesLeft - Number of retries. If >1 will keep retrying
 * @param {Number} interval - milliseconds between retries. If exponential set to true will be doubled each retry
 * @param {Boolean} exponential - Flag for exponential back-off mode
 * @return {Promise<*>}
 */
var retry = function (fn, thisArg, args, retriesLeft, interval, exponential) {
    if (retriesLeft === void 0) { retriesLeft = 5; }
    if (interval === void 0) { interval = 1000; }
    if (exponential === void 0) { exponential = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var result, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 6]);
                    return [4 /*yield*/, fn.apply(thisArg, args)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result];
                case 2:
                    error_1 = _a.sent();
                    if (!retriesLeft) return [3 /*break*/, 4];
                    return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, interval); })];
                case 3:
                    _a.sent();
                    return [2 /*return*/, retry(fn, thisArg, args, retriesLeft - 1, exponential ? interval * 2 : interval, exponential)];
                case 4: throw new Error("Max retries reached:\n    error: " + error_1);
                case 5: return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    });
};
/**
 * Loads an account's account number and sequence from Kava
 * @param {String} address the address to be fetched
 * @param {String} base the request's base url
 * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
 * @return {Promise}
 */
function loadMetaData(address, base, timeout) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    if (timeout === void 0) { timeout = 2000; }
    return __awaiter(this, void 0, void 0, function () {
        var path, res, accNum, seqNum, signMetaData;
        return __generator(this, function (_u) {
            switch (_u.label) {
                case 0:
                    path = api.getAccount + '/' + address;
                    return [4 /*yield*/, getTx(path, base, timeout)];
                case 1:
                    res = _u.sent();
                    if (((_b = (_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.result) === null || _b === void 0 ? void 0 : _b.type) === 'cosmos-sdk/BaseAccount') {
                        accNum = (_e = (_d = (_c = res === null || res === void 0 ? void 0 : res.data) === null || _c === void 0 ? void 0 : _c.result) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.account_number;
                        seqNum = ((_h = (_g = (_f = res === null || res === void 0 ? void 0 : res.data) === null || _f === void 0 ? void 0 : _f.result) === null || _g === void 0 ? void 0 : _g.value) === null || _h === void 0 ? void 0 : _h.sequence) || '0';
                    }
                    else {
                        accNum =
                            (_o = (_m = (_l = (_k = (_j = res === null || res === void 0 ? void 0 : res.data) === null || _j === void 0 ? void 0 : _j.result) === null || _k === void 0 ? void 0 : _k.value) === null || _l === void 0 ? void 0 : _l.base_vesting_account) === null || _m === void 0 ? void 0 : _m.base_account) === null || _o === void 0 ? void 0 : _o.account_number;
                        seqNum =
                            ((_t = (_s = (_r = (_q = (_p = res === null || res === void 0 ? void 0 : res.data) === null || _p === void 0 ? void 0 : _p.result) === null || _q === void 0 ? void 0 : _q.value) === null || _r === void 0 ? void 0 : _r.base_vesting_account) === null || _s === void 0 ? void 0 : _s.base_account) === null || _t === void 0 ? void 0 : _t.sequence) ||
                                '0';
                    }
                    if (!(accNum || seqNum)) {
                        throw new Error('account number or sequence number from rest server are undefined');
                    }
                    signMetaData = {
                        account_number: accNum,
                        sequence: seqNum,
                    };
                    return [2 /*return*/, signMetaData];
            }
        });
    });
}
/**
 * Packages, signs, and verifies a transaction
 * @param {Object} tx an unsigned tx object
 * @param {Object} signMetaData contains account number, sequence, and chain ID
 * @param {Object} wallet the wallet that will be used to sign the tx
 * @return {Promise}
 */
function signTx(tx, signMetaData, wallet) {
    tx = sig.signTx(tx, signMetaData, wallet);
    if (!sig.verifyTx(tx, signMetaData)) {
        throw new Error('problem signing tx, generated signature is invalid');
    }
    return tx;
}
/**
 * Sends an HTTP POST request containing a signed transaction to Kava
 * @param {Object} tx a signed tx
 * @param {String} base the request's base url
 * @param {String} mode transaction broadcast mode
 * @return {Promise}
 */
function broadcastTx(tx, base, mode) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var txRes, url, err_2;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    url = new url_1.URL(api.postTx, base).toString();
                    return [4 /*yield*/, axios_1.default.post(url, sig.createBroadcastTx(tx.value, mode))];
                case 1:
                    txRes = _c.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_2 = _c.sent();
                    if (axios_1.default.isAxiosError(err_2)) {
                        logErr(err_2);
                    }
                    return [3 /*break*/, 3];
                case 3:
                    // Check for and handle any tendermint errors
                    try {
                        if ((_a = txRes === null || txRes === void 0 ? void 0 : txRes.data) === null || _a === void 0 ? void 0 : _a.code) {
                            throw new Error("tx not accepted by chain: " + txRes.data.raw_log);
                        }
                    }
                    catch (err) {
                        return [2 /*return*/, err];
                    }
                    return [2 /*return*/, (_b = txRes === null || txRes === void 0 ? void 0 : txRes.data) === null || _b === void 0 ? void 0 : _b.txhash];
            }
        });
    });
}
/**
 * Parses and logs tx-related errors
 * @param {AxiosError} err an error resulting from a tx-related action
 */
var logErr = function (err) {
    var _a, _b, _c;
    // Load status, status text, and error
    var status = (_a = err.response) === null || _a === void 0 ? void 0 : _a.status;
    var statusText = (_b = err.response) === null || _b === void 0 ? void 0 : _b.statusText;
    var error = (_c = err.response) === null || _c === void 0 ? void 0 : _c.data.error;
    // Log status, status text, and error, or if unidentified, log network error
    status ? console.log('Status:', status) : null;
    statusText ? console.log('Status text:', statusText) : null;
    error ? console.log('Error:', error) : null;
    if (!status && !statusText && !error) {
        console.log('Network error:', err);
    }
};
exports.tx = {
    getTx: getTx,
    loadMetaData: loadMetaData,
    signTx: signTx,
    broadcastTx: broadcastTx,
    logErr: logErr,
};
