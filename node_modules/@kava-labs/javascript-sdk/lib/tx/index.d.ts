import { AxiosError } from 'axios';
/**
 * Sends an HTTP GET request to Kava
 * @param {String} path the request's url extension
 * @param {String} base the request's base url
 * @return {Promise}
 */
declare function getTx(path: string, base: string, timeout?: number, args?: {}): Promise<any>;
/**
 * Loads an account's account number and sequence from Kava
 * @param {String} address the address to be fetched
 * @param {String} base the request's base url
 * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
 * @return {Promise}
 */
declare function loadMetaData(address: string, base: string, timeout?: number): Promise<{
    account_number: string;
    sequence: string;
}>;
/**
 * Packages, signs, and verifies a transaction
 * @param {Object} tx an unsigned tx object
 * @param {Object} signMetaData contains account number, sequence, and chain ID
 * @param {Object} wallet the wallet that will be used to sign the tx
 * @return {Promise}
 */
declare function signTx(tx: any, signMetaData: any, wallet: any): any;
/**
 * Sends an HTTP POST request containing a signed transaction to Kava
 * @param {Object} tx a signed tx
 * @param {String} base the request's base url
 * @param {String} mode transaction broadcast mode
 * @return {Promise}
 */
declare function broadcastTx(tx: any, base: string, mode: string): Promise<any>;
export declare const tx: {
    getTx: typeof getTx;
    loadMetaData: typeof loadMetaData;
    signTx: typeof signTx;
    broadcastTx: typeof broadcastTx;
    logErr: (err: AxiosError) => void;
};
export {};
