import { KavaClient } from '..';
import { Coin } from '../../types/Coin';
export declare class Swap {
    kavaClient: KavaClient;
    static instance: Swap;
    constructor(kavaClient: KavaClient);
    /**
     * Get the params of the swap module
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getParams(timeout?: number): Promise<any>;
    /**
     * Get swap deposits
     * @param {Object} args optional arguments {owner: "kava1l0xsq2z7gqd7yly0g40y5836g0appumark77ny", pool: "bnb:usdx"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getDeposits(args?: {}, timeout?: number): Promise<any>;
    /**
     * Get swap pool
     * @param {Object} args required arguments {pool: "bnb:usdx"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getPool(args?: {}, timeout?: number): Promise<any>;
    /**
     * Get swap pools
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getPools(args?: {}, timeout?: number): Promise<any>;
    /**
     * Deposit funds to a liquidity pool
     * @param {Object} amount of token a coins to be deposited
     * @param {Object} amount of token b coins to be deposited
     * @param {string} max slippage you're willing to accept
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    deposit(tokenA: Coin, tokenB: Coin, slippage: string, deadline: string, gas?: number, sequence?: null): Promise<any>;
    /**
     * Withdraw funds from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} number of shares to be withdrawn
     * @param {Object} min amount of token a coins to be withdrawn
     * @param {Object} min amount of token b coins to be withdrawn
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    withdraw(shares: any, minTokenA: Coin, minTokenB: Coin, deadline: string, gas?: number, sequence?: null): Promise<any>;
    /**
     * Swap an exact number of token a for an estimated amount of token b
     * @param {Object} amount of tokens to be be put into the system
     * @param {Object} expected amount of coins to be returned
     * @param {string} max slippage you're willing to accept
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    swapExactForTokens(exactTokenA: Coin, tokenB: Coin, slippage: string, deadline: string, gas?: number, sequence?: null): Promise<any>;
    /**
     * Swap an exact number of token b to be returned for an for an estimated amount of token a to input
     * @param {Object} expected amount of coins to be put into the system
     * @param {Object} amount of tokens to be returned from the system
     * @param {string} max slippage you're willing to accept
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    swapForExactTokens(tokenA: Coin, exactTokenB: Coin, slippage: string, deadline: string, gas?: number, sequence?: null): Promise<any>;
}
