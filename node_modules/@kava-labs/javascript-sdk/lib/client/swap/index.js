"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Swap = void 0;
var tx_1 = require("../../tx");
var msg_1 = require("../../msg");
var DEFAULT_GAS = 300000;
var api = {
    getParams: '/swap/parameters',
    getDeposits: '/swap/deposits',
    getPool: '/swap/pool',
    getPools: '/swap/pools',
};
var Swap = /** @class */ (function () {
    function Swap(kavaClient) {
        if (!Swap.instance) {
            this.kavaClient = kavaClient;
            Swap.instance = this;
        }
        return Swap.instance;
    }
    /**
     * Get the params of the swap module
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Swap.prototype.getParams = function (timeout) {
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getParams, this.kavaClient.baseURI, timeout)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get swap deposits
     * @param {Object} args optional arguments {owner: "kava1l0xsq2z7gqd7yly0g40y5836g0appumark77ny", pool: "bnb:usdx"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Swap.prototype.getDeposits = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getDeposits, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get swap pool
     * @param {Object} args required arguments {pool: "bnb:usdx"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Swap.prototype.getPool = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getPool, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get swap pools
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Swap.prototype.getPools = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getPools, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deposit funds to a liquidity pool
     * @param {Object} amount of token a coins to be deposited
     * @param {Object} amount of token b coins to be deposited
     * @param {string} max slippage you're willing to accept
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Swap.prototype.deposit = function (tokenA, tokenB, slippage, deadline, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgDeposit, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgDeposit = msg_1.msg.swap.newMsgDeposit(this.kavaClient.wallet.address, tokenA, tokenB, slippage, deadline);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgDeposit], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Withdraw funds from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} number of shares to be withdrawn
     * @param {Object} min amount of token a coins to be withdrawn
     * @param {Object} min amount of token b coins to be withdrawn
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Swap.prototype.withdraw = function (shares, minTokenA, minTokenB, deadline, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgWithdraw, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgWithdraw = msg_1.msg.swap.newMsgWithdraw(this.kavaClient.wallet.address, shares, minTokenA, minTokenB, deadline);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgWithdraw], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Swap an exact number of token a for an estimated amount of token b
     * @param {Object} amount of tokens to be be put into the system
     * @param {Object} expected amount of coins to be returned
     * @param {string} max slippage you're willing to accept
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Swap.prototype.swapExactForTokens = function (exactTokenA, tokenB, slippage, deadline, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgSwapExactForTokens, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgSwapExactForTokens = msg_1.msg.swap.newMsgSwapExactForTokens(this.kavaClient.wallet.address, exactTokenA, tokenB, slippage, deadline);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgSwapExactForTokens], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Swap an exact number of token b to be returned for an for an estimated amount of token a to input
     * @param {Object} expected amount of coins to be put into the system
     * @param {Object} amount of tokens to be returned from the system
     * @param {string} max slippage you're willing to accept
     * @param {string} deadline time to complete the transaction (unix timestamp seconds, UTC timezone)
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Swap.prototype.swapForExactTokens = function (tokenA, exactTokenB, slippage, deadline, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgSwapForExactTokens, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgSwapForExactTokens = msg_1.msg.swap.newMsgSwapForExactTokens(this.kavaClient.wallet.address, tokenA, exactTokenB, slippage, deadline);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgSwapForExactTokens], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Swap;
}());
exports.Swap = Swap;
module.exports.Swap = Swap;
