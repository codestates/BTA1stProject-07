"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hard = void 0;
var tx_1 = require("../../tx");
var msg_1 = require("../../msg");
var DEFAULT_GAS = 300000;
var api = {
    getParams: '/hard/parameters',
    getModAccounts: '/hard/accounts',
    getDeposits: '/hard/deposits',
    getTotalDeposited: '/hard/total-deposited',
    getBorrows: '/hard/borrows',
    getTotalBorrowed: '/hard/total-borrowed',
};
var Hard = /** @class */ (function () {
    function Hard(kavaClient) {
        if (!Hard.instance) {
            this.kavaClient = kavaClient;
            Hard.instance = this;
        }
        return Hard.instance;
    }
    /**
     * Get the params of the hard module
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Hard.prototype.getParams = function (timeout) {
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getParams, this.kavaClient.baseURI, timeout)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get module accounts associated with the hard module
     * @param {Object} args optional arguments {name: "hard"|"hard_lp_distribution"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Hard.prototype.getModAccounts = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getModAccounts, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get hard deposits
     * @param {Object} args optional arguments {deposit_denom: "btc", deposit_type: "btc-a", owner: "kava1l0xsq2z7gqd7yly0g40y5836g0appumark77ny"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Hard.prototype.getDeposits = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getDeposits, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get hard total-deposited
     * @param {Object} args optional arguments {denom: "btc"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Hard.prototype.getTotalDeposited = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getTotalDeposited, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get hard borrows
     * @param {Object} args optional arguments {owner: "kava1l0xsq2z7gqd7yly0g40y5836g0appumark77ny" denom: "btc" }
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Hard.prototype.getBorrows = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getBorrows, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get hard total-borrowed
     * @param {Object} args optional arguments {denom: "btc"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    Hard.prototype.getTotalBorrowed = function (args, timeout) {
        if (args === void 0) { args = {}; }
        if (timeout === void 0) { timeout = 2000; }
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tx_1.tx.getTx(api.getTotalBorrowed, this.kavaClient.baseURI, timeout, args)];
                    case 1:
                        res = _a.sent();
                        if (res && res.data) {
                            return [2 /*return*/, res.data.result];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deposit funds to a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Hard.prototype.deposit = function (amount, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgDeposit, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgDeposit = msg_1.msg.hard.newMsgDeposit(this.kavaClient.wallet.address, amount);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgDeposit], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Withdraw funds from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Hard.prototype.withdraw = function (amount, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgWithdraw, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgWithdraw = msg_1.msg.hard.newMsgWithdraw(this.kavaClient.wallet.address, amount);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgWithdraw], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Borrow available funds from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Hard.prototype.borrow = function (amount, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgBorrow, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgBorrow = msg_1.msg.hard.newMsgBorrow(this.kavaClient.wallet.address, amount);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgBorrow], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Repay funds borrowed from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Hard.prototype.repay = function (amount, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgRepay, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgRepay = msg_1.msg.hard.newMsgRepay(this.kavaClient.wallet.address, this.kavaClient.wallet.address, amount);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgRepay], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Attempt to liquidate a borrower that's over their loan-to-value ratio
     * @param {String} borrower the borrower to be liquidated
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    Hard.prototype.liquidate = function (borrower, gas, sequence) {
        if (gas === void 0) { gas = DEFAULT_GAS; }
        if (sequence === void 0) { sequence = null; }
        return __awaiter(this, void 0, void 0, function () {
            var msgLiquidate, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.kavaClient.wallet) {
                            throw Error('Wallet has not yet been initialized');
                        }
                        msgLiquidate = msg_1.msg.hard.newMsgLiquidate(this.kavaClient.wallet.address, borrower);
                        fee = { amount: [], gas: String(gas) };
                        return [4 /*yield*/, this.kavaClient.sendTx([msgLiquidate], fee, sequence)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Hard;
}());
exports.Hard = Hard;
module.exports.Hard = Hard;
