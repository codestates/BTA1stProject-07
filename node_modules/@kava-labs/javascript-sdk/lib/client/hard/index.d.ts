import { KavaClient } from '..';
import { Coin } from '../../types/Coin';
export declare class Hard {
    kavaClient: KavaClient;
    static instance: Hard;
    constructor(kavaClient: KavaClient);
    /**
     * Get the params of the hard module
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getParams(timeout?: number): Promise<any>;
    /**
     * Get module accounts associated with the hard module
     * @param {Object} args optional arguments {name: "hard"|"hard_lp_distribution"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getModAccounts(args?: {}, timeout?: number): Promise<any>;
    /**
     * Get hard deposits
     * @param {Object} args optional arguments {deposit_denom: "btc", deposit_type: "btc-a", owner: "kava1l0xsq2z7gqd7yly0g40y5836g0appumark77ny"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getDeposits(args?: {}, timeout?: number): Promise<any>;
    /**
     * Get hard total-deposited
     * @param {Object} args optional arguments {denom: "btc"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getTotalDeposited(args?: {}, timeout?: number): Promise<any>;
    /**
     * Get hard borrows
     * @param {Object} args optional arguments {owner: "kava1l0xsq2z7gqd7yly0g40y5836g0appumark77ny" denom: "btc" }
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getBorrows(args?: {}, timeout?: number): Promise<any>;
    /**
     * Get hard total-borrowed
     * @param {Object} args optional arguments {denom: "btc"}
     * @param {Number} timeout request is attempted every 1000 milliseconds until millisecond timeout is reached
     * @return {Promise}
     */
    getTotalBorrowed(args?: {}, timeout?: number): Promise<any>;
    /**
     * Deposit funds to a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    deposit(amount: Coin[], gas?: number, sequence?: null): Promise<any>;
    /**
     * Withdraw funds from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    withdraw(amount: Coin[], gas?: number, sequence?: null): Promise<any>;
    /**
     * Borrow available funds from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    borrow(amount: Coin[], gas?: number, sequence?: null): Promise<any>;
    /**
     * Repay funds borrowed from a liquidity pool
     * @param {Object} amount the coins to be deposited
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    repay(amount: Coin[], gas?: number, sequence?: null): Promise<any>;
    /**
     * Attempt to liquidate a borrower that's over their loan-to-value ratio
     * @param {String} borrower the borrower to be liquidated
     * @param {Number} gas optional gas amount
     * @param {String} sequence optional account sequence
     * @return {Promise}
     */
    liquidate(borrower: string, gas?: number, sequence?: null): Promise<any>;
}
