"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryTraceBlockResponse = exports.QueryTraceBlockRequest = exports.QueryTraceTxResponse = exports.QueryTraceTxRequest = exports.EstimateGasResponse = exports.EthCallRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryTxLogsResponse = exports.QueryTxLogsRequest = exports.QueryCodeResponse = exports.QueryCodeRequest = exports.QueryStorageResponse = exports.QueryStorageRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = exports.QueryValidatorAccountResponse = exports.QueryValidatorAccountRequest = exports.QueryCosmosAccountResponse = exports.QueryCosmosAccountRequest = exports.QueryAccountResponse = exports.QueryAccountRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
var evm_1 = require("../../../ethermint/evm/v1/evm");
var tx_1 = require("../../../ethermint/evm/v1/tx");
var timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = 'ethermint.evm.v1';
function createBaseQueryAccountRequest() {
    return { address: '' };
}
exports.QueryAccountRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.address !== '') {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAccountRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? String(object.address) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryAccountRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryAccountResponse() {
    return { balance: '', codeHash: '', nonce: long_1.default.UZERO };
}
exports.QueryAccountResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.balance !== '') {
            writer.uint32(10).string(message.balance);
        }
        if (message.codeHash !== '') {
            writer.uint32(18).string(message.codeHash);
        }
        if (!message.nonce.isZero()) {
            writer.uint32(24).uint64(message.nonce);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAccountResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.balance = reader.string();
                    break;
                case 2:
                    message.codeHash = reader.string();
                    break;
                case 3:
                    message.nonce = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            balance: isSet(object.balance) ? String(object.balance) : '',
            codeHash: isSet(object.codeHash) ? String(object.codeHash) : '',
            nonce: isSet(object.nonce) ? long_1.default.fromString(object.nonce) : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.balance !== undefined && (obj.balance = message.balance);
        message.codeHash !== undefined && (obj.codeHash = message.codeHash);
        message.nonce !== undefined &&
            (obj.nonce = (message.nonce || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryAccountResponse();
        message.balance = (_a = object.balance) !== null && _a !== void 0 ? _a : '';
        message.codeHash = (_b = object.codeHash) !== null && _b !== void 0 ? _b : '';
        message.nonce =
            object.nonce !== undefined && object.nonce !== null
                ? long_1.default.fromValue(object.nonce)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryCosmosAccountRequest() {
    return { address: '' };
}
exports.QueryCosmosAccountRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.address !== '') {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCosmosAccountRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? String(object.address) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryCosmosAccountRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryCosmosAccountResponse() {
    return { cosmosAddress: '', sequence: long_1.default.UZERO, accountNumber: long_1.default.UZERO };
}
exports.QueryCosmosAccountResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.cosmosAddress !== '') {
            writer.uint32(10).string(message.cosmosAddress);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(16).uint64(message.sequence);
        }
        if (!message.accountNumber.isZero()) {
            writer.uint32(24).uint64(message.accountNumber);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCosmosAccountResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cosmosAddress = reader.string();
                    break;
                case 2:
                    message.sequence = reader.uint64();
                    break;
                case 3:
                    message.accountNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            cosmosAddress: isSet(object.cosmosAddress)
                ? String(object.cosmosAddress)
                : '',
            sequence: isSet(object.sequence)
                ? long_1.default.fromString(object.sequence)
                : long_1.default.UZERO,
            accountNumber: isSet(object.accountNumber)
                ? long_1.default.fromString(object.accountNumber)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.cosmosAddress !== undefined &&
            (obj.cosmosAddress = message.cosmosAddress);
        message.sequence !== undefined &&
            (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        message.accountNumber !== undefined &&
            (obj.accountNumber = (message.accountNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryCosmosAccountResponse();
        message.cosmosAddress = (_a = object.cosmosAddress) !== null && _a !== void 0 ? _a : '';
        message.sequence =
            object.sequence !== undefined && object.sequence !== null
                ? long_1.default.fromValue(object.sequence)
                : long_1.default.UZERO;
        message.accountNumber =
            object.accountNumber !== undefined && object.accountNumber !== null
                ? long_1.default.fromValue(object.accountNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryValidatorAccountRequest() {
    return { consAddress: '' };
}
exports.QueryValidatorAccountRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.consAddress !== '') {
            writer.uint32(10).string(message.consAddress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryValidatorAccountRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.consAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            consAddress: isSet(object.consAddress) ? String(object.consAddress) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.consAddress !== undefined &&
            (obj.consAddress = message.consAddress);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryValidatorAccountRequest();
        message.consAddress = (_a = object.consAddress) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryValidatorAccountResponse() {
    return {
        accountAddress: '',
        sequence: long_1.default.UZERO,
        accountNumber: long_1.default.UZERO,
    };
}
exports.QueryValidatorAccountResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.accountAddress !== '') {
            writer.uint32(10).string(message.accountAddress);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(16).uint64(message.sequence);
        }
        if (!message.accountNumber.isZero()) {
            writer.uint32(24).uint64(message.accountNumber);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryValidatorAccountResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accountAddress = reader.string();
                    break;
                case 2:
                    message.sequence = reader.uint64();
                    break;
                case 3:
                    message.accountNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            accountAddress: isSet(object.accountAddress)
                ? String(object.accountAddress)
                : '',
            sequence: isSet(object.sequence)
                ? long_1.default.fromString(object.sequence)
                : long_1.default.UZERO,
            accountNumber: isSet(object.accountNumber)
                ? long_1.default.fromString(object.accountNumber)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.accountAddress !== undefined &&
            (obj.accountAddress = message.accountAddress);
        message.sequence !== undefined &&
            (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        message.accountNumber !== undefined &&
            (obj.accountNumber = (message.accountNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryValidatorAccountResponse();
        message.accountAddress = (_a = object.accountAddress) !== null && _a !== void 0 ? _a : '';
        message.sequence =
            object.sequence !== undefined && object.sequence !== null
                ? long_1.default.fromValue(object.sequence)
                : long_1.default.UZERO;
        message.accountNumber =
            object.accountNumber !== undefined && object.accountNumber !== null
                ? long_1.default.fromValue(object.accountNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryBalanceRequest() {
    return { address: '' };
}
exports.QueryBalanceRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.address !== '') {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryBalanceRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? String(object.address) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryBalanceRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryBalanceResponse() {
    return { balance: '' };
}
exports.QueryBalanceResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.balance !== '') {
            writer.uint32(10).string(message.balance);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryBalanceResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.balance = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            balance: isSet(object.balance) ? String(object.balance) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.balance !== undefined && (obj.balance = message.balance);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryBalanceResponse();
        message.balance = (_a = object.balance) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryStorageRequest() {
    return { address: '', key: '' };
}
exports.QueryStorageRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.address !== '') {
            writer.uint32(10).string(message.address);
        }
        if (message.key !== '') {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStorageRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.key = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? String(object.address) : '',
            key: isSet(object.key) ? String(object.key) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.key !== undefined && (obj.key = message.key);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryStorageRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : '';
        message.key = (_b = object.key) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseQueryStorageResponse() {
    return { value: '' };
}
exports.QueryStorageResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.value !== '') {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryStorageResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            value: isSet(object.value) ? String(object.value) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryStorageResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryCodeRequest() {
    return { address: '' };
}
exports.QueryCodeRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.address !== '') {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCodeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            address: isSet(object.address) ? String(object.address) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryCodeRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryCodeResponse() {
    return { code: new Uint8Array() };
}
exports.QueryCodeResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.code.length !== 0) {
            writer.uint32(10).bytes(message.code);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCodeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.code = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            code: isSet(object.code)
                ? bytesFromBase64(object.code)
                : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.code !== undefined &&
            (obj.code = base64FromBytes(message.code !== undefined ? message.code : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryCodeResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function createBaseQueryTxLogsRequest() {
    return { hash: '', pagination: undefined };
}
exports.QueryTxLogsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.hash !== '') {
            writer.uint32(10).string(message.hash);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTxLogsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hash = reader.string();
                    break;
                case 2:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            hash: isSet(object.hash) ? String(object.hash) : '',
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.hash !== undefined && (obj.hash = message.hash);
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageRequest.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTxLogsRequest();
        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : '';
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryTxLogsResponse() {
    return { logs: [], pagination: undefined };
}
exports.QueryTxLogsResponse = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.logs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                evm_1.Log.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTxLogsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.logs.push(evm_1.Log.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            logs: Array.isArray(object === null || object === void 0 ? void 0 : object.logs)
                ? object.logs.map(function (e) { return evm_1.Log.fromJSON(e); })
                : [],
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.logs) {
            obj.logs = message.logs.map(function (e) { return (e ? evm_1.Log.toJSON(e) : undefined); });
        }
        else {
            obj.logs = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageResponse.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTxLogsResponse();
        message.logs = ((_a = object.logs) === null || _a === void 0 ? void 0 : _a.map(function (e) { return evm_1.Log.fromPartial(e); })) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            evm_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = evm_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? evm_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? evm_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? evm_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseEthCallRequest() {
    return { args: new Uint8Array(), gasCap: long_1.default.UZERO };
}
exports.EthCallRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.args.length !== 0) {
            writer.uint32(10).bytes(message.args);
        }
        if (!message.gasCap.isZero()) {
            writer.uint32(16).uint64(message.gasCap);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEthCallRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.args = reader.bytes();
                    break;
                case 2:
                    message.gasCap = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            args: isSet(object.args)
                ? bytesFromBase64(object.args)
                : new Uint8Array(),
            gasCap: isSet(object.gasCap)
                ? long_1.default.fromString(object.gasCap)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.args !== undefined &&
            (obj.args = base64FromBytes(message.args !== undefined ? message.args : new Uint8Array()));
        message.gasCap !== undefined &&
            (obj.gasCap = (message.gasCap || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseEthCallRequest();
        message.args = (_a = object.args) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.gasCap =
            object.gasCap !== undefined && object.gasCap !== null
                ? long_1.default.fromValue(object.gasCap)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseEstimateGasResponse() {
    return { gas: long_1.default.UZERO };
}
exports.EstimateGasResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.gas.isZero()) {
            writer.uint32(8).uint64(message.gas);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEstimateGasResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gas = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            gas: isSet(object.gas) ? long_1.default.fromString(object.gas) : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.gas !== undefined &&
            (obj.gas = (message.gas || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseEstimateGasResponse();
        message.gas =
            object.gas !== undefined && object.gas !== null
                ? long_1.default.fromValue(object.gas)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryTraceTxRequest() {
    return {
        msg: undefined,
        txIndex: long_1.default.UZERO,
        traceConfig: undefined,
        predecessors: [],
        blockNumber: long_1.default.ZERO,
        blockHash: '',
        blockTime: undefined,
    };
}
exports.QueryTraceTxRequest = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.msg !== undefined) {
            tx_1.MsgEthereumTx.encode(message.msg, writer.uint32(10).fork()).ldelim();
        }
        if (!message.txIndex.isZero()) {
            writer.uint32(16).uint64(message.txIndex);
        }
        if (message.traceConfig !== undefined) {
            evm_1.TraceConfig.encode(message.traceConfig, writer.uint32(26).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.predecessors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                tx_1.MsgEthereumTx.encode(v, writer.uint32(34).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(40).int64(message.blockNumber);
        }
        if (message.blockHash !== '') {
            writer.uint32(50).string(message.blockHash);
        }
        if (message.blockTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTime), writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTraceTxRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.msg = tx_1.MsgEthereumTx.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.txIndex = reader.uint64();
                    break;
                case 3:
                    message.traceConfig = evm_1.TraceConfig.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.predecessors.push(tx_1.MsgEthereumTx.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.blockNumber = reader.int64();
                    break;
                case 6:
                    message.blockHash = reader.string();
                    break;
                case 7:
                    message.blockTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            msg: isSet(object.msg) ? tx_1.MsgEthereumTx.fromJSON(object.msg) : undefined,
            txIndex: isSet(object.txIndex)
                ? long_1.default.fromString(object.txIndex)
                : long_1.default.UZERO,
            traceConfig: isSet(object.traceConfig)
                ? evm_1.TraceConfig.fromJSON(object.traceConfig)
                : undefined,
            predecessors: Array.isArray(object === null || object === void 0 ? void 0 : object.predecessors)
                ? object.predecessors.map(function (e) { return tx_1.MsgEthereumTx.fromJSON(e); })
                : [],
            blockNumber: isSet(object.blockNumber)
                ? long_1.default.fromString(object.blockNumber)
                : long_1.default.ZERO,
            blockHash: isSet(object.blockHash) ? String(object.blockHash) : '',
            blockTime: isSet(object.blockTime)
                ? fromJsonTimestamp(object.blockTime)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.msg !== undefined &&
            (obj.msg = message.msg ? tx_1.MsgEthereumTx.toJSON(message.msg) : undefined);
        message.txIndex !== undefined &&
            (obj.txIndex = (message.txIndex || long_1.default.UZERO).toString());
        message.traceConfig !== undefined &&
            (obj.traceConfig = message.traceConfig
                ? evm_1.TraceConfig.toJSON(message.traceConfig)
                : undefined);
        if (message.predecessors) {
            obj.predecessors = message.predecessors.map(function (e) {
                return e ? tx_1.MsgEthereumTx.toJSON(e) : undefined;
            });
        }
        else {
            obj.predecessors = [];
        }
        message.blockNumber !== undefined &&
            (obj.blockNumber = (message.blockNumber || long_1.default.ZERO).toString());
        message.blockHash !== undefined && (obj.blockHash = message.blockHash);
        message.blockTime !== undefined &&
            (obj.blockTime = message.blockTime.toISOString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseQueryTraceTxRequest();
        message.msg =
            object.msg !== undefined && object.msg !== null
                ? tx_1.MsgEthereumTx.fromPartial(object.msg)
                : undefined;
        message.txIndex =
            object.txIndex !== undefined && object.txIndex !== null
                ? long_1.default.fromValue(object.txIndex)
                : long_1.default.UZERO;
        message.traceConfig =
            object.traceConfig !== undefined && object.traceConfig !== null
                ? evm_1.TraceConfig.fromPartial(object.traceConfig)
                : undefined;
        message.predecessors =
            ((_a = object.predecessors) === null || _a === void 0 ? void 0 : _a.map(function (e) { return tx_1.MsgEthereumTx.fromPartial(e); })) || [];
        message.blockNumber =
            object.blockNumber !== undefined && object.blockNumber !== null
                ? long_1.default.fromValue(object.blockNumber)
                : long_1.default.ZERO;
        message.blockHash = (_b = object.blockHash) !== null && _b !== void 0 ? _b : '';
        message.blockTime = (_c = object.blockTime) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseQueryTraceTxResponse() {
    return { data: new Uint8Array() };
}
exports.QueryTraceTxResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTraceTxResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTraceTxResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function createBaseQueryTraceBlockRequest() {
    return {
        txs: [],
        traceConfig: undefined,
        blockNumber: long_1.default.ZERO,
        blockHash: '',
        blockTime: undefined,
    };
}
exports.QueryTraceBlockRequest = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.txs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                tx_1.MsgEthereumTx.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (message.traceConfig !== undefined) {
            evm_1.TraceConfig.encode(message.traceConfig, writer.uint32(26).fork()).ldelim();
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(40).int64(message.blockNumber);
        }
        if (message.blockHash !== '') {
            writer.uint32(50).string(message.blockHash);
        }
        if (message.blockTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTime), writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTraceBlockRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txs.push(tx_1.MsgEthereumTx.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.traceConfig = evm_1.TraceConfig.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.blockNumber = reader.int64();
                    break;
                case 6:
                    message.blockHash = reader.string();
                    break;
                case 7:
                    message.blockTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            txs: Array.isArray(object === null || object === void 0 ? void 0 : object.txs)
                ? object.txs.map(function (e) { return tx_1.MsgEthereumTx.fromJSON(e); })
                : [],
            traceConfig: isSet(object.traceConfig)
                ? evm_1.TraceConfig.fromJSON(object.traceConfig)
                : undefined,
            blockNumber: isSet(object.blockNumber)
                ? long_1.default.fromString(object.blockNumber)
                : long_1.default.ZERO,
            blockHash: isSet(object.blockHash) ? String(object.blockHash) : '',
            blockTime: isSet(object.blockTime)
                ? fromJsonTimestamp(object.blockTime)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.txs) {
            obj.txs = message.txs.map(function (e) {
                return e ? tx_1.MsgEthereumTx.toJSON(e) : undefined;
            });
        }
        else {
            obj.txs = [];
        }
        message.traceConfig !== undefined &&
            (obj.traceConfig = message.traceConfig
                ? evm_1.TraceConfig.toJSON(message.traceConfig)
                : undefined);
        message.blockNumber !== undefined &&
            (obj.blockNumber = (message.blockNumber || long_1.default.ZERO).toString());
        message.blockHash !== undefined && (obj.blockHash = message.blockHash);
        message.blockTime !== undefined &&
            (obj.blockTime = message.blockTime.toISOString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseQueryTraceBlockRequest();
        message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map(function (e) { return tx_1.MsgEthereumTx.fromPartial(e); })) || [];
        message.traceConfig =
            object.traceConfig !== undefined && object.traceConfig !== null
                ? evm_1.TraceConfig.fromPartial(object.traceConfig)
                : undefined;
        message.blockNumber =
            object.blockNumber !== undefined && object.blockNumber !== null
                ? long_1.default.fromValue(object.blockNumber)
                : long_1.default.ZERO;
        message.blockHash = (_b = object.blockHash) !== null && _b !== void 0 ? _b : '';
        message.blockTime = (_c = object.blockTime) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseQueryTraceBlockResponse() {
    return { data: new Uint8Array() };
}
exports.QueryTraceBlockResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTraceBlockResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTraceBlockResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc) {
        this.rpc = rpc;
        this.Account = this.Account.bind(this);
        this.CosmosAccount = this.CosmosAccount.bind(this);
        this.ValidatorAccount = this.ValidatorAccount.bind(this);
        this.Balance = this.Balance.bind(this);
        this.Storage = this.Storage.bind(this);
        this.Code = this.Code.bind(this);
        this.Params = this.Params.bind(this);
        this.EthCall = this.EthCall.bind(this);
        this.EstimateGas = this.EstimateGas.bind(this);
        this.TraceTx = this.TraceTx.bind(this);
        this.TraceBlock = this.TraceBlock.bind(this);
    }
    QueryClientImpl.prototype.Account = function (request) {
        var data = exports.QueryAccountRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'Account', data);
        return promise.then(function (data) {
            return exports.QueryAccountResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.CosmosAccount = function (request) {
        var data = exports.QueryCosmosAccountRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'CosmosAccount', data);
        return promise.then(function (data) {
            return exports.QueryCosmosAccountResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.ValidatorAccount = function (request) {
        var data = exports.QueryValidatorAccountRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'ValidatorAccount', data);
        return promise.then(function (data) {
            return exports.QueryValidatorAccountResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Balance = function (request) {
        var data = exports.QueryBalanceRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'Balance', data);
        return promise.then(function (data) {
            return exports.QueryBalanceResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Storage = function (request) {
        var data = exports.QueryStorageRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'Storage', data);
        return promise.then(function (data) {
            return exports.QueryStorageResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Code = function (request) {
        var data = exports.QueryCodeRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'Code', data);
        return promise.then(function (data) {
            return exports.QueryCodeResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Params = function (request) {
        var data = exports.QueryParamsRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'Params', data);
        return promise.then(function (data) {
            return exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.EthCall = function (request) {
        var data = exports.EthCallRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'EthCall', data);
        return promise.then(function (data) {
            return tx_1.MsgEthereumTxResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.EstimateGas = function (request) {
        var data = exports.EthCallRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'EstimateGas', data);
        return promise.then(function (data) {
            return exports.EstimateGasResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.TraceTx = function (request) {
        var data = exports.QueryTraceTxRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'TraceTx', data);
        return promise.then(function (data) {
            return exports.QueryTraceTxResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.TraceBlock = function (request) {
        var data = exports.QueryTraceBlockRequest.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Query', 'TraceBlock', data);
        return promise.then(function (data) {
            return exports.QueryTraceBlockResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_4, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return btoa(bin.join(''));
}
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
