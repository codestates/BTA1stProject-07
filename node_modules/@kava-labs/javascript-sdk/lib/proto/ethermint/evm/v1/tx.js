"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgEthereumTxResponse = exports.ExtensionOptionsEthereumTx = exports.DynamicFeeTx = exports.AccessListTx = exports.LegacyTx = exports.MsgEthereumTx = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var any_1 = require("../../../google/protobuf/any");
var evm_1 = require("../../../ethermint/evm/v1/evm");
exports.protobufPackage = 'ethermint.evm.v1';
function createBaseMsgEthereumTx() {
    return { data: undefined, size: 0, hash: '', from: '' };
}
exports.MsgEthereumTx = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.data !== undefined) {
            any_1.Any.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        if (message.size !== 0) {
            writer.uint32(17).double(message.size);
        }
        if (message.hash !== '') {
            writer.uint32(26).string(message.hash);
        }
        if (message.from !== '') {
            writer.uint32(34).string(message.from);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgEthereumTx();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = any_1.Any.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.size = reader.double();
                    break;
                case 3:
                    message.hash = reader.string();
                    break;
                case 4:
                    message.from = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            data: isSet(object.data) ? any_1.Any.fromJSON(object.data) : undefined,
            size: isSet(object.size) ? Number(object.size) : 0,
            hash: isSet(object.hash) ? String(object.hash) : '',
            from: isSet(object.from) ? String(object.from) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.data !== undefined &&
            (obj.data = message.data ? any_1.Any.toJSON(message.data) : undefined);
        message.size !== undefined && (obj.size = message.size);
        message.hash !== undefined && (obj.hash = message.hash);
        message.from !== undefined && (obj.from = message.from);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgEthereumTx();
        message.data =
            object.data !== undefined && object.data !== null
                ? any_1.Any.fromPartial(object.data)
                : undefined;
        message.size = (_a = object.size) !== null && _a !== void 0 ? _a : 0;
        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : '';
        message.from = (_c = object.from) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseLegacyTx() {
    return {
        nonce: long_1.default.UZERO,
        gasPrice: '',
        gas: long_1.default.UZERO,
        to: '',
        value: '',
        data: new Uint8Array(),
        v: new Uint8Array(),
        r: new Uint8Array(),
        s: new Uint8Array(),
    };
}
exports.LegacyTx = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.nonce.isZero()) {
            writer.uint32(8).uint64(message.nonce);
        }
        if (message.gasPrice !== '') {
            writer.uint32(18).string(message.gasPrice);
        }
        if (!message.gas.isZero()) {
            writer.uint32(24).uint64(message.gas);
        }
        if (message.to !== '') {
            writer.uint32(34).string(message.to);
        }
        if (message.value !== '') {
            writer.uint32(42).string(message.value);
        }
        if (message.data.length !== 0) {
            writer.uint32(50).bytes(message.data);
        }
        if (message.v.length !== 0) {
            writer.uint32(58).bytes(message.v);
        }
        if (message.r.length !== 0) {
            writer.uint32(66).bytes(message.r);
        }
        if (message.s.length !== 0) {
            writer.uint32(74).bytes(message.s);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLegacyTx();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nonce = reader.uint64();
                    break;
                case 2:
                    message.gasPrice = reader.string();
                    break;
                case 3:
                    message.gas = reader.uint64();
                    break;
                case 4:
                    message.to = reader.string();
                    break;
                case 5:
                    message.value = reader.string();
                    break;
                case 6:
                    message.data = reader.bytes();
                    break;
                case 7:
                    message.v = reader.bytes();
                    break;
                case 8:
                    message.r = reader.bytes();
                    break;
                case 9:
                    message.s = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            nonce: isSet(object.nonce) ? long_1.default.fromString(object.nonce) : long_1.default.UZERO,
            gasPrice: isSet(object.gasPrice) ? String(object.gasPrice) : '',
            gas: isSet(object.gas) ? long_1.default.fromString(object.gas) : long_1.default.UZERO,
            to: isSet(object.to) ? String(object.to) : '',
            value: isSet(object.value) ? String(object.value) : '',
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(),
            v: isSet(object.v) ? bytesFromBase64(object.v) : new Uint8Array(),
            r: isSet(object.r) ? bytesFromBase64(object.r) : new Uint8Array(),
            s: isSet(object.s) ? bytesFromBase64(object.s) : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.nonce !== undefined &&
            (obj.nonce = (message.nonce || long_1.default.UZERO).toString());
        message.gasPrice !== undefined && (obj.gasPrice = message.gasPrice);
        message.gas !== undefined &&
            (obj.gas = (message.gas || long_1.default.UZERO).toString());
        message.to !== undefined && (obj.to = message.to);
        message.value !== undefined && (obj.value = message.value);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        message.v !== undefined &&
            (obj.v = base64FromBytes(message.v !== undefined ? message.v : new Uint8Array()));
        message.r !== undefined &&
            (obj.r = base64FromBytes(message.r !== undefined ? message.r : new Uint8Array()));
        message.s !== undefined &&
            (obj.s = base64FromBytes(message.s !== undefined ? message.s : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseLegacyTx();
        message.nonce =
            object.nonce !== undefined && object.nonce !== null
                ? long_1.default.fromValue(object.nonce)
                : long_1.default.UZERO;
        message.gasPrice = (_a = object.gasPrice) !== null && _a !== void 0 ? _a : '';
        message.gas =
            object.gas !== undefined && object.gas !== null
                ? long_1.default.fromValue(object.gas)
                : long_1.default.UZERO;
        message.to = (_b = object.to) !== null && _b !== void 0 ? _b : '';
        message.value = (_c = object.value) !== null && _c !== void 0 ? _c : '';
        message.data = (_d = object.data) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.v = (_e = object.v) !== null && _e !== void 0 ? _e : new Uint8Array();
        message.r = (_f = object.r) !== null && _f !== void 0 ? _f : new Uint8Array();
        message.s = (_g = object.s) !== null && _g !== void 0 ? _g : new Uint8Array();
        return message;
    },
};
function createBaseAccessListTx() {
    return {
        chainId: '',
        nonce: long_1.default.UZERO,
        gasPrice: '',
        gas: long_1.default.UZERO,
        to: '',
        value: '',
        data: new Uint8Array(),
        accesses: [],
        v: new Uint8Array(),
        r: new Uint8Array(),
        s: new Uint8Array(),
    };
}
exports.AccessListTx = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.chainId !== '') {
            writer.uint32(10).string(message.chainId);
        }
        if (!message.nonce.isZero()) {
            writer.uint32(16).uint64(message.nonce);
        }
        if (message.gasPrice !== '') {
            writer.uint32(26).string(message.gasPrice);
        }
        if (!message.gas.isZero()) {
            writer.uint32(32).uint64(message.gas);
        }
        if (message.to !== '') {
            writer.uint32(42).string(message.to);
        }
        if (message.value !== '') {
            writer.uint32(50).string(message.value);
        }
        if (message.data.length !== 0) {
            writer.uint32(58).bytes(message.data);
        }
        try {
            for (var _b = __values(message.accesses), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                evm_1.AccessTuple.encode(v, writer.uint32(66).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (message.v.length !== 0) {
            writer.uint32(74).bytes(message.v);
        }
        if (message.r.length !== 0) {
            writer.uint32(82).bytes(message.r);
        }
        if (message.s.length !== 0) {
            writer.uint32(90).bytes(message.s);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAccessListTx();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.nonce = reader.uint64();
                    break;
                case 3:
                    message.gasPrice = reader.string();
                    break;
                case 4:
                    message.gas = reader.uint64();
                    break;
                case 5:
                    message.to = reader.string();
                    break;
                case 6:
                    message.value = reader.string();
                    break;
                case 7:
                    message.data = reader.bytes();
                    break;
                case 8:
                    message.accesses.push(evm_1.AccessTuple.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.v = reader.bytes();
                    break;
                case 10:
                    message.r = reader.bytes();
                    break;
                case 11:
                    message.s = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            chainId: isSet(object.chainId) ? String(object.chainId) : '',
            nonce: isSet(object.nonce) ? long_1.default.fromString(object.nonce) : long_1.default.UZERO,
            gasPrice: isSet(object.gasPrice) ? String(object.gasPrice) : '',
            gas: isSet(object.gas) ? long_1.default.fromString(object.gas) : long_1.default.UZERO,
            to: isSet(object.to) ? String(object.to) : '',
            value: isSet(object.value) ? String(object.value) : '',
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(),
            accesses: Array.isArray(object === null || object === void 0 ? void 0 : object.accesses)
                ? object.accesses.map(function (e) { return evm_1.AccessTuple.fromJSON(e); })
                : [],
            v: isSet(object.v) ? bytesFromBase64(object.v) : new Uint8Array(),
            r: isSet(object.r) ? bytesFromBase64(object.r) : new Uint8Array(),
            s: isSet(object.s) ? bytesFromBase64(object.s) : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.nonce !== undefined &&
            (obj.nonce = (message.nonce || long_1.default.UZERO).toString());
        message.gasPrice !== undefined && (obj.gasPrice = message.gasPrice);
        message.gas !== undefined &&
            (obj.gas = (message.gas || long_1.default.UZERO).toString());
        message.to !== undefined && (obj.to = message.to);
        message.value !== undefined && (obj.value = message.value);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        if (message.accesses) {
            obj.accesses = message.accesses.map(function (e) {
                return e ? evm_1.AccessTuple.toJSON(e) : undefined;
            });
        }
        else {
            obj.accesses = [];
        }
        message.v !== undefined &&
            (obj.v = base64FromBytes(message.v !== undefined ? message.v : new Uint8Array()));
        message.r !== undefined &&
            (obj.r = base64FromBytes(message.r !== undefined ? message.r : new Uint8Array()));
        message.s !== undefined &&
            (obj.s = base64FromBytes(message.s !== undefined ? message.s : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseAccessListTx();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : '';
        message.nonce =
            object.nonce !== undefined && object.nonce !== null
                ? long_1.default.fromValue(object.nonce)
                : long_1.default.UZERO;
        message.gasPrice = (_b = object.gasPrice) !== null && _b !== void 0 ? _b : '';
        message.gas =
            object.gas !== undefined && object.gas !== null
                ? long_1.default.fromValue(object.gas)
                : long_1.default.UZERO;
        message.to = (_c = object.to) !== null && _c !== void 0 ? _c : '';
        message.value = (_d = object.value) !== null && _d !== void 0 ? _d : '';
        message.data = (_e = object.data) !== null && _e !== void 0 ? _e : new Uint8Array();
        message.accesses =
            ((_f = object.accesses) === null || _f === void 0 ? void 0 : _f.map(function (e) { return evm_1.AccessTuple.fromPartial(e); })) || [];
        message.v = (_g = object.v) !== null && _g !== void 0 ? _g : new Uint8Array();
        message.r = (_h = object.r) !== null && _h !== void 0 ? _h : new Uint8Array();
        message.s = (_j = object.s) !== null && _j !== void 0 ? _j : new Uint8Array();
        return message;
    },
};
function createBaseDynamicFeeTx() {
    return {
        chainId: '',
        nonce: long_1.default.UZERO,
        gasTipCap: '',
        gasFeeCap: '',
        gas: long_1.default.UZERO,
        to: '',
        value: '',
        data: new Uint8Array(),
        accesses: [],
        v: new Uint8Array(),
        r: new Uint8Array(),
        s: new Uint8Array(),
    };
}
exports.DynamicFeeTx = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.chainId !== '') {
            writer.uint32(10).string(message.chainId);
        }
        if (!message.nonce.isZero()) {
            writer.uint32(16).uint64(message.nonce);
        }
        if (message.gasTipCap !== '') {
            writer.uint32(26).string(message.gasTipCap);
        }
        if (message.gasFeeCap !== '') {
            writer.uint32(34).string(message.gasFeeCap);
        }
        if (!message.gas.isZero()) {
            writer.uint32(40).uint64(message.gas);
        }
        if (message.to !== '') {
            writer.uint32(50).string(message.to);
        }
        if (message.value !== '') {
            writer.uint32(58).string(message.value);
        }
        if (message.data.length !== 0) {
            writer.uint32(66).bytes(message.data);
        }
        try {
            for (var _b = __values(message.accesses), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                evm_1.AccessTuple.encode(v, writer.uint32(74).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.v.length !== 0) {
            writer.uint32(82).bytes(message.v);
        }
        if (message.r.length !== 0) {
            writer.uint32(90).bytes(message.r);
        }
        if (message.s.length !== 0) {
            writer.uint32(98).bytes(message.s);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDynamicFeeTx();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.nonce = reader.uint64();
                    break;
                case 3:
                    message.gasTipCap = reader.string();
                    break;
                case 4:
                    message.gasFeeCap = reader.string();
                    break;
                case 5:
                    message.gas = reader.uint64();
                    break;
                case 6:
                    message.to = reader.string();
                    break;
                case 7:
                    message.value = reader.string();
                    break;
                case 8:
                    message.data = reader.bytes();
                    break;
                case 9:
                    message.accesses.push(evm_1.AccessTuple.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.v = reader.bytes();
                    break;
                case 11:
                    message.r = reader.bytes();
                    break;
                case 12:
                    message.s = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            chainId: isSet(object.chainId) ? String(object.chainId) : '',
            nonce: isSet(object.nonce) ? long_1.default.fromString(object.nonce) : long_1.default.UZERO,
            gasTipCap: isSet(object.gasTipCap) ? String(object.gasTipCap) : '',
            gasFeeCap: isSet(object.gasFeeCap) ? String(object.gasFeeCap) : '',
            gas: isSet(object.gas) ? long_1.default.fromString(object.gas) : long_1.default.UZERO,
            to: isSet(object.to) ? String(object.to) : '',
            value: isSet(object.value) ? String(object.value) : '',
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(),
            accesses: Array.isArray(object === null || object === void 0 ? void 0 : object.accesses)
                ? object.accesses.map(function (e) { return evm_1.AccessTuple.fromJSON(e); })
                : [],
            v: isSet(object.v) ? bytesFromBase64(object.v) : new Uint8Array(),
            r: isSet(object.r) ? bytesFromBase64(object.r) : new Uint8Array(),
            s: isSet(object.s) ? bytesFromBase64(object.s) : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.nonce !== undefined &&
            (obj.nonce = (message.nonce || long_1.default.UZERO).toString());
        message.gasTipCap !== undefined && (obj.gasTipCap = message.gasTipCap);
        message.gasFeeCap !== undefined && (obj.gasFeeCap = message.gasFeeCap);
        message.gas !== undefined &&
            (obj.gas = (message.gas || long_1.default.UZERO).toString());
        message.to !== undefined && (obj.to = message.to);
        message.value !== undefined && (obj.value = message.value);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        if (message.accesses) {
            obj.accesses = message.accesses.map(function (e) {
                return e ? evm_1.AccessTuple.toJSON(e) : undefined;
            });
        }
        else {
            obj.accesses = [];
        }
        message.v !== undefined &&
            (obj.v = base64FromBytes(message.v !== undefined ? message.v : new Uint8Array()));
        message.r !== undefined &&
            (obj.r = base64FromBytes(message.r !== undefined ? message.r : new Uint8Array()));
        message.s !== undefined &&
            (obj.s = base64FromBytes(message.s !== undefined ? message.s : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBaseDynamicFeeTx();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : '';
        message.nonce =
            object.nonce !== undefined && object.nonce !== null
                ? long_1.default.fromValue(object.nonce)
                : long_1.default.UZERO;
        message.gasTipCap = (_b = object.gasTipCap) !== null && _b !== void 0 ? _b : '';
        message.gasFeeCap = (_c = object.gasFeeCap) !== null && _c !== void 0 ? _c : '';
        message.gas =
            object.gas !== undefined && object.gas !== null
                ? long_1.default.fromValue(object.gas)
                : long_1.default.UZERO;
        message.to = (_d = object.to) !== null && _d !== void 0 ? _d : '';
        message.value = (_e = object.value) !== null && _e !== void 0 ? _e : '';
        message.data = (_f = object.data) !== null && _f !== void 0 ? _f : new Uint8Array();
        message.accesses =
            ((_g = object.accesses) === null || _g === void 0 ? void 0 : _g.map(function (e) { return evm_1.AccessTuple.fromPartial(e); })) || [];
        message.v = (_h = object.v) !== null && _h !== void 0 ? _h : new Uint8Array();
        message.r = (_j = object.r) !== null && _j !== void 0 ? _j : new Uint8Array();
        message.s = (_k = object.s) !== null && _k !== void 0 ? _k : new Uint8Array();
        return message;
    },
};
function createBaseExtensionOptionsEthereumTx() {
    return {};
}
exports.ExtensionOptionsEthereumTx = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseExtensionOptionsEthereumTx();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseExtensionOptionsEthereumTx();
        return message;
    },
};
function createBaseMsgEthereumTxResponse() {
    return {
        hash: '',
        logs: [],
        ret: new Uint8Array(),
        vmError: '',
        gasUsed: long_1.default.UZERO,
    };
}
exports.MsgEthereumTxResponse = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.hash !== '') {
            writer.uint32(10).string(message.hash);
        }
        try {
            for (var _b = __values(message.logs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                evm_1.Log.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (message.ret.length !== 0) {
            writer.uint32(26).bytes(message.ret);
        }
        if (message.vmError !== '') {
            writer.uint32(34).string(message.vmError);
        }
        if (!message.gasUsed.isZero()) {
            writer.uint32(40).uint64(message.gasUsed);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgEthereumTxResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hash = reader.string();
                    break;
                case 2:
                    message.logs.push(evm_1.Log.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.ret = reader.bytes();
                    break;
                case 4:
                    message.vmError = reader.string();
                    break;
                case 5:
                    message.gasUsed = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            hash: isSet(object.hash) ? String(object.hash) : '',
            logs: Array.isArray(object === null || object === void 0 ? void 0 : object.logs)
                ? object.logs.map(function (e) { return evm_1.Log.fromJSON(e); })
                : [],
            ret: isSet(object.ret) ? bytesFromBase64(object.ret) : new Uint8Array(),
            vmError: isSet(object.vmError) ? String(object.vmError) : '',
            gasUsed: isSet(object.gasUsed)
                ? long_1.default.fromString(object.gasUsed)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.hash !== undefined && (obj.hash = message.hash);
        if (message.logs) {
            obj.logs = message.logs.map(function (e) { return (e ? evm_1.Log.toJSON(e) : undefined); });
        }
        else {
            obj.logs = [];
        }
        message.ret !== undefined &&
            (obj.ret = base64FromBytes(message.ret !== undefined ? message.ret : new Uint8Array()));
        message.vmError !== undefined && (obj.vmError = message.vmError);
        message.gasUsed !== undefined &&
            (obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMsgEthereumTxResponse();
        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : '';
        message.logs = ((_b = object.logs) === null || _b === void 0 ? void 0 : _b.map(function (e) { return evm_1.Log.fromPartial(e); })) || [];
        message.ret = (_c = object.ret) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.vmError = (_d = object.vmError) !== null && _d !== void 0 ? _d : '';
        message.gasUsed =
            object.gasUsed !== undefined && object.gasUsed !== null
                ? long_1.default.fromValue(object.gasUsed)
                : long_1.default.UZERO;
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.EthereumTx = this.EthereumTx.bind(this);
    }
    MsgClientImpl.prototype.EthereumTx = function (request) {
        var data = exports.MsgEthereumTx.encode(request).finish();
        var promise = this.rpc.request('ethermint.evm.v1.Msg', 'EthereumTx', data);
        return promise.then(function (data) {
            return exports.MsgEthereumTxResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_4, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
