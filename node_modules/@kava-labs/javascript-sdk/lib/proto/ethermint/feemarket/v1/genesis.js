"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var feemarket_1 = require("../../../ethermint/feemarket/v1/feemarket");
exports.protobufPackage = 'ethermint.feemarket.v1';
function createBaseGenesisState() {
    return { params: undefined, baseFee: '', blockGas: long_1.default.UZERO };
}
exports.GenesisState = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            feemarket_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.baseFee !== '') {
            writer.uint32(18).string(message.baseFee);
        }
        if (!message.blockGas.isZero()) {
            writer.uint32(24).uint64(message.blockGas);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = feemarket_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.baseFee = reader.string();
                    break;
                case 3:
                    message.blockGas = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? feemarket_1.Params.fromJSON(object.params) : undefined,
            baseFee: isSet(object.baseFee) ? String(object.baseFee) : '',
            blockGas: isSet(object.blockGas)
                ? long_1.default.fromString(object.blockGas)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? feemarket_1.Params.toJSON(message.params) : undefined);
        message.baseFee !== undefined && (obj.baseFee = message.baseFee);
        message.blockGas !== undefined &&
            (obj.blockGas = (message.blockGas || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? feemarket_1.Params.fromPartial(object.params)
                : undefined;
        message.baseFee = (_a = object.baseFee) !== null && _a !== void 0 ? _a : '';
        message.blockGas =
            object.blockGas !== undefined && object.blockGas !== null
                ? long_1.default.fromValue(object.blockGas)
                : long_1.default.UZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
