"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitArray = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = 'tendermint.libs.bits';
function createBaseBitArray() {
    return { bits: long_1.default.ZERO, elems: [] };
}
exports.BitArray = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.bits.isZero()) {
            writer.uint32(8).int64(message.bits);
        }
        writer.uint32(18).fork();
        try {
            for (var _b = __values(message.elems), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint64(v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        writer.ldelim();
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBitArray();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bits = reader.int64();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.elems.push(reader.uint64());
                        }
                    }
                    else {
                        message.elems.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            bits: isSet(object.bits) ? long_1.default.fromString(object.bits) : long_1.default.ZERO,
            elems: Array.isArray(object === null || object === void 0 ? void 0 : object.elems)
                ? object.elems.map(function (e) { return long_1.default.fromString(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.bits !== undefined &&
            (obj.bits = (message.bits || long_1.default.ZERO).toString());
        if (message.elems) {
            obj.elems = message.elems.map(function (e) { return (e || long_1.default.UZERO).toString(); });
        }
        else {
            obj.elems = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseBitArray();
        message.bits =
            object.bits !== undefined && object.bits !== null
                ? long_1.default.fromValue(object.bits)
                : long_1.default.ZERO;
        message.elems = ((_a = object.elems) === null || _a === void 0 ? void 0 : _a.map(function (e) { return long_1.default.fromValue(e); })) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
