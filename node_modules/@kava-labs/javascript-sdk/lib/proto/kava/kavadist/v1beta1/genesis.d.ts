import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params } from '../../../kava/kavadist/v1beta1/params';
export declare const protobufPackage = "kava.kavadist.v1beta1";
/** GenesisState defines the kavadist module's genesis state. */
export interface GenesisState {
    params?: Params;
    previousBlockTime?: Date;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        params?: {
            active?: boolean | undefined;
            periods?: {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[] | undefined;
            infrastructureParams?: {
                infrastructurePeriods?: {
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                }[] | undefined;
                coreRewards?: {
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                }[] | undefined;
                partnerRewards?: {
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } | undefined;
        previousBlockTime?: Date | undefined;
    } & {
        params?: ({
            active?: boolean | undefined;
            periods?: {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[] | undefined;
            infrastructureParams?: {
                infrastructurePeriods?: {
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                }[] | undefined;
                coreRewards?: {
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                }[] | undefined;
                partnerRewards?: {
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
        } & {
            active?: boolean | undefined;
            periods?: ({
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[] & ({
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            } & {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["params"]["periods"][number], keyof import("../../../kava/kavadist/v1beta1/params").Period>, never>)[] & Record<Exclude<keyof I["params"]["periods"], keyof {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[]>, never>) | undefined;
            infrastructureParams?: ({
                infrastructurePeriods?: {
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                }[] | undefined;
                coreRewards?: {
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                }[] | undefined;
                partnerRewards?: {
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                }[] | undefined;
            } & {
                infrastructurePeriods?: ({
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                }[] & ({
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                } & {
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["params"]["infrastructureParams"]["infrastructurePeriods"][number], keyof import("../../../kava/kavadist/v1beta1/params").Period>, never>)[] & Record<Exclude<keyof I["params"]["infrastructureParams"]["infrastructurePeriods"], keyof {
                    start?: Date | undefined;
                    end?: Date | undefined;
                    inflation?: Uint8Array | undefined;
                }[]>, never>) | undefined;
                coreRewards?: ({
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                }[] & ({
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                } & Record<Exclude<keyof I["params"]["infrastructureParams"]["coreRewards"][number], keyof import("../../../kava/kavadist/v1beta1/params").CoreReward>, never>)[] & Record<Exclude<keyof I["params"]["infrastructureParams"]["coreRewards"], keyof {
                    address?: Uint8Array | undefined;
                    weight?: string | undefined;
                }[]>, never>) | undefined;
                partnerRewards?: ({
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                }[] & ({
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                } & {
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: ({
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } & Record<Exclude<keyof I["params"]["infrastructureParams"]["partnerRewards"][number]["rewardsPerSecond"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>, never>) | undefined;
                } & Record<Exclude<keyof I["params"]["infrastructureParams"]["partnerRewards"][number], keyof import("../../../kava/kavadist/v1beta1/params").PartnerReward>, never>)[] & Record<Exclude<keyof I["params"]["infrastructureParams"]["partnerRewards"], keyof {
                    address?: Uint8Array | undefined;
                    rewardsPerSecond?: {
                        denom?: string | undefined;
                        amount?: string | undefined;
                    } | undefined;
                }[]>, never>) | undefined;
            } & Record<Exclude<keyof I["params"]["infrastructureParams"], keyof import("../../../kava/kavadist/v1beta1/params").InfrastructureParams>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
        previousBlockTime?: Date | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
