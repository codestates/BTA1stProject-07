import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.kavadist.v1beta1";
/** Params governance parameters for kavadist module */
export interface Params {
    active: boolean;
    periods: Period[];
    infrastructureParams?: InfrastructureParams;
}
/** InfrastructureParams define the parameters for infrastructure rewards. */
export interface InfrastructureParams {
    infrastructurePeriods: Period[];
    coreRewards: CoreReward[];
    partnerRewards: PartnerReward[];
}
/** CoreReward defines the reward weights for core infrastructure providers. */
export interface CoreReward {
    address: Uint8Array;
    weight: string;
}
/** PartnerRewards defines the reward schedule for partner infrastructure providers. */
export interface PartnerReward {
    address: Uint8Array;
    rewardsPerSecond?: Coin;
}
/**
 * Period stores the specified start and end dates, and the inflation, expressed as a decimal
 * representing the yearly APR of KAVA tokens that will be minted during that period
 */
export interface Period {
    /** example "2020-03-01T15:20:00Z" */
    start?: Date;
    /** example "2020-06-01T15:20:00Z" */
    end?: Date;
    /** example "1.000000003022265980"  - 10% inflation */
    inflation: Uint8Array;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        active?: boolean | undefined;
        periods?: {
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        }[] | undefined;
        infrastructureParams?: {
            infrastructurePeriods?: {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[] | undefined;
            coreRewards?: {
                address?: Uint8Array | undefined;
                weight?: string | undefined;
            }[] | undefined;
            partnerRewards?: {
                address?: Uint8Array | undefined;
                rewardsPerSecond?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        active?: boolean | undefined;
        periods?: ({
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        }[] & ({
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        } & {
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["periods"][number], keyof Period>, never>)[] & Record<Exclude<keyof I["periods"], keyof {
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        }[]>, never>) | undefined;
        infrastructureParams?: ({
            infrastructurePeriods?: {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[] | undefined;
            coreRewards?: {
                address?: Uint8Array | undefined;
                weight?: string | undefined;
            }[] | undefined;
            partnerRewards?: {
                address?: Uint8Array | undefined;
                rewardsPerSecond?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            infrastructurePeriods?: ({
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[] & ({
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            } & {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["infrastructureParams"]["infrastructurePeriods"][number], keyof Period>, never>)[] & Record<Exclude<keyof I["infrastructureParams"]["infrastructurePeriods"], keyof {
                start?: Date | undefined;
                end?: Date | undefined;
                inflation?: Uint8Array | undefined;
            }[]>, never>) | undefined;
            coreRewards?: ({
                address?: Uint8Array | undefined;
                weight?: string | undefined;
            }[] & ({
                address?: Uint8Array | undefined;
                weight?: string | undefined;
            } & {
                address?: Uint8Array | undefined;
                weight?: string | undefined;
            } & Record<Exclude<keyof I["infrastructureParams"]["coreRewards"][number], keyof CoreReward>, never>)[] & Record<Exclude<keyof I["infrastructureParams"]["coreRewards"], keyof {
                address?: Uint8Array | undefined;
                weight?: string | undefined;
            }[]>, never>) | undefined;
            partnerRewards?: ({
                address?: Uint8Array | undefined;
                rewardsPerSecond?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            }[] & ({
                address?: Uint8Array | undefined;
                rewardsPerSecond?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } & {
                address?: Uint8Array | undefined;
                rewardsPerSecond?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & Record<Exclude<keyof I["infrastructureParams"]["partnerRewards"][number]["rewardsPerSecond"], keyof Coin>, never>) | undefined;
            } & Record<Exclude<keyof I["infrastructureParams"]["partnerRewards"][number], keyof PartnerReward>, never>)[] & Record<Exclude<keyof I["infrastructureParams"]["partnerRewards"], keyof {
                address?: Uint8Array | undefined;
                rewardsPerSecond?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["infrastructureParams"], keyof InfrastructureParams>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
};
export declare const InfrastructureParams: {
    encode(message: InfrastructureParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InfrastructureParams;
    fromJSON(object: any): InfrastructureParams;
    toJSON(message: InfrastructureParams): unknown;
    fromPartial<I extends {
        infrastructurePeriods?: {
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        }[] | undefined;
        coreRewards?: {
            address?: Uint8Array | undefined;
            weight?: string | undefined;
        }[] | undefined;
        partnerRewards?: {
            address?: Uint8Array | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        infrastructurePeriods?: ({
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        }[] & ({
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        } & {
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["infrastructurePeriods"][number], keyof Period>, never>)[] & Record<Exclude<keyof I["infrastructurePeriods"], keyof {
            start?: Date | undefined;
            end?: Date | undefined;
            inflation?: Uint8Array | undefined;
        }[]>, never>) | undefined;
        coreRewards?: ({
            address?: Uint8Array | undefined;
            weight?: string | undefined;
        }[] & ({
            address?: Uint8Array | undefined;
            weight?: string | undefined;
        } & {
            address?: Uint8Array | undefined;
            weight?: string | undefined;
        } & Record<Exclude<keyof I["coreRewards"][number], keyof CoreReward>, never>)[] & Record<Exclude<keyof I["coreRewards"], keyof {
            address?: Uint8Array | undefined;
            weight?: string | undefined;
        }[]>, never>) | undefined;
        partnerRewards?: ({
            address?: Uint8Array | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            address?: Uint8Array | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            address?: Uint8Array | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["partnerRewards"][number]["rewardsPerSecond"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["partnerRewards"][number], keyof PartnerReward>, never>)[] & Record<Exclude<keyof I["partnerRewards"], keyof {
            address?: Uint8Array | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof InfrastructureParams>, never>>(object: I): InfrastructureParams;
};
export declare const CoreReward: {
    encode(message: CoreReward, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CoreReward;
    fromJSON(object: any): CoreReward;
    toJSON(message: CoreReward): unknown;
    fromPartial<I extends {
        address?: Uint8Array | undefined;
        weight?: string | undefined;
    } & {
        address?: Uint8Array | undefined;
        weight?: string | undefined;
    } & Record<Exclude<keyof I, keyof CoreReward>, never>>(object: I): CoreReward;
};
export declare const PartnerReward: {
    encode(message: PartnerReward, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PartnerReward;
    fromJSON(object: any): PartnerReward;
    toJSON(message: PartnerReward): unknown;
    fromPartial<I extends {
        address?: Uint8Array | undefined;
        rewardsPerSecond?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        address?: Uint8Array | undefined;
        rewardsPerSecond?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["rewardsPerSecond"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PartnerReward>, never>>(object: I): PartnerReward;
};
export declare const Period: {
    encode(message: Period, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Period;
    fromJSON(object: any): Period;
    toJSON(message: Period): unknown;
    fromPartial<I extends {
        start?: Date | undefined;
        end?: Date | undefined;
        inflation?: Uint8Array | undefined;
    } & {
        start?: Date | undefined;
        end?: Date | undefined;
        inflation?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof Period>, never>>(object: I): Period;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
