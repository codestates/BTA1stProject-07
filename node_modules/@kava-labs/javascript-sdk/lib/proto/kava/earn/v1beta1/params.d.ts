import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { AllowedVault } from '../../../kava/earn/v1beta1/vault';
export declare const protobufPackage = "kava.earn.v1beta1";
/** Params defines the parameters of the earn module. */
export interface Params {
    allowedVaults: AllowedVault[];
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        allowedVaults?: {
            denom?: string | undefined;
            strategies?: import("./strategy").StrategyType[] | undefined;
            isPrivateVault?: boolean | undefined;
            allowedDepositors?: Uint8Array[] | undefined;
        }[] | undefined;
    } & {
        allowedVaults?: ({
            denom?: string | undefined;
            strategies?: import("./strategy").StrategyType[] | undefined;
            isPrivateVault?: boolean | undefined;
            allowedDepositors?: Uint8Array[] | undefined;
        }[] & ({
            denom?: string | undefined;
            strategies?: import("./strategy").StrategyType[] | undefined;
            isPrivateVault?: boolean | undefined;
            allowedDepositors?: Uint8Array[] | undefined;
        } & {
            denom?: string | undefined;
            strategies?: (import("./strategy").StrategyType[] & import("./strategy").StrategyType[] & Record<Exclude<keyof I["allowedVaults"][number]["strategies"], keyof import("./strategy").StrategyType[]>, never>) | undefined;
            isPrivateVault?: boolean | undefined;
            allowedDepositors?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["allowedVaults"][number]["allowedDepositors"], keyof Uint8Array[]>, never>) | undefined;
        } & Record<Exclude<keyof I["allowedVaults"][number], keyof AllowedVault>, never>)[] & Record<Exclude<keyof I["allowedVaults"], keyof {
            denom?: string | undefined;
            strategies?: import("./strategy").StrategyType[] | undefined;
            isPrivateVault?: boolean | undefined;
            allowedDepositors?: Uint8Array[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "allowedVaults">, never>>(object: I): Params;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
