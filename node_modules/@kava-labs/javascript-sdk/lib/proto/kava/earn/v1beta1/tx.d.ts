import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
import { StrategyType } from '../../../kava/earn/v1beta1/strategy';
import { VaultShare } from '../../../kava/earn/v1beta1/vault';
export declare const protobufPackage = "kava.earn.v1beta1";
/** MsgDeposit represents a message for depositing assedts into a vault */
export interface MsgDeposit {
    /** depositor represents the address to deposit funds from */
    depositor: string;
    /**
     * Amount represents the token to deposit. The vault corresponds to the denom
     * of the amount coin.
     */
    amount?: Coin;
    /** Strategy is the vault strategy to use. */
    strategy: StrategyType;
}
/** MsgDepositResponse defines the Msg/Deposit response type. */
export interface MsgDepositResponse {
    shares?: VaultShare;
}
/** MsgWithdraw represents a message for withdrawing liquidity from a vault */
export interface MsgWithdraw {
    /** from represents the address we are withdrawing for */
    from: string;
    /**
     * Amount represents the token to withdraw. The vault corresponds to the denom
     * of the amount coin.
     */
    amount?: Coin;
    /** Strategy is the vault strategy to use. */
    strategy: StrategyType;
}
/** MsgWithdrawResponse defines the Msg/Withdraw response type. */
export interface MsgWithdrawResponse {
    shares?: VaultShare;
}
export declare const MsgDeposit: {
    encode(message: MsgDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDeposit;
    fromJSON(object: any): MsgDeposit;
    toJSON(message: MsgDeposit): unknown;
    fromPartial<I extends {
        depositor?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        strategy?: StrategyType | undefined;
    } & {
        depositor?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        strategy?: StrategyType | undefined;
    } & Record<Exclude<keyof I, keyof MsgDeposit>, never>>(object: I): MsgDeposit;
};
export declare const MsgDepositResponse: {
    encode(message: MsgDepositResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDepositResponse;
    fromJSON(object: any): MsgDepositResponse;
    toJSON(message: MsgDepositResponse): unknown;
    fromPartial<I extends {
        shares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        shares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["shares"], keyof VaultShare>, never>) | undefined;
    } & Record<Exclude<keyof I, "shares">, never>>(object: I): MsgDepositResponse;
};
export declare const MsgWithdraw: {
    encode(message: MsgWithdraw, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdraw;
    fromJSON(object: any): MsgWithdraw;
    toJSON(message: MsgWithdraw): unknown;
    fromPartial<I extends {
        from?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        strategy?: StrategyType | undefined;
    } & {
        from?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        strategy?: StrategyType | undefined;
    } & Record<Exclude<keyof I, keyof MsgWithdraw>, never>>(object: I): MsgWithdraw;
};
export declare const MsgWithdrawResponse: {
    encode(message: MsgWithdrawResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdrawResponse;
    fromJSON(object: any): MsgWithdrawResponse;
    toJSON(message: MsgWithdrawResponse): unknown;
    fromPartial<I extends {
        shares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        shares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["shares"], keyof VaultShare>, never>) | undefined;
    } & Record<Exclude<keyof I, "shares">, never>>(object: I): MsgWithdrawResponse;
};
/** Msg defines the earn Msg service. */
export interface Msg {
    /** Deposit defines a method for depositing assets into a vault */
    Deposit(request: MsgDeposit): Promise<MsgDepositResponse>;
    /** Withdraw defines a method for withdrawing assets into a vault */
    Withdraw(request: MsgWithdraw): Promise<MsgWithdrawResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Deposit(request: MsgDeposit): Promise<MsgDepositResponse>;
    Withdraw(request: MsgWithdraw): Promise<MsgWithdrawResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
