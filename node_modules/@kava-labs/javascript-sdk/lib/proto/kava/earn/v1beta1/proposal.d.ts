import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.earn.v1beta1";
/** CommunityPoolDepositProposal deposits from the community pool into an earn vault */
export interface CommunityPoolDepositProposal {
    title: string;
    description: string;
    amount?: Coin;
}
/** CommunityPoolDepositProposalJSON defines a CommunityPoolDepositProposal with a deposit */
export interface CommunityPoolDepositProposalJSON {
    title: string;
    description: string;
    amount?: Coin;
    deposit: Coin[];
}
/** CommunityPoolWithdrawProposal withdraws from an earn vault back to community pool */
export interface CommunityPoolWithdrawProposal {
    title: string;
    description: string;
    amount?: Coin;
}
/** CommunityPoolWithdrawProposalJSON defines a CommunityPoolWithdrawProposal with a deposit */
export interface CommunityPoolWithdrawProposalJSON {
    title: string;
    description: string;
    amount?: Coin;
    deposit: Coin[];
}
export declare const CommunityPoolDepositProposal: {
    encode(message: CommunityPoolDepositProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommunityPoolDepositProposal;
    fromJSON(object: any): CommunityPoolDepositProposal;
    toJSON(message: CommunityPoolDepositProposal): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CommunityPoolDepositProposal>, never>>(object: I): CommunityPoolDepositProposal;
};
export declare const CommunityPoolDepositProposalJSON: {
    encode(message: CommunityPoolDepositProposalJSON, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommunityPoolDepositProposalJSON;
    fromJSON(object: any): CommunityPoolDepositProposalJSON;
    toJSON(message: CommunityPoolDepositProposalJSON): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        deposit?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        deposit?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["deposit"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["deposit"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CommunityPoolDepositProposalJSON>, never>>(object: I): CommunityPoolDepositProposalJSON;
};
export declare const CommunityPoolWithdrawProposal: {
    encode(message: CommunityPoolWithdrawProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommunityPoolWithdrawProposal;
    fromJSON(object: any): CommunityPoolWithdrawProposal;
    toJSON(message: CommunityPoolWithdrawProposal): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CommunityPoolWithdrawProposal>, never>>(object: I): CommunityPoolWithdrawProposal;
};
export declare const CommunityPoolWithdrawProposalJSON: {
    encode(message: CommunityPoolWithdrawProposalJSON, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommunityPoolWithdrawProposalJSON;
    fromJSON(object: any): CommunityPoolWithdrawProposalJSON;
    toJSON(message: CommunityPoolWithdrawProposalJSON): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        deposit?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        deposit?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["deposit"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["deposit"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CommunityPoolWithdrawProposalJSON>, never>>(object: I): CommunityPoolWithdrawProposalJSON;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
