"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultShare = exports.VaultShareRecord = exports.VaultRecord = exports.AllowedVault = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var strategy_1 = require("../../../kava/earn/v1beta1/strategy");
exports.protobufPackage = 'kava.earn.v1beta1';
function createBaseAllowedVault() {
    return {
        denom: '',
        strategies: [],
        isPrivateVault: false,
        allowedDepositors: [],
    };
}
exports.AllowedVault = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        writer.uint32(18).fork();
        try {
            for (var _c = __values(message.strategies), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                writer.int32(v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        writer.ldelim();
        if (message.isPrivateVault === true) {
            writer.uint32(24).bool(message.isPrivateVault);
        }
        try {
            for (var _e = __values(message.allowedDepositors), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                writer.uint32(34).bytes(v);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllowedVault();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.strategies.push(reader.int32());
                        }
                    }
                    else {
                        message.strategies.push(reader.int32());
                    }
                    break;
                case 3:
                    message.isPrivateVault = reader.bool();
                    break;
                case 4:
                    message.allowedDepositors.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            strategies: Array.isArray(object === null || object === void 0 ? void 0 : object.strategies)
                ? object.strategies.map(function (e) { return (0, strategy_1.strategyTypeFromJSON)(e); })
                : [],
            isPrivateVault: isSet(object.isPrivateVault)
                ? Boolean(object.isPrivateVault)
                : false,
            allowedDepositors: Array.isArray(object === null || object === void 0 ? void 0 : object.allowedDepositors)
                ? object.allowedDepositors.map(function (e) { return bytesFromBase64(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        if (message.strategies) {
            obj.strategies = message.strategies.map(function (e) { return (0, strategy_1.strategyTypeToJSON)(e); });
        }
        else {
            obj.strategies = [];
        }
        message.isPrivateVault !== undefined &&
            (obj.isPrivateVault = message.isPrivateVault);
        if (message.allowedDepositors) {
            obj.allowedDepositors = message.allowedDepositors.map(function (e) {
                return base64FromBytes(e !== undefined ? e : new Uint8Array());
            });
        }
        else {
            obj.allowedDepositors = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseAllowedVault();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.strategies = ((_b = object.strategies) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        message.isPrivateVault = (_c = object.isPrivateVault) !== null && _c !== void 0 ? _c : false;
        message.allowedDepositors = ((_d = object.allowedDepositors) === null || _d === void 0 ? void 0 : _d.map(function (e) { return e; })) || [];
        return message;
    },
};
function createBaseVaultRecord() {
    return { totalShares: undefined };
}
exports.VaultRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.totalShares !== undefined) {
            exports.VaultShare.encode(message.totalShares, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVaultRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.totalShares = exports.VaultShare.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            totalShares: isSet(object.totalShares)
                ? exports.VaultShare.fromJSON(object.totalShares)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.totalShares !== undefined &&
            (obj.totalShares = message.totalShares
                ? exports.VaultShare.toJSON(message.totalShares)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseVaultRecord();
        message.totalShares =
            object.totalShares !== undefined && object.totalShares !== null
                ? exports.VaultShare.fromPartial(object.totalShares)
                : undefined;
        return message;
    },
};
function createBaseVaultShareRecord() {
    return { depositor: new Uint8Array(), shares: [] };
}
exports.VaultShareRecord = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor.length !== 0) {
            writer.uint32(10).bytes(message.depositor);
        }
        try {
            for (var _b = __values(message.shares), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.VaultShare.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVaultShareRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.bytes();
                    break;
                case 2:
                    message.shares.push(exports.VaultShare.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor)
                ? bytesFromBase64(object.depositor)
                : new Uint8Array(),
            shares: Array.isArray(object === null || object === void 0 ? void 0 : object.shares)
                ? object.shares.map(function (e) { return exports.VaultShare.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined &&
            (obj.depositor = base64FromBytes(message.depositor !== undefined ? message.depositor : new Uint8Array()));
        if (message.shares) {
            obj.shares = message.shares.map(function (e) {
                return e ? exports.VaultShare.toJSON(e) : undefined;
            });
        }
        else {
            obj.shares = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVaultShareRecord();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.shares = ((_b = object.shares) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.VaultShare.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseVaultShare() {
    return { denom: '', amount: '' };
}
exports.VaultShare = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        if (message.amount !== '') {
            writer.uint32(18).string(message.amount);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVaultShare();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.amount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            amount: isSet(object.amount) ? String(object.amount) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVaultShare();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_4, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
