import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { StrategyType } from '../../../kava/earn/v1beta1/strategy';
export declare const protobufPackage = "kava.earn.v1beta1";
/**
 * AllowedVault is a vault that is allowed to be created. These can be
 * modified via parameter governance.
 */
export interface AllowedVault {
    /** Denom is the only supported denomination of the vault for deposits and withdrawals. */
    denom: string;
    /** VaultStrategy is the strategy used for this vault. */
    strategies: StrategyType[];
    /**
     * IsPrivateVault is true if the vault only allows depositors contained in
     * AllowedDepositors.
     */
    isPrivateVault: boolean;
    /**
     * AllowedDepositors is a list of addresses that are allowed to deposit to
     * this vault if IsPrivateVault is true. Addresses not contained in this list
     * are not allowed to deposit into this vault. If IsPrivateVault is false,
     * this should be empty and ignored.
     */
    allowedDepositors: Uint8Array[];
}
/** VaultRecord is the state of a vault. */
export interface VaultRecord {
    /** TotalShares is the total distributed number of shares in the vault. */
    totalShares?: VaultShare;
}
/** VaultShareRecord defines the vault shares owned by a depositor. */
export interface VaultShareRecord {
    /** Depositor represents the owner of the shares */
    depositor: Uint8Array;
    /** Shares represent the vault shares owned by the depositor. */
    shares: VaultShare[];
}
/** VaultShare defines shares of a vault owned by a depositor. */
export interface VaultShare {
    denom: string;
    amount: string;
}
export declare const AllowedVault: {
    encode(message: AllowedVault, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AllowedVault;
    fromJSON(object: any): AllowedVault;
    toJSON(message: AllowedVault): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        strategies?: StrategyType[] | undefined;
        isPrivateVault?: boolean | undefined;
        allowedDepositors?: Uint8Array[] | undefined;
    } & {
        denom?: string | undefined;
        strategies?: (StrategyType[] & StrategyType[] & Record<Exclude<keyof I["strategies"], keyof StrategyType[]>, never>) | undefined;
        isPrivateVault?: boolean | undefined;
        allowedDepositors?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["allowedDepositors"], keyof Uint8Array[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AllowedVault>, never>>(object: I): AllowedVault;
};
export declare const VaultRecord: {
    encode(message: VaultRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VaultRecord;
    fromJSON(object: any): VaultRecord;
    toJSON(message: VaultRecord): unknown;
    fromPartial<I extends {
        totalShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        totalShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["totalShares"], keyof VaultShare>, never>) | undefined;
    } & Record<Exclude<keyof I, "totalShares">, never>>(object: I): VaultRecord;
};
export declare const VaultShareRecord: {
    encode(message: VaultShareRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VaultShareRecord;
    fromJSON(object: any): VaultShareRecord;
    toJSON(message: VaultShareRecord): unknown;
    fromPartial<I extends {
        depositor?: Uint8Array | undefined;
        shares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        depositor?: Uint8Array | undefined;
        shares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["shares"][number], keyof VaultShare>, never>)[] & Record<Exclude<keyof I["shares"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof VaultShareRecord>, never>>(object: I): VaultShareRecord;
};
export declare const VaultShare: {
    encode(message: VaultShare, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VaultShare;
    fromJSON(object: any): VaultShare;
    toJSON(message: VaultShare): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        amount?: string | undefined;
    } & {
        denom?: string | undefined;
        amount?: string | undefined;
    } & Record<Exclude<keyof I, keyof VaultShare>, never>>(object: I): VaultShare;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
