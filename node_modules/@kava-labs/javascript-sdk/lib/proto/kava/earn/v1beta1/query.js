"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.DepositResponse = exports.QueryDepositsResponse = exports.QueryDepositsRequest = exports.VaultResponse = exports.QueryVaultResponse = exports.QueryVaultRequest = exports.QueryVaultsResponse = exports.QueryVaultsRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var params_1 = require("../../../kava/earn/v1beta1/params");
var pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
var strategy_1 = require("../../../kava/earn/v1beta1/strategy");
var vault_1 = require("../../../kava/earn/v1beta1/vault");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.earn.v1beta1';
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryVaultsRequest() {
    return {};
}
exports.QueryVaultsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVaultsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryVaultsRequest();
        return message;
    },
};
function createBaseQueryVaultsResponse() {
    return { vaults: [] };
}
exports.QueryVaultsResponse = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.vaults), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.VaultResponse.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVaultsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.vaults.push(exports.VaultResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            vaults: Array.isArray(object === null || object === void 0 ? void 0 : object.vaults)
                ? object.vaults.map(function (e) { return exports.VaultResponse.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.vaults) {
            obj.vaults = message.vaults.map(function (e) {
                return e ? exports.VaultResponse.toJSON(e) : undefined;
            });
        }
        else {
            obj.vaults = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryVaultsResponse();
        message.vaults =
            ((_a = object.vaults) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.VaultResponse.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryVaultRequest() {
    return { denom: '' };
}
exports.QueryVaultRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVaultRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryVaultRequest();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryVaultResponse() {
    return { vault: undefined };
}
exports.QueryVaultResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.vault !== undefined) {
            exports.VaultResponse.encode(message.vault, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVaultResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.vault = exports.VaultResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            vault: isSet(object.vault)
                ? exports.VaultResponse.fromJSON(object.vault)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.vault !== undefined &&
            (obj.vault = message.vault
                ? exports.VaultResponse.toJSON(message.vault)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryVaultResponse();
        message.vault =
            object.vault !== undefined && object.vault !== null
                ? exports.VaultResponse.fromPartial(object.vault)
                : undefined;
        return message;
    },
};
function createBaseVaultResponse() {
    return {
        denom: '',
        strategies: [],
        isPrivateVault: false,
        allowedDepositors: [],
        totalShares: '',
        totalValue: '',
    };
}
exports.VaultResponse = {
    encode: function (message, writer) {
        var e_2, _a, e_3, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        writer.uint32(18).fork();
        try {
            for (var _c = __values(message.strategies), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                writer.int32(v);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        writer.ldelim();
        if (message.isPrivateVault === true) {
            writer.uint32(24).bool(message.isPrivateVault);
        }
        try {
            for (var _e = __values(message.allowedDepositors), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                writer.uint32(34).string(v);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (message.totalShares !== '') {
            writer.uint32(42).string(message.totalShares);
        }
        if (message.totalValue !== '') {
            writer.uint32(50).string(message.totalValue);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVaultResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.strategies.push(reader.int32());
                        }
                    }
                    else {
                        message.strategies.push(reader.int32());
                    }
                    break;
                case 3:
                    message.isPrivateVault = reader.bool();
                    break;
                case 4:
                    message.allowedDepositors.push(reader.string());
                    break;
                case 5:
                    message.totalShares = reader.string();
                    break;
                case 6:
                    message.totalValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            strategies: Array.isArray(object === null || object === void 0 ? void 0 : object.strategies)
                ? object.strategies.map(function (e) { return (0, strategy_1.strategyTypeFromJSON)(e); })
                : [],
            isPrivateVault: isSet(object.isPrivateVault)
                ? Boolean(object.isPrivateVault)
                : false,
            allowedDepositors: Array.isArray(object === null || object === void 0 ? void 0 : object.allowedDepositors)
                ? object.allowedDepositors.map(function (e) { return String(e); })
                : [],
            totalShares: isSet(object.totalShares) ? String(object.totalShares) : '',
            totalValue: isSet(object.totalValue) ? String(object.totalValue) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        if (message.strategies) {
            obj.strategies = message.strategies.map(function (e) { return (0, strategy_1.strategyTypeToJSON)(e); });
        }
        else {
            obj.strategies = [];
        }
        message.isPrivateVault !== undefined &&
            (obj.isPrivateVault = message.isPrivateVault);
        if (message.allowedDepositors) {
            obj.allowedDepositors = message.allowedDepositors.map(function (e) { return e; });
        }
        else {
            obj.allowedDepositors = [];
        }
        message.totalShares !== undefined &&
            (obj.totalShares = message.totalShares);
        message.totalValue !== undefined && (obj.totalValue = message.totalValue);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseVaultResponse();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.strategies = ((_b = object.strategies) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        message.isPrivateVault = (_c = object.isPrivateVault) !== null && _c !== void 0 ? _c : false;
        message.allowedDepositors = ((_d = object.allowedDepositors) === null || _d === void 0 ? void 0 : _d.map(function (e) { return e; })) || [];
        message.totalShares = (_e = object.totalShares) !== null && _e !== void 0 ? _e : '';
        message.totalValue = (_f = object.totalValue) !== null && _f !== void 0 ? _f : '';
        return message;
    },
};
function createBaseQueryDepositsRequest() {
    return {
        depositor: '',
        denom: '',
        valueInStakedTokens: false,
        pagination: undefined,
    };
}
exports.QueryDepositsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.denom !== '') {
            writer.uint32(18).string(message.denom);
        }
        if (message.valueInStakedTokens === true) {
            writer.uint32(24).bool(message.valueInStakedTokens);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryDepositsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                case 3:
                    message.valueInStakedTokens = reader.bool();
                    break;
                case 4:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            denom: isSet(object.denom) ? String(object.denom) : '',
            valueInStakedTokens: isSet(object.valueInStakedTokens)
                ? Boolean(object.valueInStakedTokens)
                : false,
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.denom !== undefined && (obj.denom = message.denom);
        message.valueInStakedTokens !== undefined &&
            (obj.valueInStakedTokens = message.valueInStakedTokens);
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageRequest.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseQueryDepositsRequest();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : '';
        message.valueInStakedTokens = (_c = object.valueInStakedTokens) !== null && _c !== void 0 ? _c : false;
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryDepositsResponse() {
    return { deposits: [], pagination: undefined };
}
exports.QueryDepositsResponse = {
    encode: function (message, writer) {
        var e_4, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.deposits), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.DepositResponse.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryDepositsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.deposits.push(exports.DepositResponse.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            deposits: Array.isArray(object === null || object === void 0 ? void 0 : object.deposits)
                ? object.deposits.map(function (e) { return exports.DepositResponse.fromJSON(e); })
                : [],
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.deposits) {
            obj.deposits = message.deposits.map(function (e) {
                return e ? exports.DepositResponse.toJSON(e) : undefined;
            });
        }
        else {
            obj.deposits = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageResponse.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryDepositsResponse();
        message.deposits =
            ((_a = object.deposits) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.DepositResponse.fromPartial(e); })) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseDepositResponse() {
    return { depositor: '', shares: [], value: [] };
}
exports.DepositResponse = {
    encode: function (message, writer) {
        var e_5, _a, e_6, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        try {
            for (var _c = __values(message.shares), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                vault_1.VaultShare.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _e = __values(message.value), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDepositResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.shares.push(vault_1.VaultShare.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.value.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            shares: Array.isArray(object === null || object === void 0 ? void 0 : object.shares)
                ? object.shares.map(function (e) { return vault_1.VaultShare.fromJSON(e); })
                : [],
            value: Array.isArray(object === null || object === void 0 ? void 0 : object.value)
                ? object.value.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        if (message.shares) {
            obj.shares = message.shares.map(function (e) {
                return e ? vault_1.VaultShare.toJSON(e) : undefined;
            });
        }
        else {
            obj.shares = [];
        }
        if (message.value) {
            obj.value = message.value.map(function (e) { return (e ? coin_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.value = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseDepositResponse();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.shares = ((_b = object.shares) === null || _b === void 0 ? void 0 : _b.map(function (e) { return vault_1.VaultShare.fromPartial(e); })) || [];
        message.value = ((_c = object.value) === null || _c === void 0 ? void 0 : _c.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        return message;
    },
};
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Vaults = this.Vaults.bind(this);
        this.Vault = this.Vault.bind(this);
        this.Deposits = this.Deposits.bind(this);
    }
    QueryClientImpl.prototype.Params = function (request) {
        var data = exports.QueryParamsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.earn.v1beta1.Query', 'Params', data);
        return promise.then(function (data) {
            return exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Vaults = function (request) {
        var data = exports.QueryVaultsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.earn.v1beta1.Query', 'Vaults', data);
        return promise.then(function (data) {
            return exports.QueryVaultsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Vault = function (request) {
        var data = exports.QueryVaultRequest.encode(request).finish();
        var promise = this.rpc.request('kava.earn.v1beta1.Query', 'Vault', data);
        return promise.then(function (data) {
            return exports.QueryVaultResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Deposits = function (request) {
        var data = exports.QueryDepositsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.earn.v1beta1.Query', 'Deposits', data);
        return promise.then(function (data) {
            return exports.QueryDepositsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
