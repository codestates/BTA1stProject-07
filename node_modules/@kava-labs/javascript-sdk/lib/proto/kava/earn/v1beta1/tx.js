"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgWithdrawResponse = exports.MsgWithdraw = exports.MsgDepositResponse = exports.MsgDeposit = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var strategy_1 = require("../../../kava/earn/v1beta1/strategy");
var vault_1 = require("../../../kava/earn/v1beta1/vault");
exports.protobufPackage = 'kava.earn.v1beta1';
function createBaseMsgDeposit() {
    return { depositor: '', amount: undefined, strategy: 0 };
}
exports.MsgDeposit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
        }
        if (message.strategy !== 0) {
            writer.uint32(24).int32(message.strategy);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDeposit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.strategy = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            strategy: isSet(object.strategy)
                ? (0, strategy_1.strategyTypeFromJSON)(object.strategy)
                : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.strategy !== undefined &&
            (obj.strategy = (0, strategy_1.strategyTypeToJSON)(message.strategy));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgDeposit();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        message.strategy = (_b = object.strategy) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMsgDepositResponse() {
    return { shares: undefined };
}
exports.MsgDepositResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.shares !== undefined) {
            vault_1.VaultShare.encode(message.shares, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDepositResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.shares = vault_1.VaultShare.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            shares: isSet(object.shares)
                ? vault_1.VaultShare.fromJSON(object.shares)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.shares !== undefined &&
            (obj.shares = message.shares
                ? vault_1.VaultShare.toJSON(message.shares)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseMsgDepositResponse();
        message.shares =
            object.shares !== undefined && object.shares !== null
                ? vault_1.VaultShare.fromPartial(object.shares)
                : undefined;
        return message;
    },
};
function createBaseMsgWithdraw() {
    return { from: '', amount: undefined, strategy: 0 };
}
exports.MsgWithdraw = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
        }
        if (message.strategy !== 0) {
            writer.uint32(24).int32(message.strategy);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdraw();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.strategy = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            strategy: isSet(object.strategy)
                ? (0, strategy_1.strategyTypeFromJSON)(object.strategy)
                : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.strategy !== undefined &&
            (obj.strategy = (0, strategy_1.strategyTypeToJSON)(message.strategy));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgWithdraw();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        message.strategy = (_b = object.strategy) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMsgWithdrawResponse() {
    return { shares: undefined };
}
exports.MsgWithdrawResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.shares !== undefined) {
            vault_1.VaultShare.encode(message.shares, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.shares = vault_1.VaultShare.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            shares: isSet(object.shares)
                ? vault_1.VaultShare.fromJSON(object.shares)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.shares !== undefined &&
            (obj.shares = message.shares
                ? vault_1.VaultShare.toJSON(message.shares)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseMsgWithdrawResponse();
        message.shares =
            object.shares !== undefined && object.shares !== null
                ? vault_1.VaultShare.fromPartial(object.shares)
                : undefined;
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.Deposit = this.Deposit.bind(this);
        this.Withdraw = this.Withdraw.bind(this);
    }
    MsgClientImpl.prototype.Deposit = function (request) {
        var data = exports.MsgDeposit.encode(request).finish();
        var promise = this.rpc.request('kava.earn.v1beta1.Msg', 'Deposit', data);
        return promise.then(function (data) {
            return exports.MsgDepositResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.Withdraw = function (request) {
        var data = exports.MsgWithdraw.encode(request).finish();
        var promise = this.rpc.request('kava.earn.v1beta1.Msg', 'Withdraw', data);
        return promise.then(function (data) {
            return exports.MsgWithdrawResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
