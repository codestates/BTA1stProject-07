import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params } from '../../../kava/earn/v1beta1/params';
import { VaultRecord, VaultShareRecord } from '../../../kava/earn/v1beta1/vault';
export declare const protobufPackage = "kava.earn.v1beta1";
/** GenesisState defines the earn module's genesis state. */
export interface GenesisState {
    /** params defines all the paramaters related to earn */
    params?: Params;
    /** vault_records defines the available vaults */
    vaultRecords: VaultRecord[];
    /** share_records defines the owned shares of each vault */
    vaultShareRecords: VaultShareRecord[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        params?: {
            allowedVaults?: {
                denom?: string | undefined;
                strategies?: import("./strategy").StrategyType[] | undefined;
                isPrivateVault?: boolean | undefined;
                allowedDepositors?: Uint8Array[] | undefined;
            }[] | undefined;
        } | undefined;
        vaultRecords?: {
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
        vaultShareRecords?: {
            depositor?: Uint8Array | undefined;
            shares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        params?: ({
            allowedVaults?: {
                denom?: string | undefined;
                strategies?: import("./strategy").StrategyType[] | undefined;
                isPrivateVault?: boolean | undefined;
                allowedDepositors?: Uint8Array[] | undefined;
            }[] | undefined;
        } & {
            allowedVaults?: ({
                denom?: string | undefined;
                strategies?: import("./strategy").StrategyType[] | undefined;
                isPrivateVault?: boolean | undefined;
                allowedDepositors?: Uint8Array[] | undefined;
            }[] & ({
                denom?: string | undefined;
                strategies?: import("./strategy").StrategyType[] | undefined;
                isPrivateVault?: boolean | undefined;
                allowedDepositors?: Uint8Array[] | undefined;
            } & {
                denom?: string | undefined;
                strategies?: (import("./strategy").StrategyType[] & import("./strategy").StrategyType[] & Record<Exclude<keyof I["params"]["allowedVaults"][number]["strategies"], keyof import("./strategy").StrategyType[]>, never>) | undefined;
                isPrivateVault?: boolean | undefined;
                allowedDepositors?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["params"]["allowedVaults"][number]["allowedDepositors"], keyof Uint8Array[]>, never>) | undefined;
            } & Record<Exclude<keyof I["params"]["allowedVaults"][number], keyof import("../../../kava/earn/v1beta1/vault").AllowedVault>, never>)[] & Record<Exclude<keyof I["params"]["allowedVaults"], keyof {
                denom?: string | undefined;
                strategies?: import("./strategy").StrategyType[] | undefined;
                isPrivateVault?: boolean | undefined;
                allowedDepositors?: Uint8Array[] | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "allowedVaults">, never>) | undefined;
        vaultRecords?: ({
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["vaultRecords"][number]["totalShares"], keyof import("../../../kava/earn/v1beta1/vault").VaultShare>, never>) | undefined;
        } & Record<Exclude<keyof I["vaultRecords"][number], "totalShares">, never>)[] & Record<Exclude<keyof I["vaultRecords"], keyof {
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        vaultShareRecords?: ({
            depositor?: Uint8Array | undefined;
            shares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            depositor?: Uint8Array | undefined;
            shares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            depositor?: Uint8Array | undefined;
            shares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["vaultShareRecords"][number]["shares"][number], keyof import("../../../kava/earn/v1beta1/vault").VaultShare>, never>)[] & Record<Exclude<keyof I["vaultShareRecords"][number]["shares"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["vaultShareRecords"][number], keyof VaultShareRecord>, never>)[] & Record<Exclude<keyof I["vaultShareRecords"], keyof {
            depositor?: Uint8Array | undefined;
            shares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
