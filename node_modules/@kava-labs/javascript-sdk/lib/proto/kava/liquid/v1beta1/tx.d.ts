import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.liquid.v1beta1";
/** MsgMintDerivative defines the Msg/MintDerivative request type. */
export interface MsgMintDerivative {
    /** sender is the owner of the delegation to be converted */
    sender: string;
    /** validator is the validator of the delegation to be converted */
    validator: string;
    /** amount is the quantity of staked assets to be converted */
    amount?: Coin;
}
/** MsgMintDerivativeResponse defines the Msg/MintDerivative response type. */
export interface MsgMintDerivativeResponse {
    /** received is the amount of staking derivative minted and sent to the sender */
    received?: Coin;
}
/** MsgBurnDerivative defines the Msg/BurnDerivative request type. */
export interface MsgBurnDerivative {
    /** sender is the owner of the derivatives to be converted */
    sender: string;
    /** validator is the validator of the derivatives to be converted */
    validator: string;
    /** amount is the quantity of derivatives to be converted */
    amount?: Coin;
}
/** MsgBurnDerivativeResponse defines the Msg/BurnDerivative response type. */
export interface MsgBurnDerivativeResponse {
    /** received is the number of delegation shares sent to the sender */
    received: string;
}
export declare const MsgMintDerivative: {
    encode(message: MsgMintDerivative, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgMintDerivative;
    fromJSON(object: any): MsgMintDerivative;
    toJSON(message: MsgMintDerivative): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        validator?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        validator?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgMintDerivative>, never>>(object: I): MsgMintDerivative;
};
export declare const MsgMintDerivativeResponse: {
    encode(message: MsgMintDerivativeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgMintDerivativeResponse;
    fromJSON(object: any): MsgMintDerivativeResponse;
    toJSON(message: MsgMintDerivativeResponse): unknown;
    fromPartial<I extends {
        received?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        received?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["received"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, "received">, never>>(object: I): MsgMintDerivativeResponse;
};
export declare const MsgBurnDerivative: {
    encode(message: MsgBurnDerivative, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgBurnDerivative;
    fromJSON(object: any): MsgBurnDerivative;
    toJSON(message: MsgBurnDerivative): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        validator?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        validator?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgBurnDerivative>, never>>(object: I): MsgBurnDerivative;
};
export declare const MsgBurnDerivativeResponse: {
    encode(message: MsgBurnDerivativeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgBurnDerivativeResponse;
    fromJSON(object: any): MsgBurnDerivativeResponse;
    toJSON(message: MsgBurnDerivativeResponse): unknown;
    fromPartial<I extends {
        received?: string | undefined;
    } & {
        received?: string | undefined;
    } & Record<Exclude<keyof I, "received">, never>>(object: I): MsgBurnDerivativeResponse;
};
/** Msg defines the liquid Msg service. */
export interface Msg {
    /** MintDerivative defines a method for converting a delegation into staking deriviatives. */
    MintDerivative(request: MsgMintDerivative): Promise<MsgMintDerivativeResponse>;
    /** BurnDerivative defines a method for converting staking deriviatives into a delegation. */
    BurnDerivative(request: MsgBurnDerivative): Promise<MsgBurnDerivativeResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    MintDerivative(request: MsgMintDerivative): Promise<MsgMintDerivativeResponse>;
    BurnDerivative(request: MsgBurnDerivative): Promise<MsgBurnDerivativeResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
