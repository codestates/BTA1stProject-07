import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.liquid.v1beta1";
/** QueryDelegatedBalanceRequest defines the request type for Query/DelegatedBalance method. */
export interface QueryDelegatedBalanceRequest {
    /** delegator is the address of the account to query */
    delegator: string;
}
/** DelegatedBalanceResponse defines the response type for the Query/DelegatedBalance method. */
export interface QueryDelegatedBalanceResponse {
    /** vested is the amount of all delegated coins that have vested (ie not locked) */
    vested?: Coin;
    /** vesting is the amount of all delegated coins that are still vesting (ie locked) */
    vesting?: Coin;
}
export declare const QueryDelegatedBalanceRequest: {
    encode(message: QueryDelegatedBalanceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryDelegatedBalanceRequest;
    fromJSON(object: any): QueryDelegatedBalanceRequest;
    toJSON(message: QueryDelegatedBalanceRequest): unknown;
    fromPartial<I extends {
        delegator?: string | undefined;
    } & {
        delegator?: string | undefined;
    } & Record<Exclude<keyof I, "delegator">, never>>(object: I): QueryDelegatedBalanceRequest;
};
export declare const QueryDelegatedBalanceResponse: {
    encode(message: QueryDelegatedBalanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryDelegatedBalanceResponse;
    fromJSON(object: any): QueryDelegatedBalanceResponse;
    toJSON(message: QueryDelegatedBalanceResponse): unknown;
    fromPartial<I extends {
        vested?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        vesting?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        vested?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["vested"], keyof Coin>, never>) | undefined;
        vesting?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["vesting"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryDelegatedBalanceResponse>, never>>(object: I): QueryDelegatedBalanceResponse;
};
/** Query defines the gRPC querier service for liquid module */
export interface Query {
    /**
     * DelegatedBalance returns an account's vesting and vested coins currently delegated to validators.
     * It ignores coins in unbonding delegations.
     */
    DelegatedBalance(request: QueryDelegatedBalanceRequest): Promise<QueryDelegatedBalanceResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    DelegatedBalance(request: QueryDelegatedBalanceRequest): Promise<QueryDelegatedBalanceResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
