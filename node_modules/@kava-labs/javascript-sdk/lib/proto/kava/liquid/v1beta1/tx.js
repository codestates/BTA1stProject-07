"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgBurnDerivativeResponse = exports.MsgBurnDerivative = exports.MsgMintDerivativeResponse = exports.MsgMintDerivative = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.liquid.v1beta1';
function createBaseMsgMintDerivative() {
    return { sender: '', validator: '', amount: undefined };
}
exports.MsgMintDerivative = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.validator !== '') {
            writer.uint32(18).string(message.validator);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgMintDerivative();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            validator: isSet(object.validator) ? String(object.validator) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.validator !== undefined && (obj.validator = message.validator);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgMintDerivative();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.validator = (_b = object.validator) !== null && _b !== void 0 ? _b : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseMsgMintDerivativeResponse() {
    return { received: undefined };
}
exports.MsgMintDerivativeResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.received !== undefined) {
            coin_1.Coin.encode(message.received, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgMintDerivativeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.received = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            received: isSet(object.received)
                ? coin_1.Coin.fromJSON(object.received)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.received !== undefined &&
            (obj.received = message.received
                ? coin_1.Coin.toJSON(message.received)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseMsgMintDerivativeResponse();
        message.received =
            object.received !== undefined && object.received !== null
                ? coin_1.Coin.fromPartial(object.received)
                : undefined;
        return message;
    },
};
function createBaseMsgBurnDerivative() {
    return { sender: '', validator: '', amount: undefined };
}
exports.MsgBurnDerivative = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.validator !== '') {
            writer.uint32(18).string(message.validator);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgBurnDerivative();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            validator: isSet(object.validator) ? String(object.validator) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.validator !== undefined && (obj.validator = message.validator);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgBurnDerivative();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.validator = (_b = object.validator) !== null && _b !== void 0 ? _b : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseMsgBurnDerivativeResponse() {
    return { received: '' };
}
exports.MsgBurnDerivativeResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.received !== '') {
            writer.uint32(10).string(message.received);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgBurnDerivativeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.received = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            received: isSet(object.received) ? String(object.received) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.received !== undefined && (obj.received = message.received);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMsgBurnDerivativeResponse();
        message.received = (_a = object.received) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.MintDerivative = this.MintDerivative.bind(this);
        this.BurnDerivative = this.BurnDerivative.bind(this);
    }
    MsgClientImpl.prototype.MintDerivative = function (request) {
        var data = exports.MsgMintDerivative.encode(request).finish();
        var promise = this.rpc.request('kava.liquid.v1beta1.Msg', 'MintDerivative', data);
        return promise.then(function (data) {
            return exports.MsgMintDerivativeResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.BurnDerivative = function (request) {
        var data = exports.MsgBurnDerivative.encode(request).finish();
        var promise = this.rpc.request('kava.liquid.v1beta1.Msg', 'BurnDerivative', data);
        return promise.then(function (data) {
            return exports.MsgBurnDerivativeResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
