import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params } from '../../../kava/evmutil/v1beta1/genesis';
export declare const protobufPackage = "kava.evmutil.v1beta1";
/** QueryParamsRequest defines the request type for querying x/evmutil parameters. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse defines the response type for querying x/evmutil parameters. */
export interface QueryParamsResponse {
    params?: Params;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            enabledConversionPairs?: {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        params?: ({
            enabledConversionPairs?: {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[] | undefined;
        } & {
            enabledConversionPairs?: ({
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[] & ({
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            } & {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            } & Record<Exclude<keyof I["params"]["enabledConversionPairs"][number], keyof import("./conversion_pair").ConversionPair>, never>)[] & Record<Exclude<keyof I["params"]["enabledConversionPairs"], keyof {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "enabledConversionPairs">, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
};
/** Query defines the gRPC querier service for evmutil module */
export interface Query {
    /** Params queries all parameters of the evmutil module. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
