import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { ConversionPair } from '../../../kava/evmutil/v1beta1/conversion_pair';
export declare const protobufPackage = "kava.evmutil.v1beta1";
/** GenesisState defines the evmutil module's genesis state. */
export interface GenesisState {
    accounts: Account[];
    /** params defines all the parameters of the module. */
    params?: Params;
}
/** BalanceAccount defines an account in the evmutil module. */
export interface Account {
    address: Uint8Array;
    /** balance indicates the amount of akava owned by the address. */
    balance: string;
}
/** Params defines the evmutil module params */
export interface Params {
    /**
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     */
    enabledConversionPairs: ConversionPair[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        accounts?: {
            address?: Uint8Array | undefined;
            balance?: string | undefined;
        }[] | undefined;
        params?: {
            enabledConversionPairs?: {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        accounts?: ({
            address?: Uint8Array | undefined;
            balance?: string | undefined;
        }[] & ({
            address?: Uint8Array | undefined;
            balance?: string | undefined;
        } & {
            address?: Uint8Array | undefined;
            balance?: string | undefined;
        } & Record<Exclude<keyof I["accounts"][number], keyof Account>, never>)[] & Record<Exclude<keyof I["accounts"], keyof {
            address?: Uint8Array | undefined;
            balance?: string | undefined;
        }[]>, never>) | undefined;
        params?: ({
            enabledConversionPairs?: {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[] | undefined;
        } & {
            enabledConversionPairs?: ({
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[] & ({
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            } & {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            } & Record<Exclude<keyof I["params"]["enabledConversionPairs"][number], keyof ConversionPair>, never>)[] & Record<Exclude<keyof I["params"]["enabledConversionPairs"], keyof {
                kavaErc20Address?: Uint8Array | undefined;
                denom?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "enabledConversionPairs">, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
export declare const Account: {
    encode(message: Account, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Account;
    fromJSON(object: any): Account;
    toJSON(message: Account): unknown;
    fromPartial<I extends {
        address?: Uint8Array | undefined;
        balance?: string | undefined;
    } & {
        address?: Uint8Array | undefined;
        balance?: string | undefined;
    } & Record<Exclude<keyof I, keyof Account>, never>>(object: I): Account;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        enabledConversionPairs?: {
            kavaErc20Address?: Uint8Array | undefined;
            denom?: string | undefined;
        }[] | undefined;
    } & {
        enabledConversionPairs?: ({
            kavaErc20Address?: Uint8Array | undefined;
            denom?: string | undefined;
        }[] & ({
            kavaErc20Address?: Uint8Array | undefined;
            denom?: string | undefined;
        } & {
            kavaErc20Address?: Uint8Array | undefined;
            denom?: string | undefined;
        } & Record<Exclude<keyof I["enabledConversionPairs"][number], keyof ConversionPair>, never>)[] & Record<Exclude<keyof I["enabledConversionPairs"], keyof {
            kavaErc20Address?: Uint8Array | undefined;
            denom?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "enabledConversionPairs">, never>>(object: I): Params;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
