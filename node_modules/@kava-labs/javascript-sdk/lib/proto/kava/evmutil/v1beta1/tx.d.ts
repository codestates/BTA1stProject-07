import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.evmutil.v1beta1";
/** MsgConvertCoinToERC20 defines a conversion from sdk.Coin to Kava ERC20. */
export interface MsgConvertCoinToERC20 {
    /** Kava bech32 address initiating the conversion. */
    initiator: string;
    /** EVM 0x hex address that will receive the converted Kava ERC20 tokens. */
    receiver: string;
    /** Amount is the sdk.Coin amount to convert. */
    amount?: Coin;
}
/** MsgConvertCoinToERC20Response defines the response value from Msg/ConvertCoinToERC20. */
export interface MsgConvertCoinToERC20Response {
}
/** MsgConvertERC20ToCoin defines a conversion from Kava ERC20 to sdk.Coin. */
export interface MsgConvertERC20ToCoin {
    /** EVM 0x hex address initiating the conversion. */
    initiator: string;
    /** Kava bech32 address that will receive the converted sdk.Coin. */
    receiver: string;
    /** EVM 0x hex address of the ERC20 contract. */
    kavaErc20Address: string;
    /** ERC20 token amount to convert. */
    amount: string;
}
/**
 * MsgConvertERC20ToCoinResponse defines the response value from
 * Msg/MsgConvertERC20ToCoin.
 */
export interface MsgConvertERC20ToCoinResponse {
}
export declare const MsgConvertCoinToERC20: {
    encode(message: MsgConvertCoinToERC20, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgConvertCoinToERC20;
    fromJSON(object: any): MsgConvertCoinToERC20;
    toJSON(message: MsgConvertCoinToERC20): unknown;
    fromPartial<I extends {
        initiator?: string | undefined;
        receiver?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        initiator?: string | undefined;
        receiver?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgConvertCoinToERC20>, never>>(object: I): MsgConvertCoinToERC20;
};
export declare const MsgConvertCoinToERC20Response: {
    encode(_: MsgConvertCoinToERC20Response, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgConvertCoinToERC20Response;
    fromJSON(_: any): MsgConvertCoinToERC20Response;
    toJSON(_: MsgConvertCoinToERC20Response): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgConvertCoinToERC20Response;
};
export declare const MsgConvertERC20ToCoin: {
    encode(message: MsgConvertERC20ToCoin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgConvertERC20ToCoin;
    fromJSON(object: any): MsgConvertERC20ToCoin;
    toJSON(message: MsgConvertERC20ToCoin): unknown;
    fromPartial<I extends {
        initiator?: string | undefined;
        receiver?: string | undefined;
        kavaErc20Address?: string | undefined;
        amount?: string | undefined;
    } & {
        initiator?: string | undefined;
        receiver?: string | undefined;
        kavaErc20Address?: string | undefined;
        amount?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgConvertERC20ToCoin>, never>>(object: I): MsgConvertERC20ToCoin;
};
export declare const MsgConvertERC20ToCoinResponse: {
    encode(_: MsgConvertERC20ToCoinResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgConvertERC20ToCoinResponse;
    fromJSON(_: any): MsgConvertERC20ToCoinResponse;
    toJSON(_: MsgConvertERC20ToCoinResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgConvertERC20ToCoinResponse;
};
/** Msg defines the evmutil Msg service. */
export interface Msg {
    /** ConvertCoinToERC20 defines a method for converting sdk.Coin to Kava ERC20. */
    ConvertCoinToERC20(request: MsgConvertCoinToERC20): Promise<MsgConvertCoinToERC20Response>;
    /** ConvertERC20ToCoin defines a method for converting Kava ERC20 to sdk.Coin. */
    ConvertERC20ToCoin(request: MsgConvertERC20ToCoin): Promise<MsgConvertERC20ToCoinResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    ConvertCoinToERC20(request: MsgConvertCoinToERC20): Promise<MsgConvertCoinToERC20Response>;
    ConvertERC20ToCoin(request: MsgConvertERC20ToCoin): Promise<MsgConvertERC20ToCoinResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
