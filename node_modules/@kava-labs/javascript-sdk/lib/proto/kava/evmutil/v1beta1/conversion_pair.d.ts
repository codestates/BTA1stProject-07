import Long from 'long';
import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "kava.evmutil.v1beta1";
/**
 * ConversionPair defines a Kava ERC20 address and corresponding denom that is
 * allowed to be converted between ERC20 and sdk.Coin
 */
export interface ConversionPair {
    /** ERC20 address of the token on the Kava EVM */
    kavaErc20Address: Uint8Array;
    /** Denom of the corresponding sdk.Coin */
    denom: string;
}
export declare const ConversionPair: {
    encode(message: ConversionPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ConversionPair;
    fromJSON(object: any): ConversionPair;
    toJSON(message: ConversionPair): unknown;
    fromPartial<I extends {
        kavaErc20Address?: Uint8Array | undefined;
        denom?: string | undefined;
    } & {
        kavaErc20Address?: Uint8Array | undefined;
        denom?: string | undefined;
    } & Record<Exclude<keyof I, keyof ConversionPair>, never>>(object: I): ConversionPair;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
