import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.incentive.v1beta1";
/** BaseClaim is a claim with a single reward coin types */
export interface BaseClaim {
    owner: Uint8Array;
    reward?: Coin;
}
/** BaseMultiClaim is a claim with multiple reward coin types */
export interface BaseMultiClaim {
    owner: Uint8Array;
    reward: Coin[];
}
/** RewardIndex stores reward accumulation information */
export interface RewardIndex {
    collateralType: string;
    rewardFactor: Uint8Array;
}
/** RewardIndexesProto defines a Protobuf wrapper around a RewardIndexes slice */
export interface RewardIndexesProto {
    rewardIndexes: RewardIndex[];
}
/** MultiRewardIndex stores reward accumulation information on multiple reward types */
export interface MultiRewardIndex {
    collateralType: string;
    rewardIndexes: RewardIndex[];
}
/** MultiRewardIndexesProto defines a Protobuf wrapper around a MultiRewardIndexes slice */
export interface MultiRewardIndexesProto {
    multiRewardIndexes: MultiRewardIndex[];
}
/** USDXMintingClaim is for USDX minting rewards */
export interface USDXMintingClaim {
    baseClaim?: BaseClaim;
    rewardIndexes: RewardIndex[];
}
/** HardLiquidityProviderClaim stores the hard liquidity provider rewards that can be claimed by owner */
export interface HardLiquidityProviderClaim {
    baseClaim?: BaseMultiClaim;
    supplyRewardIndexes: MultiRewardIndex[];
    borrowRewardIndexes: MultiRewardIndex[];
}
/** DelegatorClaim stores delegation rewards that can be claimed by owner */
export interface DelegatorClaim {
    baseClaim?: BaseMultiClaim;
    rewardIndexes: MultiRewardIndex[];
}
/** SwapClaim stores the swap rewards that can be claimed by owner */
export interface SwapClaim {
    baseClaim?: BaseMultiClaim;
    rewardIndexes: MultiRewardIndex[];
}
/** SavingsClaim stores the savings rewards that can be claimed by owner */
export interface SavingsClaim {
    baseClaim?: BaseMultiClaim;
    rewardIndexes: MultiRewardIndex[];
}
/** EarnClaim stores the earn rewards that can be claimed by owner */
export interface EarnClaim {
    baseClaim?: BaseMultiClaim;
    rewardIndexes: MultiRewardIndex[];
}
export declare const BaseClaim: {
    encode(message: BaseClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BaseClaim;
    fromJSON(object: any): BaseClaim;
    toJSON(message: BaseClaim): unknown;
    fromPartial<I extends {
        owner?: Uint8Array | undefined;
        reward?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        owner?: Uint8Array | undefined;
        reward?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["reward"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof BaseClaim>, never>>(object: I): BaseClaim;
};
export declare const BaseMultiClaim: {
    encode(message: BaseMultiClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BaseMultiClaim;
    fromJSON(object: any): BaseMultiClaim;
    toJSON(message: BaseMultiClaim): unknown;
    fromPartial<I extends {
        owner?: Uint8Array | undefined;
        reward?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        owner?: Uint8Array | undefined;
        reward?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["reward"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["reward"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof BaseMultiClaim>, never>>(object: I): BaseMultiClaim;
};
export declare const RewardIndex: {
    encode(message: RewardIndex, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RewardIndex;
    fromJSON(object: any): RewardIndex;
    toJSON(message: RewardIndex): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        rewardFactor?: Uint8Array | undefined;
    } & {
        collateralType?: string | undefined;
        rewardFactor?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof RewardIndex>, never>>(object: I): RewardIndex;
};
export declare const RewardIndexesProto: {
    encode(message: RewardIndexesProto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RewardIndexesProto;
    fromJSON(object: any): RewardIndexesProto;
    toJSON(message: RewardIndexesProto): unknown;
    fromPartial<I extends {
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        } & {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "rewardIndexes">, never>>(object: I): RewardIndexesProto;
};
export declare const MultiRewardIndex: {
    encode(message: MultiRewardIndex, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultiRewardIndex;
    fromJSON(object: any): MultiRewardIndex;
    toJSON(message: MultiRewardIndex): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        collateralType?: string | undefined;
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        } & {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MultiRewardIndex>, never>>(object: I): MultiRewardIndex;
};
export declare const MultiRewardIndexesProto: {
    encode(message: MultiRewardIndexesProto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultiRewardIndexesProto;
    fromJSON(object: any): MultiRewardIndexesProto;
    toJSON(message: MultiRewardIndexesProto): unknown;
    fromPartial<I extends {
        multiRewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        multiRewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["multiRewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["multiRewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["multiRewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["multiRewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "multiRewardIndexes">, never>>(object: I): MultiRewardIndexesProto;
};
export declare const USDXMintingClaim: {
    encode(message: USDXMintingClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): USDXMintingClaim;
    fromJSON(object: any): USDXMintingClaim;
    toJSON(message: USDXMintingClaim): unknown;
    fromPartial<I extends {
        baseClaim?: {
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        baseClaim?: ({
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            owner?: Uint8Array | undefined;
            reward?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseClaim"]["reward"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["baseClaim"], keyof BaseClaim>, never>) | undefined;
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        } & {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardFactor?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof USDXMintingClaim>, never>>(object: I): USDXMintingClaim;
};
export declare const HardLiquidityProviderClaim: {
    encode(message: HardLiquidityProviderClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): HardLiquidityProviderClaim;
    fromJSON(object: any): HardLiquidityProviderClaim;
    toJSON(message: HardLiquidityProviderClaim): unknown;
    fromPartial<I extends {
        baseClaim?: {
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } | undefined;
        supplyRewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
        borrowRewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        baseClaim?: ({
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            owner?: Uint8Array | undefined;
            reward?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseClaim"]["reward"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["baseClaim"]["reward"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["baseClaim"], keyof BaseMultiClaim>, never>) | undefined;
        supplyRewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["supplyRewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["supplyRewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["supplyRewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["supplyRewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        borrowRewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["borrowRewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["borrowRewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["borrowRewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["borrowRewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof HardLiquidityProviderClaim>, never>>(object: I): HardLiquidityProviderClaim;
};
export declare const DelegatorClaim: {
    encode(message: DelegatorClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DelegatorClaim;
    fromJSON(object: any): DelegatorClaim;
    toJSON(message: DelegatorClaim): unknown;
    fromPartial<I extends {
        baseClaim?: {
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } | undefined;
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        baseClaim?: ({
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            owner?: Uint8Array | undefined;
            reward?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseClaim"]["reward"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["baseClaim"]["reward"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["baseClaim"], keyof BaseMultiClaim>, never>) | undefined;
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof DelegatorClaim>, never>>(object: I): DelegatorClaim;
};
export declare const SwapClaim: {
    encode(message: SwapClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SwapClaim;
    fromJSON(object: any): SwapClaim;
    toJSON(message: SwapClaim): unknown;
    fromPartial<I extends {
        baseClaim?: {
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } | undefined;
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        baseClaim?: ({
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            owner?: Uint8Array | undefined;
            reward?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseClaim"]["reward"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["baseClaim"]["reward"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["baseClaim"], keyof BaseMultiClaim>, never>) | undefined;
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SwapClaim>, never>>(object: I): SwapClaim;
};
export declare const SavingsClaim: {
    encode(message: SavingsClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SavingsClaim;
    fromJSON(object: any): SavingsClaim;
    toJSON(message: SavingsClaim): unknown;
    fromPartial<I extends {
        baseClaim?: {
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } | undefined;
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        baseClaim?: ({
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            owner?: Uint8Array | undefined;
            reward?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseClaim"]["reward"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["baseClaim"]["reward"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["baseClaim"], keyof BaseMultiClaim>, never>) | undefined;
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SavingsClaim>, never>>(object: I): SavingsClaim;
};
export declare const EarnClaim: {
    encode(message: EarnClaim, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EarnClaim;
    fromJSON(object: any): EarnClaim;
    toJSON(message: EarnClaim): unknown;
    fromPartial<I extends {
        baseClaim?: {
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } | undefined;
        rewardIndexes?: {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        baseClaim?: ({
            owner?: Uint8Array | undefined;
            reward?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            owner?: Uint8Array | undefined;
            reward?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseClaim"]["reward"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["baseClaim"]["reward"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["baseClaim"], keyof BaseMultiClaim>, never>) | undefined;
        rewardIndexes?: ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            collateralType?: string | undefined;
            rewardIndexes?: ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] & ({
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"][number], keyof RewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"][number]["rewardIndexes"], keyof {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["rewardIndexes"][number], keyof MultiRewardIndex>, never>)[] & Record<Exclude<keyof I["rewardIndexes"], keyof {
            collateralType?: string | undefined;
            rewardIndexes?: {
                collateralType?: string | undefined;
                rewardFactor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EarnClaim>, never>>(object: I): EarnClaim;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
