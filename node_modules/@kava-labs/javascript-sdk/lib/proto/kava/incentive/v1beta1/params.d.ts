import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.incentive.v1beta1";
/** RewardPeriod stores the state of an ongoing reward */
export interface RewardPeriod {
    active: boolean;
    collateralType: string;
    start?: Date;
    end?: Date;
    rewardsPerSecond?: Coin;
}
/** MultiRewardPeriod supports multiple reward types */
export interface MultiRewardPeriod {
    active: boolean;
    collateralType: string;
    start?: Date;
    end?: Date;
    rewardsPerSecond: Coin[];
}
/** Multiplier amount the claim rewards get increased by, along with how long the claim rewards are locked */
export interface Multiplier {
    name: string;
    monthsLockup: Long;
    factor: Uint8Array;
}
/** MultipliersPerDenom is a map of denoms to a set of multipliers */
export interface MultipliersPerDenom {
    denom: string;
    multipliers: Multiplier[];
}
/** Params */
export interface Params {
    usdxMintingRewardPeriods: RewardPeriod[];
    hardSupplyRewardPeriods: MultiRewardPeriod[];
    hardBorrowRewardPeriods: MultiRewardPeriod[];
    delegatorRewardPeriods: MultiRewardPeriod[];
    swapRewardPeriods: MultiRewardPeriod[];
    claimMultipliers: MultipliersPerDenom[];
    claimEnd?: Date;
    savingsRewardPeriods: MultiRewardPeriod[];
    earnRewardPeriods: MultiRewardPeriod[];
}
export declare const RewardPeriod: {
    encode(message: RewardPeriod, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RewardPeriod;
    fromJSON(object: any): RewardPeriod;
    toJSON(message: RewardPeriod): unknown;
    fromPartial<I extends {
        active?: boolean | undefined;
        collateralType?: string | undefined;
        start?: Date | undefined;
        end?: Date | undefined;
        rewardsPerSecond?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        active?: boolean | undefined;
        collateralType?: string | undefined;
        start?: Date | undefined;
        end?: Date | undefined;
        rewardsPerSecond?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["rewardsPerSecond"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof RewardPeriod>, never>>(object: I): RewardPeriod;
};
export declare const MultiRewardPeriod: {
    encode(message: MultiRewardPeriod, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultiRewardPeriod;
    fromJSON(object: any): MultiRewardPeriod;
    toJSON(message: MultiRewardPeriod): unknown;
    fromPartial<I extends {
        active?: boolean | undefined;
        collateralType?: string | undefined;
        start?: Date | undefined;
        end?: Date | undefined;
        rewardsPerSecond?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        active?: boolean | undefined;
        collateralType?: string | undefined;
        start?: Date | undefined;
        end?: Date | undefined;
        rewardsPerSecond?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["rewardsPerSecond"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MultiRewardPeriod>, never>>(object: I): MultiRewardPeriod;
};
export declare const Multiplier: {
    encode(message: Multiplier, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Multiplier;
    fromJSON(object: any): Multiplier;
    toJSON(message: Multiplier): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        monthsLockup?: string | number | Long | undefined;
        factor?: Uint8Array | undefined;
    } & {
        name?: string | undefined;
        monthsLockup?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & Record<Exclude<keyof I["monthsLockup"], keyof Long>, never>) | undefined;
        factor?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof Multiplier>, never>>(object: I): Multiplier;
};
export declare const MultipliersPerDenom: {
    encode(message: MultipliersPerDenom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipliersPerDenom;
    fromJSON(object: any): MultipliersPerDenom;
    toJSON(message: MultipliersPerDenom): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        multipliers?: {
            name?: string | undefined;
            monthsLockup?: string | number | Long | undefined;
            factor?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        denom?: string | undefined;
        multipliers?: ({
            name?: string | undefined;
            monthsLockup?: string | number | Long | undefined;
            factor?: Uint8Array | undefined;
        }[] & ({
            name?: string | undefined;
            monthsLockup?: string | number | Long | undefined;
            factor?: Uint8Array | undefined;
        } & {
            name?: string | undefined;
            monthsLockup?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["multipliers"][number]["monthsLockup"], keyof Long>, never>) | undefined;
            factor?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["multipliers"][number], keyof Multiplier>, never>)[] & Record<Exclude<keyof I["multipliers"], keyof {
            name?: string | undefined;
            monthsLockup?: string | number | Long | undefined;
            factor?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MultipliersPerDenom>, never>>(object: I): MultipliersPerDenom;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        usdxMintingRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
        hardSupplyRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        hardBorrowRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        delegatorRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        swapRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        claimMultipliers?: {
            denom?: string | undefined;
            multipliers?: {
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            }[] | undefined;
        }[] | undefined;
        claimEnd?: Date | undefined;
        savingsRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        earnRewardPeriods?: {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        usdxMintingRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["usdxMintingRewardPeriods"][number]["rewardsPerSecond"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["usdxMintingRewardPeriods"][number], keyof RewardPeriod>, never>)[] & Record<Exclude<keyof I["usdxMintingRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        hardSupplyRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["hardSupplyRewardPeriods"][number]["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["hardSupplyRewardPeriods"][number]["rewardsPerSecond"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["hardSupplyRewardPeriods"][number], keyof MultiRewardPeriod>, never>)[] & Record<Exclude<keyof I["hardSupplyRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        hardBorrowRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["hardBorrowRewardPeriods"][number]["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["hardBorrowRewardPeriods"][number]["rewardsPerSecond"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["hardBorrowRewardPeriods"][number], keyof MultiRewardPeriod>, never>)[] & Record<Exclude<keyof I["hardBorrowRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        delegatorRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["delegatorRewardPeriods"][number]["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["delegatorRewardPeriods"][number]["rewardsPerSecond"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["delegatorRewardPeriods"][number], keyof MultiRewardPeriod>, never>)[] & Record<Exclude<keyof I["delegatorRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        swapRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["swapRewardPeriods"][number]["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["swapRewardPeriods"][number]["rewardsPerSecond"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["swapRewardPeriods"][number], keyof MultiRewardPeriod>, never>)[] & Record<Exclude<keyof I["swapRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        claimMultipliers?: ({
            denom?: string | undefined;
            multipliers?: {
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            }[] | undefined;
        }[] & ({
            denom?: string | undefined;
            multipliers?: {
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            denom?: string | undefined;
            multipliers?: ({
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            }[] & ({
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            } & {
                name?: string | undefined;
                monthsLockup?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & Record<Exclude<keyof I["claimMultipliers"][number]["multipliers"][number]["monthsLockup"], keyof Long>, never>) | undefined;
                factor?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["claimMultipliers"][number]["multipliers"][number], keyof Multiplier>, never>)[] & Record<Exclude<keyof I["claimMultipliers"][number]["multipliers"], keyof {
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["claimMultipliers"][number], keyof MultipliersPerDenom>, never>)[] & Record<Exclude<keyof I["claimMultipliers"], keyof {
            denom?: string | undefined;
            multipliers?: {
                name?: string | undefined;
                monthsLockup?: string | number | Long | undefined;
                factor?: Uint8Array | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        claimEnd?: Date | undefined;
        savingsRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["savingsRewardPeriods"][number]["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["savingsRewardPeriods"][number]["rewardsPerSecond"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["savingsRewardPeriods"][number], keyof MultiRewardPeriod>, never>)[] & Record<Exclude<keyof I["savingsRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        earnRewardPeriods?: ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["earnRewardPeriods"][number]["rewardsPerSecond"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["earnRewardPeriods"][number]["rewardsPerSecond"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["earnRewardPeriods"][number], keyof MultiRewardPeriod>, never>)[] & Record<Exclude<keyof I["earnRewardPeriods"], keyof {
            active?: boolean | undefined;
            collateralType?: string | undefined;
            start?: Date | undefined;
            end?: Date | undefined;
            rewardsPerSecond?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
