"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.GenesisRewardState = exports.AccumulationTime = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var params_1 = require("../../../kava/incentive/v1beta1/params");
var timestamp_1 = require("../../../google/protobuf/timestamp");
var claims_1 = require("../../../kava/incentive/v1beta1/claims");
exports.protobufPackage = 'kava.incentive.v1beta1';
function createBaseAccumulationTime() {
    return { collateralType: '', previousAccumulationTime: undefined };
}
exports.AccumulationTime = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.previousAccumulationTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.previousAccumulationTime), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAccumulationTime();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.previousAccumulationTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            previousAccumulationTime: isSet(object.previousAccumulationTime)
                ? fromJsonTimestamp(object.previousAccumulationTime)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.previousAccumulationTime !== undefined &&
            (obj.previousAccumulationTime =
                message.previousAccumulationTime.toISOString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseAccumulationTime();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.previousAccumulationTime =
            (_b = object.previousAccumulationTime) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseGenesisRewardState() {
    return { accumulationTimes: [], multiRewardIndexes: [] };
}
exports.GenesisRewardState = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _c = __values(message.accumulationTimes), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                exports.AccumulationTime.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = __values(message.multiRewardIndexes), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                claims_1.MultiRewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisRewardState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accumulationTimes.push(exports.AccumulationTime.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.multiRewardIndexes.push(claims_1.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            accumulationTimes: Array.isArray(object === null || object === void 0 ? void 0 : object.accumulationTimes)
                ? object.accumulationTimes.map(function (e) { return exports.AccumulationTime.fromJSON(e); })
                : [],
            multiRewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.multiRewardIndexes)
                ? object.multiRewardIndexes.map(function (e) {
                    return claims_1.MultiRewardIndex.fromJSON(e);
                })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.accumulationTimes) {
            obj.accumulationTimes = message.accumulationTimes.map(function (e) {
                return e ? exports.AccumulationTime.toJSON(e) : undefined;
            });
        }
        else {
            obj.accumulationTimes = [];
        }
        if (message.multiRewardIndexes) {
            obj.multiRewardIndexes = message.multiRewardIndexes.map(function (e) {
                return e ? claims_1.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.multiRewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGenesisRewardState();
        message.accumulationTimes =
            ((_a = object.accumulationTimes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.AccumulationTime.fromPartial(e); })) ||
                [];
        message.multiRewardIndexes =
            ((_b = object.multiRewardIndexes) === null || _b === void 0 ? void 0 : _b.map(function (e) { return claims_1.MultiRewardIndex.fromPartial(e); })) ||
                [];
        return message;
    },
};
function createBaseGenesisState() {
    return {
        params: undefined,
        usdxRewardState: undefined,
        hardSupplyRewardState: undefined,
        hardBorrowRewardState: undefined,
        delegatorRewardState: undefined,
        swapRewardState: undefined,
        usdxMintingClaims: [],
        hardLiquidityProviderClaims: [],
        delegatorClaims: [],
        swapClaims: [],
        savingsRewardState: undefined,
        savingsClaims: [],
        earnRewardState: undefined,
        earnClaims: [],
    };
}
exports.GenesisState = {
    encode: function (message, writer) {
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.usdxRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.usdxRewardState, writer.uint32(18).fork()).ldelim();
        }
        if (message.hardSupplyRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.hardSupplyRewardState, writer.uint32(26).fork()).ldelim();
        }
        if (message.hardBorrowRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.hardBorrowRewardState, writer.uint32(34).fork()).ldelim();
        }
        if (message.delegatorRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.delegatorRewardState, writer.uint32(42).fork()).ldelim();
        }
        if (message.swapRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.swapRewardState, writer.uint32(50).fork()).ldelim();
        }
        try {
            for (var _g = __values(message.usdxMintingClaims), _h = _g.next(); !_h.done; _h = _g.next()) {
                var v = _h.value;
                claims_1.USDXMintingClaim.encode(v, writer.uint32(58).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _j = __values(message.hardLiquidityProviderClaims), _k = _j.next(); !_k.done; _k = _j.next()) {
                var v = _k.value;
                claims_1.HardLiquidityProviderClaim.encode(v, writer.uint32(66).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _l = __values(message.delegatorClaims), _m = _l.next(); !_m.done; _m = _l.next()) {
                var v = _m.value;
                claims_1.DelegatorClaim.encode(v, writer.uint32(74).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _o = __values(message.swapClaims), _p = _o.next(); !_p.done; _p = _o.next()) {
                var v = _p.value;
                claims_1.SwapClaim.encode(v, writer.uint32(82).fork()).ldelim();
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
            }
            finally { if (e_6) throw e_6.error; }
        }
        if (message.savingsRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.savingsRewardState, writer.uint32(90).fork()).ldelim();
        }
        try {
            for (var _q = __values(message.savingsClaims), _r = _q.next(); !_r.done; _r = _q.next()) {
                var v = _r.value;
                claims_1.SavingsClaim.encode(v, writer.uint32(98).fork()).ldelim();
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
            }
            finally { if (e_7) throw e_7.error; }
        }
        if (message.earnRewardState !== undefined) {
            exports.GenesisRewardState.encode(message.earnRewardState, writer.uint32(106).fork()).ldelim();
        }
        try {
            for (var _s = __values(message.earnClaims), _t = _s.next(); !_t.done; _t = _s.next()) {
                var v = _t.value;
                claims_1.EarnClaim.encode(v, writer.uint32(114).fork()).ldelim();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_t && !_t.done && (_f = _s.return)) _f.call(_s);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.usdxRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.hardSupplyRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.hardBorrowRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.delegatorRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.swapRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.usdxMintingClaims.push(claims_1.USDXMintingClaim.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.hardLiquidityProviderClaims.push(claims_1.HardLiquidityProviderClaim.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.delegatorClaims.push(claims_1.DelegatorClaim.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.swapClaims.push(claims_1.SwapClaim.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.savingsRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.savingsClaims.push(claims_1.SavingsClaim.decode(reader, reader.uint32()));
                    break;
                case 13:
                    message.earnRewardState = exports.GenesisRewardState.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.earnClaims.push(claims_1.EarnClaim.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            usdxRewardState: isSet(object.usdxRewardState)
                ? exports.GenesisRewardState.fromJSON(object.usdxRewardState)
                : undefined,
            hardSupplyRewardState: isSet(object.hardSupplyRewardState)
                ? exports.GenesisRewardState.fromJSON(object.hardSupplyRewardState)
                : undefined,
            hardBorrowRewardState: isSet(object.hardBorrowRewardState)
                ? exports.GenesisRewardState.fromJSON(object.hardBorrowRewardState)
                : undefined,
            delegatorRewardState: isSet(object.delegatorRewardState)
                ? exports.GenesisRewardState.fromJSON(object.delegatorRewardState)
                : undefined,
            swapRewardState: isSet(object.swapRewardState)
                ? exports.GenesisRewardState.fromJSON(object.swapRewardState)
                : undefined,
            usdxMintingClaims: Array.isArray(object === null || object === void 0 ? void 0 : object.usdxMintingClaims)
                ? object.usdxMintingClaims.map(function (e) { return claims_1.USDXMintingClaim.fromJSON(e); })
                : [],
            hardLiquidityProviderClaims: Array.isArray(object === null || object === void 0 ? void 0 : object.hardLiquidityProviderClaims)
                ? object.hardLiquidityProviderClaims.map(function (e) {
                    return claims_1.HardLiquidityProviderClaim.fromJSON(e);
                })
                : [],
            delegatorClaims: Array.isArray(object === null || object === void 0 ? void 0 : object.delegatorClaims)
                ? object.delegatorClaims.map(function (e) { return claims_1.DelegatorClaim.fromJSON(e); })
                : [],
            swapClaims: Array.isArray(object === null || object === void 0 ? void 0 : object.swapClaims)
                ? object.swapClaims.map(function (e) { return claims_1.SwapClaim.fromJSON(e); })
                : [],
            savingsRewardState: isSet(object.savingsRewardState)
                ? exports.GenesisRewardState.fromJSON(object.savingsRewardState)
                : undefined,
            savingsClaims: Array.isArray(object === null || object === void 0 ? void 0 : object.savingsClaims)
                ? object.savingsClaims.map(function (e) { return claims_1.SavingsClaim.fromJSON(e); })
                : [],
            earnRewardState: isSet(object.earnRewardState)
                ? exports.GenesisRewardState.fromJSON(object.earnRewardState)
                : undefined,
            earnClaims: Array.isArray(object === null || object === void 0 ? void 0 : object.earnClaims)
                ? object.earnClaims.map(function (e) { return claims_1.EarnClaim.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        message.usdxRewardState !== undefined &&
            (obj.usdxRewardState = message.usdxRewardState
                ? exports.GenesisRewardState.toJSON(message.usdxRewardState)
                : undefined);
        message.hardSupplyRewardState !== undefined &&
            (obj.hardSupplyRewardState = message.hardSupplyRewardState
                ? exports.GenesisRewardState.toJSON(message.hardSupplyRewardState)
                : undefined);
        message.hardBorrowRewardState !== undefined &&
            (obj.hardBorrowRewardState = message.hardBorrowRewardState
                ? exports.GenesisRewardState.toJSON(message.hardBorrowRewardState)
                : undefined);
        message.delegatorRewardState !== undefined &&
            (obj.delegatorRewardState = message.delegatorRewardState
                ? exports.GenesisRewardState.toJSON(message.delegatorRewardState)
                : undefined);
        message.swapRewardState !== undefined &&
            (obj.swapRewardState = message.swapRewardState
                ? exports.GenesisRewardState.toJSON(message.swapRewardState)
                : undefined);
        if (message.usdxMintingClaims) {
            obj.usdxMintingClaims = message.usdxMintingClaims.map(function (e) {
                return e ? claims_1.USDXMintingClaim.toJSON(e) : undefined;
            });
        }
        else {
            obj.usdxMintingClaims = [];
        }
        if (message.hardLiquidityProviderClaims) {
            obj.hardLiquidityProviderClaims = message.hardLiquidityProviderClaims.map(function (e) { return (e ? claims_1.HardLiquidityProviderClaim.toJSON(e) : undefined); });
        }
        else {
            obj.hardLiquidityProviderClaims = [];
        }
        if (message.delegatorClaims) {
            obj.delegatorClaims = message.delegatorClaims.map(function (e) {
                return e ? claims_1.DelegatorClaim.toJSON(e) : undefined;
            });
        }
        else {
            obj.delegatorClaims = [];
        }
        if (message.swapClaims) {
            obj.swapClaims = message.swapClaims.map(function (e) {
                return e ? claims_1.SwapClaim.toJSON(e) : undefined;
            });
        }
        else {
            obj.swapClaims = [];
        }
        message.savingsRewardState !== undefined &&
            (obj.savingsRewardState = message.savingsRewardState
                ? exports.GenesisRewardState.toJSON(message.savingsRewardState)
                : undefined);
        if (message.savingsClaims) {
            obj.savingsClaims = message.savingsClaims.map(function (e) {
                return e ? claims_1.SavingsClaim.toJSON(e) : undefined;
            });
        }
        else {
            obj.savingsClaims = [];
        }
        message.earnRewardState !== undefined &&
            (obj.earnRewardState = message.earnRewardState
                ? exports.GenesisRewardState.toJSON(message.earnRewardState)
                : undefined);
        if (message.earnClaims) {
            obj.earnClaims = message.earnClaims.map(function (e) {
                return e ? claims_1.EarnClaim.toJSON(e) : undefined;
            });
        }
        else {
            obj.earnClaims = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        message.usdxRewardState =
            object.usdxRewardState !== undefined && object.usdxRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.usdxRewardState)
                : undefined;
        message.hardSupplyRewardState =
            object.hardSupplyRewardState !== undefined &&
                object.hardSupplyRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.hardSupplyRewardState)
                : undefined;
        message.hardBorrowRewardState =
            object.hardBorrowRewardState !== undefined &&
                object.hardBorrowRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.hardBorrowRewardState)
                : undefined;
        message.delegatorRewardState =
            object.delegatorRewardState !== undefined &&
                object.delegatorRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.delegatorRewardState)
                : undefined;
        message.swapRewardState =
            object.swapRewardState !== undefined && object.swapRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.swapRewardState)
                : undefined;
        message.usdxMintingClaims =
            ((_a = object.usdxMintingClaims) === null || _a === void 0 ? void 0 : _a.map(function (e) { return claims_1.USDXMintingClaim.fromPartial(e); })) ||
                [];
        message.hardLiquidityProviderClaims =
            ((_b = object.hardLiquidityProviderClaims) === null || _b === void 0 ? void 0 : _b.map(function (e) {
                return claims_1.HardLiquidityProviderClaim.fromPartial(e);
            })) || [];
        message.delegatorClaims =
            ((_c = object.delegatorClaims) === null || _c === void 0 ? void 0 : _c.map(function (e) { return claims_1.DelegatorClaim.fromPartial(e); })) || [];
        message.swapClaims =
            ((_d = object.swapClaims) === null || _d === void 0 ? void 0 : _d.map(function (e) { return claims_1.SwapClaim.fromPartial(e); })) || [];
        message.savingsRewardState =
            object.savingsRewardState !== undefined &&
                object.savingsRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.savingsRewardState)
                : undefined;
        message.savingsClaims =
            ((_e = object.savingsClaims) === null || _e === void 0 ? void 0 : _e.map(function (e) { return claims_1.SavingsClaim.fromPartial(e); })) || [];
        message.earnRewardState =
            object.earnRewardState !== undefined && object.earnRewardState !== null
                ? exports.GenesisRewardState.fromPartial(object.earnRewardState)
                : undefined;
        message.earnClaims =
            ((_f = object.earnClaims) === null || _f === void 0 ? void 0 : _f.map(function (e) { return claims_1.EarnClaim.fromPartial(e); })) || [];
        return message;
    },
};
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
