"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.MultipliersPerDenom = exports.Multiplier = exports.MultiRewardPeriod = exports.RewardPeriod = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = 'kava.incentive.v1beta1';
function createBaseRewardPeriod() {
    return {
        active: false,
        collateralType: '',
        start: undefined,
        end: undefined,
        rewardsPerSecond: undefined,
    };
}
exports.RewardPeriod = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.active === true) {
            writer.uint32(8).bool(message.active);
        }
        if (message.collateralType !== '') {
            writer.uint32(18).string(message.collateralType);
        }
        if (message.start !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start), writer.uint32(26).fork()).ldelim();
        }
        if (message.end !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.end), writer.uint32(34).fork()).ldelim();
        }
        if (message.rewardsPerSecond !== undefined) {
            coin_1.Coin.encode(message.rewardsPerSecond, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRewardPeriod();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.active = reader.bool();
                    break;
                case 2:
                    message.collateralType = reader.string();
                    break;
                case 3:
                    message.start = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.end = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.rewardsPerSecond = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            active: isSet(object.active) ? Boolean(object.active) : false,
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            start: isSet(object.start) ? fromJsonTimestamp(object.start) : undefined,
            end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined,
            rewardsPerSecond: isSet(object.rewardsPerSecond)
                ? coin_1.Coin.fromJSON(object.rewardsPerSecond)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.active !== undefined && (obj.active = message.active);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.start !== undefined && (obj.start = message.start.toISOString());
        message.end !== undefined && (obj.end = message.end.toISOString());
        message.rewardsPerSecond !== undefined &&
            (obj.rewardsPerSecond = message.rewardsPerSecond
                ? coin_1.Coin.toJSON(message.rewardsPerSecond)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseRewardPeriod();
        message.active = (_a = object.active) !== null && _a !== void 0 ? _a : false;
        message.collateralType = (_b = object.collateralType) !== null && _b !== void 0 ? _b : '';
        message.start = (_c = object.start) !== null && _c !== void 0 ? _c : undefined;
        message.end = (_d = object.end) !== null && _d !== void 0 ? _d : undefined;
        message.rewardsPerSecond =
            object.rewardsPerSecond !== undefined && object.rewardsPerSecond !== null
                ? coin_1.Coin.fromPartial(object.rewardsPerSecond)
                : undefined;
        return message;
    },
};
function createBaseMultiRewardPeriod() {
    return {
        active: false,
        collateralType: '',
        start: undefined,
        end: undefined,
        rewardsPerSecond: [],
    };
}
exports.MultiRewardPeriod = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.active === true) {
            writer.uint32(8).bool(message.active);
        }
        if (message.collateralType !== '') {
            writer.uint32(18).string(message.collateralType);
        }
        if (message.start !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start), writer.uint32(26).fork()).ldelim();
        }
        if (message.end !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.end), writer.uint32(34).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.rewardsPerSecond), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiRewardPeriod();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.active = reader.bool();
                    break;
                case 2:
                    message.collateralType = reader.string();
                    break;
                case 3:
                    message.start = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.end = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.rewardsPerSecond.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            active: isSet(object.active) ? Boolean(object.active) : false,
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            start: isSet(object.start) ? fromJsonTimestamp(object.start) : undefined,
            end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined,
            rewardsPerSecond: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardsPerSecond)
                ? object.rewardsPerSecond.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.active !== undefined && (obj.active = message.active);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.start !== undefined && (obj.start = message.start.toISOString());
        message.end !== undefined && (obj.end = message.end.toISOString());
        if (message.rewardsPerSecond) {
            obj.rewardsPerSecond = message.rewardsPerSecond.map(function (e) {
                return e ? coin_1.Coin.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardsPerSecond = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseMultiRewardPeriod();
        message.active = (_a = object.active) !== null && _a !== void 0 ? _a : false;
        message.collateralType = (_b = object.collateralType) !== null && _b !== void 0 ? _b : '';
        message.start = (_c = object.start) !== null && _c !== void 0 ? _c : undefined;
        message.end = (_d = object.end) !== null && _d !== void 0 ? _d : undefined;
        message.rewardsPerSecond =
            ((_e = object.rewardsPerSecond) === null || _e === void 0 ? void 0 : _e.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMultiplier() {
    return { name: '', monthsLockup: long_1.default.ZERO, factor: new Uint8Array() };
}
exports.Multiplier = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.name !== '') {
            writer.uint32(10).string(message.name);
        }
        if (!message.monthsLockup.isZero()) {
            writer.uint32(16).int64(message.monthsLockup);
        }
        if (message.factor.length !== 0) {
            writer.uint32(26).bytes(message.factor);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiplier();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.monthsLockup = reader.int64();
                    break;
                case 3:
                    message.factor = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : '',
            monthsLockup: isSet(object.monthsLockup)
                ? long_1.default.fromString(object.monthsLockup)
                : long_1.default.ZERO,
            factor: isSet(object.factor)
                ? bytesFromBase64(object.factor)
                : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.monthsLockup !== undefined &&
            (obj.monthsLockup = (message.monthsLockup || long_1.default.ZERO).toString());
        message.factor !== undefined &&
            (obj.factor = base64FromBytes(message.factor !== undefined ? message.factor : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMultiplier();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : '';
        message.monthsLockup =
            object.monthsLockup !== undefined && object.monthsLockup !== null
                ? long_1.default.fromValue(object.monthsLockup)
                : long_1.default.ZERO;
        message.factor = (_b = object.factor) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseMultipliersPerDenom() {
    return { denom: '', multipliers: [] };
}
exports.MultipliersPerDenom = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        try {
            for (var _b = __values(message.multipliers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Multiplier.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultipliersPerDenom();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.multipliers.push(exports.Multiplier.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            multipliers: Array.isArray(object === null || object === void 0 ? void 0 : object.multipliers)
                ? object.multipliers.map(function (e) { return exports.Multiplier.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        if (message.multipliers) {
            obj.multipliers = message.multipliers.map(function (e) {
                return e ? exports.Multiplier.toJSON(e) : undefined;
            });
        }
        else {
            obj.multipliers = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMultipliersPerDenom();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.multipliers =
            ((_b = object.multipliers) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Multiplier.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseParams() {
    return {
        usdxMintingRewardPeriods: [],
        hardSupplyRewardPeriods: [],
        hardBorrowRewardPeriods: [],
        delegatorRewardPeriods: [],
        swapRewardPeriods: [],
        claimMultipliers: [],
        claimEnd: undefined,
        savingsRewardPeriods: [],
        earnRewardPeriods: [],
    };
}
exports.Params = {
    encode: function (message, writer) {
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f, e_9, _g, e_10, _h;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _j = __values(message.usdxMintingRewardPeriods), _k = _j.next(); !_k.done; _k = _j.next()) {
                var v = _k.value;
                exports.RewardPeriod.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_a = _j.return)) _a.call(_j);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _l = __values(message.hardSupplyRewardPeriods), _m = _l.next(); !_m.done; _m = _l.next()) {
                var v = _m.value;
                exports.MultiRewardPeriod.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_b = _l.return)) _b.call(_l);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _o = __values(message.hardBorrowRewardPeriods), _p = _o.next(); !_p.done; _p = _o.next()) {
                var v = _p.value;
                exports.MultiRewardPeriod.encode(v, writer.uint32(26).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_c = _o.return)) _c.call(_o);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _q = __values(message.delegatorRewardPeriods), _r = _q.next(); !_r.done; _r = _q.next()) {
                var v = _r.value;
                exports.MultiRewardPeriod.encode(v, writer.uint32(34).fork()).ldelim();
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_d = _q.return)) _d.call(_q);
            }
            finally { if (e_6) throw e_6.error; }
        }
        try {
            for (var _s = __values(message.swapRewardPeriods), _t = _s.next(); !_t.done; _t = _s.next()) {
                var v = _t.value;
                exports.MultiRewardPeriod.encode(v, writer.uint32(42).fork()).ldelim();
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_t && !_t.done && (_e = _s.return)) _e.call(_s);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            for (var _u = __values(message.claimMultipliers), _v = _u.next(); !_v.done; _v = _u.next()) {
                var v = _v.value;
                exports.MultipliersPerDenom.encode(v, writer.uint32(50).fork()).ldelim();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_v && !_v.done && (_f = _u.return)) _f.call(_u);
            }
            finally { if (e_8) throw e_8.error; }
        }
        if (message.claimEnd !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.claimEnd), writer.uint32(58).fork()).ldelim();
        }
        try {
            for (var _w = __values(message.savingsRewardPeriods), _x = _w.next(); !_x.done; _x = _w.next()) {
                var v = _x.value;
                exports.MultiRewardPeriod.encode(v, writer.uint32(66).fork()).ldelim();
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_x && !_x.done && (_g = _w.return)) _g.call(_w);
            }
            finally { if (e_9) throw e_9.error; }
        }
        try {
            for (var _y = __values(message.earnRewardPeriods), _z = _y.next(); !_z.done; _z = _y.next()) {
                var v = _z.value;
                exports.MultiRewardPeriod.encode(v, writer.uint32(74).fork()).ldelim();
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_z && !_z.done && (_h = _y.return)) _h.call(_y);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.usdxMintingRewardPeriods.push(exports.RewardPeriod.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.hardSupplyRewardPeriods.push(exports.MultiRewardPeriod.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.hardBorrowRewardPeriods.push(exports.MultiRewardPeriod.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.delegatorRewardPeriods.push(exports.MultiRewardPeriod.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.swapRewardPeriods.push(exports.MultiRewardPeriod.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.claimMultipliers.push(exports.MultipliersPerDenom.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.claimEnd = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.savingsRewardPeriods.push(exports.MultiRewardPeriod.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.earnRewardPeriods.push(exports.MultiRewardPeriod.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            usdxMintingRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.usdxMintingRewardPeriods)
                ? object.usdxMintingRewardPeriods.map(function (e) {
                    return exports.RewardPeriod.fromJSON(e);
                })
                : [],
            hardSupplyRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.hardSupplyRewardPeriods)
                ? object.hardSupplyRewardPeriods.map(function (e) {
                    return exports.MultiRewardPeriod.fromJSON(e);
                })
                : [],
            hardBorrowRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.hardBorrowRewardPeriods)
                ? object.hardBorrowRewardPeriods.map(function (e) {
                    return exports.MultiRewardPeriod.fromJSON(e);
                })
                : [],
            delegatorRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.delegatorRewardPeriods)
                ? object.delegatorRewardPeriods.map(function (e) {
                    return exports.MultiRewardPeriod.fromJSON(e);
                })
                : [],
            swapRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.swapRewardPeriods)
                ? object.swapRewardPeriods.map(function (e) {
                    return exports.MultiRewardPeriod.fromJSON(e);
                })
                : [],
            claimMultipliers: Array.isArray(object === null || object === void 0 ? void 0 : object.claimMultipliers)
                ? object.claimMultipliers.map(function (e) {
                    return exports.MultipliersPerDenom.fromJSON(e);
                })
                : [],
            claimEnd: isSet(object.claimEnd)
                ? fromJsonTimestamp(object.claimEnd)
                : undefined,
            savingsRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.savingsRewardPeriods)
                ? object.savingsRewardPeriods.map(function (e) {
                    return exports.MultiRewardPeriod.fromJSON(e);
                })
                : [],
            earnRewardPeriods: Array.isArray(object === null || object === void 0 ? void 0 : object.earnRewardPeriods)
                ? object.earnRewardPeriods.map(function (e) {
                    return exports.MultiRewardPeriod.fromJSON(e);
                })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.usdxMintingRewardPeriods) {
            obj.usdxMintingRewardPeriods = message.usdxMintingRewardPeriods.map(function (e) {
                return e ? exports.RewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.usdxMintingRewardPeriods = [];
        }
        if (message.hardSupplyRewardPeriods) {
            obj.hardSupplyRewardPeriods = message.hardSupplyRewardPeriods.map(function (e) {
                return e ? exports.MultiRewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.hardSupplyRewardPeriods = [];
        }
        if (message.hardBorrowRewardPeriods) {
            obj.hardBorrowRewardPeriods = message.hardBorrowRewardPeriods.map(function (e) {
                return e ? exports.MultiRewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.hardBorrowRewardPeriods = [];
        }
        if (message.delegatorRewardPeriods) {
            obj.delegatorRewardPeriods = message.delegatorRewardPeriods.map(function (e) {
                return e ? exports.MultiRewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.delegatorRewardPeriods = [];
        }
        if (message.swapRewardPeriods) {
            obj.swapRewardPeriods = message.swapRewardPeriods.map(function (e) {
                return e ? exports.MultiRewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.swapRewardPeriods = [];
        }
        if (message.claimMultipliers) {
            obj.claimMultipliers = message.claimMultipliers.map(function (e) {
                return e ? exports.MultipliersPerDenom.toJSON(e) : undefined;
            });
        }
        else {
            obj.claimMultipliers = [];
        }
        message.claimEnd !== undefined &&
            (obj.claimEnd = message.claimEnd.toISOString());
        if (message.savingsRewardPeriods) {
            obj.savingsRewardPeriods = message.savingsRewardPeriods.map(function (e) {
                return e ? exports.MultiRewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.savingsRewardPeriods = [];
        }
        if (message.earnRewardPeriods) {
            obj.earnRewardPeriods = message.earnRewardPeriods.map(function (e) {
                return e ? exports.MultiRewardPeriod.toJSON(e) : undefined;
            });
        }
        else {
            obj.earnRewardPeriods = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseParams();
        message.usdxMintingRewardPeriods =
            ((_a = object.usdxMintingRewardPeriods) === null || _a === void 0 ? void 0 : _a.map(function (e) {
                return exports.RewardPeriod.fromPartial(e);
            })) || [];
        message.hardSupplyRewardPeriods =
            ((_b = object.hardSupplyRewardPeriods) === null || _b === void 0 ? void 0 : _b.map(function (e) {
                return exports.MultiRewardPeriod.fromPartial(e);
            })) || [];
        message.hardBorrowRewardPeriods =
            ((_c = object.hardBorrowRewardPeriods) === null || _c === void 0 ? void 0 : _c.map(function (e) {
                return exports.MultiRewardPeriod.fromPartial(e);
            })) || [];
        message.delegatorRewardPeriods =
            ((_d = object.delegatorRewardPeriods) === null || _d === void 0 ? void 0 : _d.map(function (e) {
                return exports.MultiRewardPeriod.fromPartial(e);
            })) || [];
        message.swapRewardPeriods =
            ((_e = object.swapRewardPeriods) === null || _e === void 0 ? void 0 : _e.map(function (e) { return exports.MultiRewardPeriod.fromPartial(e); })) ||
                [];
        message.claimMultipliers =
            ((_f = object.claimMultipliers) === null || _f === void 0 ? void 0 : _f.map(function (e) { return exports.MultipliersPerDenom.fromPartial(e); })) ||
                [];
        message.claimEnd = (_g = object.claimEnd) !== null && _g !== void 0 ? _g : undefined;
        message.savingsRewardPeriods =
            ((_h = object.savingsRewardPeriods) === null || _h === void 0 ? void 0 : _h.map(function (e) {
                return exports.MultiRewardPeriod.fromPartial(e);
            })) || [];
        message.earnRewardPeriods =
            ((_j = object.earnRewardPeriods) === null || _j === void 0 ? void 0 : _j.map(function (e) { return exports.MultiRewardPeriod.fromPartial(e); })) ||
                [];
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_11, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_11_1) { e_11 = { error: e_11_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_11) throw e_11.error; }
    }
    return btoa(bin.join(''));
}
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
