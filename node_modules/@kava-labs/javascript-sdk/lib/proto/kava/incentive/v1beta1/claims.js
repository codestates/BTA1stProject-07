"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EarnClaim = exports.SavingsClaim = exports.SwapClaim = exports.DelegatorClaim = exports.HardLiquidityProviderClaim = exports.USDXMintingClaim = exports.MultiRewardIndexesProto = exports.MultiRewardIndex = exports.RewardIndexesProto = exports.RewardIndex = exports.BaseMultiClaim = exports.BaseClaim = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.incentive.v1beta1';
function createBaseBaseClaim() {
    return { owner: new Uint8Array(), reward: undefined };
}
exports.BaseClaim = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.owner.length !== 0) {
            writer.uint32(10).bytes(message.owner);
        }
        if (message.reward !== undefined) {
            coin_1.Coin.encode(message.reward, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBaseClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.bytes();
                    break;
                case 2:
                    message.reward = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            owner: isSet(object.owner)
                ? bytesFromBase64(object.owner)
                : new Uint8Array(),
            reward: isSet(object.reward) ? coin_1.Coin.fromJSON(object.reward) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.owner !== undefined &&
            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));
        message.reward !== undefined &&
            (obj.reward = message.reward ? coin_1.Coin.toJSON(message.reward) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseBaseClaim();
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.reward =
            object.reward !== undefined && object.reward !== null
                ? coin_1.Coin.fromPartial(object.reward)
                : undefined;
        return message;
    },
};
function createBaseBaseMultiClaim() {
    return { owner: new Uint8Array(), reward: [] };
}
exports.BaseMultiClaim = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.owner.length !== 0) {
            writer.uint32(10).bytes(message.owner);
        }
        try {
            for (var _b = __values(message.reward), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBaseMultiClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.bytes();
                    break;
                case 2:
                    message.reward.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            owner: isSet(object.owner)
                ? bytesFromBase64(object.owner)
                : new Uint8Array(),
            reward: Array.isArray(object === null || object === void 0 ? void 0 : object.reward)
                ? object.reward.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.owner !== undefined &&
            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));
        if (message.reward) {
            obj.reward = message.reward.map(function (e) { return (e ? coin_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.reward = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseBaseMultiClaim();
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.reward = ((_b = object.reward) === null || _b === void 0 ? void 0 : _b.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseRewardIndex() {
    return { collateralType: '', rewardFactor: new Uint8Array() };
}
exports.RewardIndex = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.rewardFactor.length !== 0) {
            writer.uint32(18).bytes(message.rewardFactor);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRewardIndex();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.rewardFactor = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            rewardFactor: isSet(object.rewardFactor)
                ? bytesFromBase64(object.rewardFactor)
                : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.rewardFactor !== undefined &&
            (obj.rewardFactor = base64FromBytes(message.rewardFactor !== undefined
                ? message.rewardFactor
                : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseRewardIndex();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.rewardFactor = (_b = object.rewardFactor) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseRewardIndexesProto() {
    return { rewardIndexes: [] };
}
exports.RewardIndexesProto = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.RewardIndex.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRewardIndexesProto();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardIndexes.push(exports.RewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.RewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.RewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRewardIndexesProto();
        message.rewardIndexes =
            ((_a = object.rewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.RewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMultiRewardIndex() {
    return { collateralType: '', rewardIndexes: [] };
}
exports.MultiRewardIndex = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.RewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiRewardIndex();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.rewardIndexes.push(exports.RewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.RewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.RewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMultiRewardIndex();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.rewardIndexes =
            ((_b = object.rewardIndexes) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.RewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMultiRewardIndexesProto() {
    return { multiRewardIndexes: [] };
}
exports.MultiRewardIndexesProto = {
    encode: function (message, writer) {
        var e_4, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.multiRewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMultiRewardIndexesProto();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.multiRewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            multiRewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.multiRewardIndexes)
                ? object.multiRewardIndexes.map(function (e) {
                    return exports.MultiRewardIndex.fromJSON(e);
                })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.multiRewardIndexes) {
            obj.multiRewardIndexes = message.multiRewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.multiRewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMultiRewardIndexesProto();
        message.multiRewardIndexes =
            ((_a = object.multiRewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) ||
                [];
        return message;
    },
};
function createBaseUSDXMintingClaim() {
    return { baseClaim: undefined, rewardIndexes: [] };
}
exports.USDXMintingClaim = {
    encode: function (message, writer) {
        var e_5, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseClaim !== undefined) {
            exports.BaseClaim.encode(message.baseClaim, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.RewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUSDXMintingClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseClaim = exports.BaseClaim.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.rewardIndexes.push(exports.RewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseClaim: isSet(object.baseClaim)
                ? exports.BaseClaim.fromJSON(object.baseClaim)
                : undefined,
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.RewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseClaim !== undefined &&
            (obj.baseClaim = message.baseClaim
                ? exports.BaseClaim.toJSON(message.baseClaim)
                : undefined);
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.RewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseUSDXMintingClaim();
        message.baseClaim =
            object.baseClaim !== undefined && object.baseClaim !== null
                ? exports.BaseClaim.fromPartial(object.baseClaim)
                : undefined;
        message.rewardIndexes =
            ((_a = object.rewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.RewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseHardLiquidityProviderClaim() {
    return {
        baseClaim: undefined,
        supplyRewardIndexes: [],
        borrowRewardIndexes: [],
    };
}
exports.HardLiquidityProviderClaim = {
    encode: function (message, writer) {
        var e_6, _a, e_7, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseClaim !== undefined) {
            exports.BaseMultiClaim.encode(message.baseClaim, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _c = __values(message.supplyRewardIndexes), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_6) throw e_6.error; }
        }
        try {
            for (var _e = __values(message.borrowRewardIndexes), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(26).fork()).ldelim();
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseHardLiquidityProviderClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseClaim = exports.BaseMultiClaim.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.supplyRewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.borrowRewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseClaim: isSet(object.baseClaim)
                ? exports.BaseMultiClaim.fromJSON(object.baseClaim)
                : undefined,
            supplyRewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.supplyRewardIndexes)
                ? object.supplyRewardIndexes.map(function (e) {
                    return exports.MultiRewardIndex.fromJSON(e);
                })
                : [],
            borrowRewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.borrowRewardIndexes)
                ? object.borrowRewardIndexes.map(function (e) {
                    return exports.MultiRewardIndex.fromJSON(e);
                })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseClaim !== undefined &&
            (obj.baseClaim = message.baseClaim
                ? exports.BaseMultiClaim.toJSON(message.baseClaim)
                : undefined);
        if (message.supplyRewardIndexes) {
            obj.supplyRewardIndexes = message.supplyRewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.supplyRewardIndexes = [];
        }
        if (message.borrowRewardIndexes) {
            obj.borrowRewardIndexes = message.borrowRewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.borrowRewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseHardLiquidityProviderClaim();
        message.baseClaim =
            object.baseClaim !== undefined && object.baseClaim !== null
                ? exports.BaseMultiClaim.fromPartial(object.baseClaim)
                : undefined;
        message.supplyRewardIndexes =
            ((_a = object.supplyRewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) ||
                [];
        message.borrowRewardIndexes =
            ((_b = object.borrowRewardIndexes) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) ||
                [];
        return message;
    },
};
function createBaseDelegatorClaim() {
    return { baseClaim: undefined, rewardIndexes: [] };
}
exports.DelegatorClaim = {
    encode: function (message, writer) {
        var e_8, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseClaim !== undefined) {
            exports.BaseMultiClaim.encode(message.baseClaim, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDelegatorClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseClaim = exports.BaseMultiClaim.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.rewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseClaim: isSet(object.baseClaim)
                ? exports.BaseMultiClaim.fromJSON(object.baseClaim)
                : undefined,
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.MultiRewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseClaim !== undefined &&
            (obj.baseClaim = message.baseClaim
                ? exports.BaseMultiClaim.toJSON(message.baseClaim)
                : undefined);
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDelegatorClaim();
        message.baseClaim =
            object.baseClaim !== undefined && object.baseClaim !== null
                ? exports.BaseMultiClaim.fromPartial(object.baseClaim)
                : undefined;
        message.rewardIndexes =
            ((_a = object.rewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseSwapClaim() {
    return { baseClaim: undefined, rewardIndexes: [] };
}
exports.SwapClaim = {
    encode: function (message, writer) {
        var e_9, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseClaim !== undefined) {
            exports.BaseMultiClaim.encode(message.baseClaim, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSwapClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseClaim = exports.BaseMultiClaim.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.rewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseClaim: isSet(object.baseClaim)
                ? exports.BaseMultiClaim.fromJSON(object.baseClaim)
                : undefined,
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.MultiRewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseClaim !== undefined &&
            (obj.baseClaim = message.baseClaim
                ? exports.BaseMultiClaim.toJSON(message.baseClaim)
                : undefined);
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseSwapClaim();
        message.baseClaim =
            object.baseClaim !== undefined && object.baseClaim !== null
                ? exports.BaseMultiClaim.fromPartial(object.baseClaim)
                : undefined;
        message.rewardIndexes =
            ((_a = object.rewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseSavingsClaim() {
    return { baseClaim: undefined, rewardIndexes: [] };
}
exports.SavingsClaim = {
    encode: function (message, writer) {
        var e_10, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseClaim !== undefined) {
            exports.BaseMultiClaim.encode(message.baseClaim, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSavingsClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseClaim = exports.BaseMultiClaim.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.rewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseClaim: isSet(object.baseClaim)
                ? exports.BaseMultiClaim.fromJSON(object.baseClaim)
                : undefined,
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.MultiRewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseClaim !== undefined &&
            (obj.baseClaim = message.baseClaim
                ? exports.BaseMultiClaim.toJSON(message.baseClaim)
                : undefined);
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseSavingsClaim();
        message.baseClaim =
            object.baseClaim !== undefined && object.baseClaim !== null
                ? exports.BaseMultiClaim.fromPartial(object.baseClaim)
                : undefined;
        message.rewardIndexes =
            ((_a = object.rewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseEarnClaim() {
    return { baseClaim: undefined, rewardIndexes: [] };
}
exports.EarnClaim = {
    encode: function (message, writer) {
        var e_11, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseClaim !== undefined) {
            exports.BaseMultiClaim.encode(message.baseClaim, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.rewardIndexes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.MultiRewardIndex.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_11) throw e_11.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEarnClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseClaim = exports.BaseMultiClaim.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.rewardIndexes.push(exports.MultiRewardIndex.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseClaim: isSet(object.baseClaim)
                ? exports.BaseMultiClaim.fromJSON(object.baseClaim)
                : undefined,
            rewardIndexes: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardIndexes)
                ? object.rewardIndexes.map(function (e) { return exports.MultiRewardIndex.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseClaim !== undefined &&
            (obj.baseClaim = message.baseClaim
                ? exports.BaseMultiClaim.toJSON(message.baseClaim)
                : undefined);
        if (message.rewardIndexes) {
            obj.rewardIndexes = message.rewardIndexes.map(function (e) {
                return e ? exports.MultiRewardIndex.toJSON(e) : undefined;
            });
        }
        else {
            obj.rewardIndexes = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseEarnClaim();
        message.baseClaim =
            object.baseClaim !== undefined && object.baseClaim !== null
                ? exports.BaseMultiClaim.fromPartial(object.baseClaim)
                : undefined;
        message.rewardIndexes =
            ((_a = object.rewardIndexes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.MultiRewardIndex.fromPartial(e); })) || [];
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_12, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_12) throw e_12.error; }
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
