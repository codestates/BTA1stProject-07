"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgClaimEarnRewardResponse = exports.MsgClaimEarnReward = exports.MsgClaimSavingsRewardResponse = exports.MsgClaimSavingsReward = exports.MsgClaimSwapRewardResponse = exports.MsgClaimSwapReward = exports.MsgClaimDelegatorRewardResponse = exports.MsgClaimDelegatorReward = exports.MsgClaimHardRewardResponse = exports.MsgClaimHardReward = exports.MsgClaimUSDXMintingRewardResponse = exports.MsgClaimUSDXMintingReward = exports.Selection = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = 'kava.incentive.v1beta1';
function createBaseSelection() {
    return { denom: '', multiplierName: '' };
}
exports.Selection = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        if (message.multiplierName !== '') {
            writer.uint32(18).string(message.multiplierName);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSelection();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.multiplierName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            multiplierName: isSet(object.multiplierName)
                ? String(object.multiplierName)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.multiplierName !== undefined &&
            (obj.multiplierName = message.multiplierName);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseSelection();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.multiplierName = (_b = object.multiplierName) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseMsgClaimUSDXMintingReward() {
    return { sender: '', multiplierName: '' };
}
exports.MsgClaimUSDXMintingReward = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.multiplierName !== '') {
            writer.uint32(18).string(message.multiplierName);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimUSDXMintingReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.multiplierName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            multiplierName: isSet(object.multiplierName)
                ? String(object.multiplierName)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.multiplierName !== undefined &&
            (obj.multiplierName = message.multiplierName);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgClaimUSDXMintingReward();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.multiplierName = (_b = object.multiplierName) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseMsgClaimUSDXMintingRewardResponse() {
    return {};
}
exports.MsgClaimUSDXMintingRewardResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimUSDXMintingRewardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimUSDXMintingRewardResponse();
        return message;
    },
};
function createBaseMsgClaimHardReward() {
    return { sender: '', denomsToClaim: [] };
}
exports.MsgClaimHardReward = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        try {
            for (var _b = __values(message.denomsToClaim), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Selection.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimHardReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denomsToClaim.push(exports.Selection.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denomsToClaim: Array.isArray(object === null || object === void 0 ? void 0 : object.denomsToClaim)
                ? object.denomsToClaim.map(function (e) { return exports.Selection.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.denomsToClaim) {
            obj.denomsToClaim = message.denomsToClaim.map(function (e) {
                return e ? exports.Selection.toJSON(e) : undefined;
            });
        }
        else {
            obj.denomsToClaim = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgClaimHardReward();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denomsToClaim =
            ((_b = object.denomsToClaim) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Selection.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMsgClaimHardRewardResponse() {
    return {};
}
exports.MsgClaimHardRewardResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimHardRewardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimHardRewardResponse();
        return message;
    },
};
function createBaseMsgClaimDelegatorReward() {
    return { sender: '', denomsToClaim: [] };
}
exports.MsgClaimDelegatorReward = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        try {
            for (var _b = __values(message.denomsToClaim), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Selection.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimDelegatorReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denomsToClaim.push(exports.Selection.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denomsToClaim: Array.isArray(object === null || object === void 0 ? void 0 : object.denomsToClaim)
                ? object.denomsToClaim.map(function (e) { return exports.Selection.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.denomsToClaim) {
            obj.denomsToClaim = message.denomsToClaim.map(function (e) {
                return e ? exports.Selection.toJSON(e) : undefined;
            });
        }
        else {
            obj.denomsToClaim = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgClaimDelegatorReward();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denomsToClaim =
            ((_b = object.denomsToClaim) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Selection.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMsgClaimDelegatorRewardResponse() {
    return {};
}
exports.MsgClaimDelegatorRewardResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimDelegatorRewardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimDelegatorRewardResponse();
        return message;
    },
};
function createBaseMsgClaimSwapReward() {
    return { sender: '', denomsToClaim: [] };
}
exports.MsgClaimSwapReward = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        try {
            for (var _b = __values(message.denomsToClaim), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Selection.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimSwapReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denomsToClaim.push(exports.Selection.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denomsToClaim: Array.isArray(object === null || object === void 0 ? void 0 : object.denomsToClaim)
                ? object.denomsToClaim.map(function (e) { return exports.Selection.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.denomsToClaim) {
            obj.denomsToClaim = message.denomsToClaim.map(function (e) {
                return e ? exports.Selection.toJSON(e) : undefined;
            });
        }
        else {
            obj.denomsToClaim = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgClaimSwapReward();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denomsToClaim =
            ((_b = object.denomsToClaim) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Selection.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMsgClaimSwapRewardResponse() {
    return {};
}
exports.MsgClaimSwapRewardResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimSwapRewardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimSwapRewardResponse();
        return message;
    },
};
function createBaseMsgClaimSavingsReward() {
    return { sender: '', denomsToClaim: [] };
}
exports.MsgClaimSavingsReward = {
    encode: function (message, writer) {
        var e_4, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        try {
            for (var _b = __values(message.denomsToClaim), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Selection.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimSavingsReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denomsToClaim.push(exports.Selection.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denomsToClaim: Array.isArray(object === null || object === void 0 ? void 0 : object.denomsToClaim)
                ? object.denomsToClaim.map(function (e) { return exports.Selection.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.denomsToClaim) {
            obj.denomsToClaim = message.denomsToClaim.map(function (e) {
                return e ? exports.Selection.toJSON(e) : undefined;
            });
        }
        else {
            obj.denomsToClaim = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgClaimSavingsReward();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denomsToClaim =
            ((_b = object.denomsToClaim) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Selection.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMsgClaimSavingsRewardResponse() {
    return {};
}
exports.MsgClaimSavingsRewardResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimSavingsRewardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimSavingsRewardResponse();
        return message;
    },
};
function createBaseMsgClaimEarnReward() {
    return { sender: '', denomsToClaim: [] };
}
exports.MsgClaimEarnReward = {
    encode: function (message, writer) {
        var e_5, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        try {
            for (var _b = __values(message.denomsToClaim), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Selection.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimEarnReward();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denomsToClaim.push(exports.Selection.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denomsToClaim: Array.isArray(object === null || object === void 0 ? void 0 : object.denomsToClaim)
                ? object.denomsToClaim.map(function (e) { return exports.Selection.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        if (message.denomsToClaim) {
            obj.denomsToClaim = message.denomsToClaim.map(function (e) {
                return e ? exports.Selection.toJSON(e) : undefined;
            });
        }
        else {
            obj.denomsToClaim = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgClaimEarnReward();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denomsToClaim =
            ((_b = object.denomsToClaim) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Selection.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMsgClaimEarnRewardResponse() {
    return {};
}
exports.MsgClaimEarnRewardResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimEarnRewardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimEarnRewardResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.ClaimUSDXMintingReward = this.ClaimUSDXMintingReward.bind(this);
        this.ClaimHardReward = this.ClaimHardReward.bind(this);
        this.ClaimDelegatorReward = this.ClaimDelegatorReward.bind(this);
        this.ClaimSwapReward = this.ClaimSwapReward.bind(this);
        this.ClaimSavingsReward = this.ClaimSavingsReward.bind(this);
        this.ClaimEarnReward = this.ClaimEarnReward.bind(this);
    }
    MsgClientImpl.prototype.ClaimUSDXMintingReward = function (request) {
        var data = exports.MsgClaimUSDXMintingReward.encode(request).finish();
        var promise = this.rpc.request('kava.incentive.v1beta1.Msg', 'ClaimUSDXMintingReward', data);
        return promise.then(function (data) {
            return exports.MsgClaimUSDXMintingRewardResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.ClaimHardReward = function (request) {
        var data = exports.MsgClaimHardReward.encode(request).finish();
        var promise = this.rpc.request('kava.incentive.v1beta1.Msg', 'ClaimHardReward', data);
        return promise.then(function (data) {
            return exports.MsgClaimHardRewardResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.ClaimDelegatorReward = function (request) {
        var data = exports.MsgClaimDelegatorReward.encode(request).finish();
        var promise = this.rpc.request('kava.incentive.v1beta1.Msg', 'ClaimDelegatorReward', data);
        return promise.then(function (data) {
            return exports.MsgClaimDelegatorRewardResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.ClaimSwapReward = function (request) {
        var data = exports.MsgClaimSwapReward.encode(request).finish();
        var promise = this.rpc.request('kava.incentive.v1beta1.Msg', 'ClaimSwapReward', data);
        return promise.then(function (data) {
            return exports.MsgClaimSwapRewardResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.ClaimSavingsReward = function (request) {
        var data = exports.MsgClaimSavingsReward.encode(request).finish();
        var promise = this.rpc.request('kava.incentive.v1beta1.Msg', 'ClaimSavingsReward', data);
        return promise.then(function (data) {
            return exports.MsgClaimSavingsRewardResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.ClaimEarnReward = function (request) {
        var data = exports.MsgClaimEarnReward.encode(request).finish();
        var promise = this.rpc.request('kava.incentive.v1beta1.Msg', 'ClaimEarnReward', data);
        return promise.then(function (data) {
            return exports.MsgClaimEarnRewardResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
