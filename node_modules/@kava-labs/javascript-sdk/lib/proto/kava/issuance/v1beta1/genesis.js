"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetSupply = exports.RateLimit = exports.Asset = exports.Params = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var duration_1 = require("../../../google/protobuf/duration");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.issuance.v1beta1';
function createBaseGenesisState() {
    return { params: undefined, supplies: [] };
}
exports.GenesisState = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            exports.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.supplies), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.AssetSupply.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = exports.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.supplies.push(exports.AssetSupply.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? exports.Params.fromJSON(object.params) : undefined,
            supplies: Array.isArray(object === null || object === void 0 ? void 0 : object.supplies)
                ? object.supplies.map(function (e) { return exports.AssetSupply.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? exports.Params.toJSON(message.params) : undefined);
        if (message.supplies) {
            obj.supplies = message.supplies.map(function (e) {
                return e ? exports.AssetSupply.toJSON(e) : undefined;
            });
        }
        else {
            obj.supplies = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? exports.Params.fromPartial(object.params)
                : undefined;
        message.supplies =
            ((_a = object.supplies) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.AssetSupply.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseParams() {
    return { assets: [] };
}
exports.Params = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.assets), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Asset.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.assets.push(exports.Asset.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            assets: Array.isArray(object === null || object === void 0 ? void 0 : object.assets)
                ? object.assets.map(function (e) { return exports.Asset.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.assets) {
            obj.assets = message.assets.map(function (e) { return (e ? exports.Asset.toJSON(e) : undefined); });
        }
        else {
            obj.assets = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseParams();
        message.assets = ((_a = object.assets) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Asset.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseAsset() {
    return {
        owner: '',
        denom: '',
        blockedAddresses: [],
        paused: false,
        blockable: false,
        rateLimit: undefined,
    };
}
exports.Asset = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.owner !== '') {
            writer.uint32(10).string(message.owner);
        }
        if (message.denom !== '') {
            writer.uint32(18).string(message.denom);
        }
        try {
            for (var _b = __values(message.blockedAddresses), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(26).string(v);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (message.paused === true) {
            writer.uint32(32).bool(message.paused);
        }
        if (message.blockable === true) {
            writer.uint32(40).bool(message.blockable);
        }
        if (message.rateLimit !== undefined) {
            exports.RateLimit.encode(message.rateLimit, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAsset();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                case 3:
                    message.blockedAddresses.push(reader.string());
                    break;
                case 4:
                    message.paused = reader.bool();
                    break;
                case 5:
                    message.blockable = reader.bool();
                    break;
                case 6:
                    message.rateLimit = exports.RateLimit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            owner: isSet(object.owner) ? String(object.owner) : '',
            denom: isSet(object.denom) ? String(object.denom) : '',
            blockedAddresses: Array.isArray(object === null || object === void 0 ? void 0 : object.blockedAddresses)
                ? object.blockedAddresses.map(function (e) { return String(e); })
                : [],
            paused: isSet(object.paused) ? Boolean(object.paused) : false,
            blockable: isSet(object.blockable) ? Boolean(object.blockable) : false,
            rateLimit: isSet(object.rateLimit)
                ? exports.RateLimit.fromJSON(object.rateLimit)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.denom !== undefined && (obj.denom = message.denom);
        if (message.blockedAddresses) {
            obj.blockedAddresses = message.blockedAddresses.map(function (e) { return e; });
        }
        else {
            obj.blockedAddresses = [];
        }
        message.paused !== undefined && (obj.paused = message.paused);
        message.blockable !== undefined && (obj.blockable = message.blockable);
        message.rateLimit !== undefined &&
            (obj.rateLimit = message.rateLimit
                ? exports.RateLimit.toJSON(message.rateLimit)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseAsset();
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : '';
        message.blockedAddresses = ((_c = object.blockedAddresses) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.paused = (_d = object.paused) !== null && _d !== void 0 ? _d : false;
        message.blockable = (_e = object.blockable) !== null && _e !== void 0 ? _e : false;
        message.rateLimit =
            object.rateLimit !== undefined && object.rateLimit !== null
                ? exports.RateLimit.fromPartial(object.rateLimit)
                : undefined;
        return message;
    },
};
function createBaseRateLimit() {
    return { active: false, limit: new Uint8Array(), timePeriod: undefined };
}
exports.RateLimit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.active === true) {
            writer.uint32(8).bool(message.active);
        }
        if (message.limit.length !== 0) {
            writer.uint32(18).bytes(message.limit);
        }
        if (message.timePeriod !== undefined) {
            duration_1.Duration.encode(message.timePeriod, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRateLimit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.active = reader.bool();
                    break;
                case 2:
                    message.limit = reader.bytes();
                    break;
                case 3:
                    message.timePeriod = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            active: isSet(object.active) ? Boolean(object.active) : false,
            limit: isSet(object.limit)
                ? bytesFromBase64(object.limit)
                : new Uint8Array(),
            timePeriod: isSet(object.timePeriod)
                ? duration_1.Duration.fromJSON(object.timePeriod)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.active !== undefined && (obj.active = message.active);
        message.limit !== undefined &&
            (obj.limit = base64FromBytes(message.limit !== undefined ? message.limit : new Uint8Array()));
        message.timePeriod !== undefined &&
            (obj.timePeriod = message.timePeriod
                ? duration_1.Duration.toJSON(message.timePeriod)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseRateLimit();
        message.active = (_a = object.active) !== null && _a !== void 0 ? _a : false;
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.timePeriod =
            object.timePeriod !== undefined && object.timePeriod !== null
                ? duration_1.Duration.fromPartial(object.timePeriod)
                : undefined;
        return message;
    },
};
function createBaseAssetSupply() {
    return { currentSupply: undefined, timeElapsed: undefined };
}
exports.AssetSupply = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.currentSupply !== undefined) {
            coin_1.Coin.encode(message.currentSupply, writer.uint32(10).fork()).ldelim();
        }
        if (message.timeElapsed !== undefined) {
            duration_1.Duration.encode(message.timeElapsed, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAssetSupply();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.currentSupply = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.timeElapsed = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            currentSupply: isSet(object.currentSupply)
                ? coin_1.Coin.fromJSON(object.currentSupply)
                : undefined,
            timeElapsed: isSet(object.timeElapsed)
                ? duration_1.Duration.fromJSON(object.timeElapsed)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.currentSupply !== undefined &&
            (obj.currentSupply = message.currentSupply
                ? coin_1.Coin.toJSON(message.currentSupply)
                : undefined);
        message.timeElapsed !== undefined &&
            (obj.timeElapsed = message.timeElapsed
                ? duration_1.Duration.toJSON(message.timeElapsed)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseAssetSupply();
        message.currentSupply =
            object.currentSupply !== undefined && object.currentSupply !== null
                ? coin_1.Coin.fromPartial(object.currentSupply)
                : undefined;
        message.timeElapsed =
            object.timeElapsed !== undefined && object.timeElapsed !== null
                ? duration_1.Duration.fromPartial(object.timeElapsed)
                : undefined;
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_4, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
