"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgSetPauseStatusResponse = exports.MsgSetPauseStatus = exports.MsgUnblockAddressResponse = exports.MsgUnblockAddress = exports.MsgBlockAddressResponse = exports.MsgBlockAddress = exports.MsgRedeemTokensResponse = exports.MsgRedeemTokens = exports.MsgIssueTokensResponse = exports.MsgIssueTokens = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.issuance.v1beta1';
function createBaseMsgIssueTokens() {
    return { sender: '', tokens: undefined, receiver: '' };
}
exports.MsgIssueTokens = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.tokens !== undefined) {
            coin_1.Coin.encode(message.tokens, writer.uint32(18).fork()).ldelim();
        }
        if (message.receiver !== '') {
            writer.uint32(26).string(message.receiver);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgIssueTokens();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.tokens = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.receiver = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            tokens: isSet(object.tokens) ? coin_1.Coin.fromJSON(object.tokens) : undefined,
            receiver: isSet(object.receiver) ? String(object.receiver) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.tokens !== undefined &&
            (obj.tokens = message.tokens ? coin_1.Coin.toJSON(message.tokens) : undefined);
        message.receiver !== undefined && (obj.receiver = message.receiver);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgIssueTokens();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.tokens =
            object.tokens !== undefined && object.tokens !== null
                ? coin_1.Coin.fromPartial(object.tokens)
                : undefined;
        message.receiver = (_b = object.receiver) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseMsgIssueTokensResponse() {
    return {};
}
exports.MsgIssueTokensResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgIssueTokensResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgIssueTokensResponse();
        return message;
    },
};
function createBaseMsgRedeemTokens() {
    return { sender: '', tokens: undefined };
}
exports.MsgRedeemTokens = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.tokens !== undefined) {
            coin_1.Coin.encode(message.tokens, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgRedeemTokens();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.tokens = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            tokens: isSet(object.tokens) ? coin_1.Coin.fromJSON(object.tokens) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.tokens !== undefined &&
            (obj.tokens = message.tokens ? coin_1.Coin.toJSON(message.tokens) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMsgRedeemTokens();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.tokens =
            object.tokens !== undefined && object.tokens !== null
                ? coin_1.Coin.fromPartial(object.tokens)
                : undefined;
        return message;
    },
};
function createBaseMsgRedeemTokensResponse() {
    return {};
}
exports.MsgRedeemTokensResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgRedeemTokensResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgRedeemTokensResponse();
        return message;
    },
};
function createBaseMsgBlockAddress() {
    return { sender: '', denom: '', blockedAddress: '' };
}
exports.MsgBlockAddress = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== '') {
            writer.uint32(18).string(message.denom);
        }
        if (message.blockedAddress !== '') {
            writer.uint32(26).string(message.blockedAddress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgBlockAddress();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                case 3:
                    message.blockedAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denom: isSet(object.denom) ? String(object.denom) : '',
            blockedAddress: isSet(object.blockedAddress)
                ? String(object.blockedAddress)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.denom !== undefined && (obj.denom = message.denom);
        message.blockedAddress !== undefined &&
            (obj.blockedAddress = message.blockedAddress);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgBlockAddress();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : '';
        message.blockedAddress = (_c = object.blockedAddress) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMsgBlockAddressResponse() {
    return {};
}
exports.MsgBlockAddressResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgBlockAddressResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgBlockAddressResponse();
        return message;
    },
};
function createBaseMsgUnblockAddress() {
    return { sender: '', denom: '', blockedAddress: '' };
}
exports.MsgUnblockAddress = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== '') {
            writer.uint32(18).string(message.denom);
        }
        if (message.blockedAddress !== '') {
            writer.uint32(26).string(message.blockedAddress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUnblockAddress();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                case 3:
                    message.blockedAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denom: isSet(object.denom) ? String(object.denom) : '',
            blockedAddress: isSet(object.blockedAddress)
                ? String(object.blockedAddress)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.denom !== undefined && (obj.denom = message.denom);
        message.blockedAddress !== undefined &&
            (obj.blockedAddress = message.blockedAddress);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgUnblockAddress();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : '';
        message.blockedAddress = (_c = object.blockedAddress) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMsgUnblockAddressResponse() {
    return {};
}
exports.MsgUnblockAddressResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgUnblockAddressResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgUnblockAddressResponse();
        return message;
    },
};
function createBaseMsgSetPauseStatus() {
    return { sender: '', denom: '', status: false };
}
exports.MsgSetPauseStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== '') {
            writer.uint32(18).string(message.denom);
        }
        if (message.status === true) {
            writer.uint32(24).bool(message.status);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgSetPauseStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                case 3:
                    message.status = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            denom: isSet(object.denom) ? String(object.denom) : '',
            status: isSet(object.status) ? Boolean(object.status) : false,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.denom !== undefined && (obj.denom = message.denom);
        message.status !== undefined && (obj.status = message.status);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgSetPauseStatus();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : '';
        message.status = (_c = object.status) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBaseMsgSetPauseStatusResponse() {
    return {};
}
exports.MsgSetPauseStatusResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgSetPauseStatusResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgSetPauseStatusResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.IssueTokens = this.IssueTokens.bind(this);
        this.RedeemTokens = this.RedeemTokens.bind(this);
        this.BlockAddress = this.BlockAddress.bind(this);
        this.UnblockAddress = this.UnblockAddress.bind(this);
        this.SetPauseStatus = this.SetPauseStatus.bind(this);
    }
    MsgClientImpl.prototype.IssueTokens = function (request) {
        var data = exports.MsgIssueTokens.encode(request).finish();
        var promise = this.rpc.request('kava.issuance.v1beta1.Msg', 'IssueTokens', data);
        return promise.then(function (data) {
            return exports.MsgIssueTokensResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.RedeemTokens = function (request) {
        var data = exports.MsgRedeemTokens.encode(request).finish();
        var promise = this.rpc.request('kava.issuance.v1beta1.Msg', 'RedeemTokens', data);
        return promise.then(function (data) {
            return exports.MsgRedeemTokensResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.BlockAddress = function (request) {
        var data = exports.MsgBlockAddress.encode(request).finish();
        var promise = this.rpc.request('kava.issuance.v1beta1.Msg', 'BlockAddress', data);
        return promise.then(function (data) {
            return exports.MsgBlockAddressResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.UnblockAddress = function (request) {
        var data = exports.MsgUnblockAddress.encode(request).finish();
        var promise = this.rpc.request('kava.issuance.v1beta1.Msg', 'UnblockAddress', data);
        return promise.then(function (data) {
            return exports.MsgUnblockAddressResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.SetPauseStatus = function (request) {
        var data = exports.MsgSetPauseStatus.encode(request).finish();
        var promise = this.rpc.request('kava.issuance.v1beta1.Msg', 'SetPauseStatus', data);
        return promise.then(function (data) {
            return exports.MsgSetPauseStatusResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
