import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params } from '../../../kava/issuance/v1beta1/genesis';
export declare const protobufPackage = "kava.issuance.v1beta1";
/** QueryParamsRequest defines the request type for querying x/issuance parameters. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse defines the response type for querying x/issuance parameters. */
export interface QueryParamsResponse {
    params?: Params;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            assets?: {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        params?: ({
            assets?: {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            assets?: ({
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] & ({
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            } & {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: (string[] & string[] & Record<Exclude<keyof I["params"]["assets"][number]["blockedAddresses"], keyof string[]>, never>) | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: ({
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } & {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: ({
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } & {
                        seconds?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & Record<Exclude<keyof I["params"]["assets"][number]["rateLimit"]["timePeriod"]["seconds"], keyof Long>, never>) | undefined;
                        nanos?: number | undefined;
                    } & Record<Exclude<keyof I["params"]["assets"][number]["rateLimit"]["timePeriod"], keyof import("../../../google/protobuf/duration").Duration>, never>) | undefined;
                } & Record<Exclude<keyof I["params"]["assets"][number]["rateLimit"], keyof import("../../../kava/issuance/v1beta1/genesis").RateLimit>, never>) | undefined;
            } & Record<Exclude<keyof I["params"]["assets"][number], keyof import("../../../kava/issuance/v1beta1/genesis").Asset>, never>)[] & Record<Exclude<keyof I["params"]["assets"], keyof {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "assets">, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
};
/** Query defines the gRPC querier service for issuance module */
export interface Query {
    /** Params queries all parameters of the issuance module. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
