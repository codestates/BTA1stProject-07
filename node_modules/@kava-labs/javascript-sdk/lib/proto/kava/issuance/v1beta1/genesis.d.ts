import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Duration } from '../../../google/protobuf/duration';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.issuance.v1beta1";
/** GenesisState defines the issuance module's genesis state. */
export interface GenesisState {
    /** params defines all the paramaters of the module. */
    params?: Params;
    supplies: AssetSupply[];
}
/** Params defines the parameters for the issuance module. */
export interface Params {
    assets: Asset[];
}
/** Asset type for assets in the issuance module */
export interface Asset {
    owner: string;
    denom: string;
    blockedAddresses: string[];
    paused: boolean;
    blockable: boolean;
    rateLimit?: RateLimit;
}
/** RateLimit parameters for rate-limiting the supply of an issued asset */
export interface RateLimit {
    active: boolean;
    limit: Uint8Array;
    timePeriod?: Duration;
}
/**
 * AssetSupply contains information about an asset's rate-limited supply (the
 * total supply of the asset is tracked in the top-level supply module)
 */
export interface AssetSupply {
    currentSupply?: Coin;
    timeElapsed?: Duration;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        params?: {
            assets?: {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } | undefined;
        supplies?: {
            currentSupply?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            timeElapsed?: {
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        params?: ({
            assets?: {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] | undefined;
        } & {
            assets?: ({
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[] & ({
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            } & {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: (string[] & string[] & Record<Exclude<keyof I["params"]["assets"][number]["blockedAddresses"], keyof string[]>, never>) | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: ({
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } & {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: ({
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } & {
                        seconds?: string | number | (Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long) => Long;
                            and: (other: string | number | Long) => Long;
                            compare: (other: string | number | Long) => number;
                            comp: (other: string | number | Long) => number;
                            divide: (divisor: string | number | Long) => Long;
                            div: (divisor: string | number | Long) => Long;
                            equals: (other: string | number | Long) => boolean;
                            eq: (other: string | number | Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long) => boolean;
                            gt: (other: string | number | Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long) => boolean;
                            gte: (other: string | number | Long) => boolean;
                            ge: (other: string | number | Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            eqz: () => boolean;
                            lessThan: (other: string | number | Long) => boolean;
                            lt: (other: string | number | Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long) => boolean;
                            lte: (other: string | number | Long) => boolean;
                            le: (other: string | number | Long) => boolean;
                            modulo: (other: string | number | Long) => Long;
                            mod: (other: string | number | Long) => Long;
                            rem: (other: string | number | Long) => Long;
                            multiply: (multiplier: string | number | Long) => Long;
                            mul: (multiplier: string | number | Long) => Long;
                            negate: () => Long;
                            neg: () => Long;
                            not: () => Long;
                            countLeadingZeros: () => number;
                            clz: () => number;
                            countTrailingZeros: () => number;
                            ctz: () => number;
                            notEquals: (other: string | number | Long) => boolean;
                            neq: (other: string | number | Long) => boolean;
                            ne: (other: string | number | Long) => boolean;
                            or: (other: string | number | Long) => Long;
                            shiftLeft: (numBits: number | Long) => Long;
                            shl: (numBits: number | Long) => Long;
                            shiftRight: (numBits: number | Long) => Long;
                            shr: (numBits: number | Long) => Long;
                            shiftRightUnsigned: (numBits: number | Long) => Long;
                            shru: (numBits: number | Long) => Long;
                            shr_u: (numBits: number | Long) => Long;
                            rotateLeft: (numBits: number | Long) => Long;
                            rotl: (numBits: number | Long) => Long;
                            rotateRight: (numBits: number | Long) => Long;
                            rotr: (numBits: number | Long) => Long;
                            subtract: (subtrahend: string | number | Long) => Long;
                            sub: (subtrahend: string | number | Long) => Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long;
                            xor: (other: string | number | Long) => Long;
                        } & Record<Exclude<keyof I["params"]["assets"][number]["rateLimit"]["timePeriod"]["seconds"], keyof Long>, never>) | undefined;
                        nanos?: number | undefined;
                    } & Record<Exclude<keyof I["params"]["assets"][number]["rateLimit"]["timePeriod"], keyof Duration>, never>) | undefined;
                } & Record<Exclude<keyof I["params"]["assets"][number]["rateLimit"], keyof RateLimit>, never>) | undefined;
            } & Record<Exclude<keyof I["params"]["assets"][number], keyof Asset>, never>)[] & Record<Exclude<keyof I["params"]["assets"], keyof {
                owner?: string | undefined;
                denom?: string | undefined;
                blockedAddresses?: string[] | undefined;
                paused?: boolean | undefined;
                blockable?: boolean | undefined;
                rateLimit?: {
                    active?: boolean | undefined;
                    limit?: Uint8Array | undefined;
                    timePeriod?: {
                        seconds?: string | number | Long | undefined;
                        nanos?: number | undefined;
                    } | undefined;
                } | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "assets">, never>) | undefined;
        supplies?: ({
            currentSupply?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            timeElapsed?: {
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } | undefined;
        }[] & ({
            currentSupply?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            timeElapsed?: {
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } | undefined;
        } & {
            currentSupply?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["supplies"][number]["currentSupply"], keyof Coin>, never>) | undefined;
            timeElapsed?: ({
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & Record<Exclude<keyof I["supplies"][number]["timeElapsed"]["seconds"], keyof Long>, never>) | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["supplies"][number]["timeElapsed"], keyof Duration>, never>) | undefined;
        } & Record<Exclude<keyof I["supplies"][number], keyof AssetSupply>, never>)[] & Record<Exclude<keyof I["supplies"], keyof {
            currentSupply?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            timeElapsed?: {
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        assets?: {
            owner?: string | undefined;
            denom?: string | undefined;
            blockedAddresses?: string[] | undefined;
            paused?: boolean | undefined;
            blockable?: boolean | undefined;
            rateLimit?: {
                active?: boolean | undefined;
                limit?: Uint8Array | undefined;
                timePeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        assets?: ({
            owner?: string | undefined;
            denom?: string | undefined;
            blockedAddresses?: string[] | undefined;
            paused?: boolean | undefined;
            blockable?: boolean | undefined;
            rateLimit?: {
                active?: boolean | undefined;
                limit?: Uint8Array | undefined;
                timePeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
            } | undefined;
        }[] & ({
            owner?: string | undefined;
            denom?: string | undefined;
            blockedAddresses?: string[] | undefined;
            paused?: boolean | undefined;
            blockable?: boolean | undefined;
            rateLimit?: {
                active?: boolean | undefined;
                limit?: Uint8Array | undefined;
                timePeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
            } | undefined;
        } & {
            owner?: string | undefined;
            denom?: string | undefined;
            blockedAddresses?: (string[] & string[] & Record<Exclude<keyof I["assets"][number]["blockedAddresses"], keyof string[]>, never>) | undefined;
            paused?: boolean | undefined;
            blockable?: boolean | undefined;
            rateLimit?: ({
                active?: boolean | undefined;
                limit?: Uint8Array | undefined;
                timePeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
            } & {
                active?: boolean | undefined;
                limit?: Uint8Array | undefined;
                timePeriod?: ({
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & Record<Exclude<keyof I["assets"][number]["rateLimit"]["timePeriod"]["seconds"], keyof Long>, never>) | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["assets"][number]["rateLimit"]["timePeriod"], keyof Duration>, never>) | undefined;
            } & Record<Exclude<keyof I["assets"][number]["rateLimit"], keyof RateLimit>, never>) | undefined;
        } & Record<Exclude<keyof I["assets"][number], keyof Asset>, never>)[] & Record<Exclude<keyof I["assets"], keyof {
            owner?: string | undefined;
            denom?: string | undefined;
            blockedAddresses?: string[] | undefined;
            paused?: boolean | undefined;
            blockable?: boolean | undefined;
            rateLimit?: {
                active?: boolean | undefined;
                limit?: Uint8Array | undefined;
                timePeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "assets">, never>>(object: I): Params;
};
export declare const Asset: {
    encode(message: Asset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Asset;
    fromJSON(object: any): Asset;
    toJSON(message: Asset): unknown;
    fromPartial<I extends {
        owner?: string | undefined;
        denom?: string | undefined;
        blockedAddresses?: string[] | undefined;
        paused?: boolean | undefined;
        blockable?: boolean | undefined;
        rateLimit?: {
            active?: boolean | undefined;
            limit?: Uint8Array | undefined;
            timePeriod?: {
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } | undefined;
        } | undefined;
    } & {
        owner?: string | undefined;
        denom?: string | undefined;
        blockedAddresses?: (string[] & string[] & Record<Exclude<keyof I["blockedAddresses"], keyof string[]>, never>) | undefined;
        paused?: boolean | undefined;
        blockable?: boolean | undefined;
        rateLimit?: ({
            active?: boolean | undefined;
            limit?: Uint8Array | undefined;
            timePeriod?: {
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } | undefined;
        } & {
            active?: boolean | undefined;
            limit?: Uint8Array | undefined;
            timePeriod?: ({
                seconds?: string | number | Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & Record<Exclude<keyof I["rateLimit"]["timePeriod"]["seconds"], keyof Long>, never>) | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["rateLimit"]["timePeriod"], keyof Duration>, never>) | undefined;
        } & Record<Exclude<keyof I["rateLimit"], keyof RateLimit>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Asset>, never>>(object: I): Asset;
};
export declare const RateLimit: {
    encode(message: RateLimit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RateLimit;
    fromJSON(object: any): RateLimit;
    toJSON(message: RateLimit): unknown;
    fromPartial<I extends {
        active?: boolean | undefined;
        limit?: Uint8Array | undefined;
        timePeriod?: {
            seconds?: string | number | Long | undefined;
            nanos?: number | undefined;
        } | undefined;
    } & {
        active?: boolean | undefined;
        limit?: Uint8Array | undefined;
        timePeriod?: ({
            seconds?: string | number | Long | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["timePeriod"]["seconds"], keyof Long>, never>) | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["timePeriod"], keyof Duration>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof RateLimit>, never>>(object: I): RateLimit;
};
export declare const AssetSupply: {
    encode(message: AssetSupply, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AssetSupply;
    fromJSON(object: any): AssetSupply;
    toJSON(message: AssetSupply): unknown;
    fromPartial<I extends {
        currentSupply?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        timeElapsed?: {
            seconds?: string | number | Long | undefined;
            nanos?: number | undefined;
        } | undefined;
    } & {
        currentSupply?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["currentSupply"], keyof Coin>, never>) | undefined;
        timeElapsed?: ({
            seconds?: string | number | Long | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["timeElapsed"]["seconds"], keyof Long>, never>) | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["timeElapsed"], keyof Duration>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AssetSupply>, never>>(object: I): AssetSupply;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
