import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.issuance.v1beta1";
/** MsgIssueTokens represents a message used by the issuer to issue new tokens */
export interface MsgIssueTokens {
    sender: string;
    tokens?: Coin;
    receiver: string;
}
/** MsgIssueTokensResponse defines the Msg/IssueTokens response type. */
export interface MsgIssueTokensResponse {
}
/** MsgRedeemTokens represents a message used by the issuer to redeem (burn) tokens */
export interface MsgRedeemTokens {
    sender: string;
    tokens?: Coin;
}
/** MsgRedeemTokensResponse defines the Msg/RedeemTokens response type. */
export interface MsgRedeemTokensResponse {
}
/** MsgBlockAddress represents a message used by the issuer to block an address from holding or transferring tokens */
export interface MsgBlockAddress {
    sender: string;
    denom: string;
    blockedAddress: string;
}
/** MsgBlockAddressResponse defines the Msg/BlockAddress response type. */
export interface MsgBlockAddressResponse {
}
/** MsgUnblockAddress message type used by the issuer to unblock an address from holding or transferring tokens */
export interface MsgUnblockAddress {
    sender: string;
    denom: string;
    blockedAddress: string;
}
/** MsgUnblockAddressResponse defines the Msg/UnblockAddress response type. */
export interface MsgUnblockAddressResponse {
}
/** MsgSetPauseStatus message type used by the issuer to pause or unpause status */
export interface MsgSetPauseStatus {
    sender: string;
    denom: string;
    status: boolean;
}
/** MsgSetPauseStatusResponse defines the Msg/SetPauseStatus response type. */
export interface MsgSetPauseStatusResponse {
}
export declare const MsgIssueTokens: {
    encode(message: MsgIssueTokens, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgIssueTokens;
    fromJSON(object: any): MsgIssueTokens;
    toJSON(message: MsgIssueTokens): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        tokens?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        receiver?: string | undefined;
    } & {
        sender?: string | undefined;
        tokens?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["tokens"], keyof Coin>, never>) | undefined;
        receiver?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgIssueTokens>, never>>(object: I): MsgIssueTokens;
};
export declare const MsgIssueTokensResponse: {
    encode(_: MsgIssueTokensResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgIssueTokensResponse;
    fromJSON(_: any): MsgIssueTokensResponse;
    toJSON(_: MsgIssueTokensResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgIssueTokensResponse;
};
export declare const MsgRedeemTokens: {
    encode(message: MsgRedeemTokens, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRedeemTokens;
    fromJSON(object: any): MsgRedeemTokens;
    toJSON(message: MsgRedeemTokens): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        tokens?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        tokens?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["tokens"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgRedeemTokens>, never>>(object: I): MsgRedeemTokens;
};
export declare const MsgRedeemTokensResponse: {
    encode(_: MsgRedeemTokensResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRedeemTokensResponse;
    fromJSON(_: any): MsgRedeemTokensResponse;
    toJSON(_: MsgRedeemTokensResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgRedeemTokensResponse;
};
export declare const MsgBlockAddress: {
    encode(message: MsgBlockAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgBlockAddress;
    fromJSON(object: any): MsgBlockAddress;
    toJSON(message: MsgBlockAddress): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        denom?: string | undefined;
        blockedAddress?: string | undefined;
    } & {
        sender?: string | undefined;
        denom?: string | undefined;
        blockedAddress?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgBlockAddress>, never>>(object: I): MsgBlockAddress;
};
export declare const MsgBlockAddressResponse: {
    encode(_: MsgBlockAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgBlockAddressResponse;
    fromJSON(_: any): MsgBlockAddressResponse;
    toJSON(_: MsgBlockAddressResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgBlockAddressResponse;
};
export declare const MsgUnblockAddress: {
    encode(message: MsgUnblockAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgUnblockAddress;
    fromJSON(object: any): MsgUnblockAddress;
    toJSON(message: MsgUnblockAddress): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        denom?: string | undefined;
        blockedAddress?: string | undefined;
    } & {
        sender?: string | undefined;
        denom?: string | undefined;
        blockedAddress?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgUnblockAddress>, never>>(object: I): MsgUnblockAddress;
};
export declare const MsgUnblockAddressResponse: {
    encode(_: MsgUnblockAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgUnblockAddressResponse;
    fromJSON(_: any): MsgUnblockAddressResponse;
    toJSON(_: MsgUnblockAddressResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUnblockAddressResponse;
};
export declare const MsgSetPauseStatus: {
    encode(message: MsgSetPauseStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSetPauseStatus;
    fromJSON(object: any): MsgSetPauseStatus;
    toJSON(message: MsgSetPauseStatus): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        denom?: string | undefined;
        status?: boolean | undefined;
    } & {
        sender?: string | undefined;
        denom?: string | undefined;
        status?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof MsgSetPauseStatus>, never>>(object: I): MsgSetPauseStatus;
};
export declare const MsgSetPauseStatusResponse: {
    encode(_: MsgSetPauseStatusResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSetPauseStatusResponse;
    fromJSON(_: any): MsgSetPauseStatusResponse;
    toJSON(_: MsgSetPauseStatusResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgSetPauseStatusResponse;
};
/** Msg defines the issuance Msg service. */
export interface Msg {
    /** IssueTokens message type used by the issuer to issue new tokens */
    IssueTokens(request: MsgIssueTokens): Promise<MsgIssueTokensResponse>;
    /** RedeemTokens message type used by the issuer to redeem (burn) tokens */
    RedeemTokens(request: MsgRedeemTokens): Promise<MsgRedeemTokensResponse>;
    /** BlockAddress message type used by the issuer to block an address from holding or transferring tokens */
    BlockAddress(request: MsgBlockAddress): Promise<MsgBlockAddressResponse>;
    /** UnblockAddress message type used by the issuer to unblock an address from holding or transferring tokens */
    UnblockAddress(request: MsgUnblockAddress): Promise<MsgUnblockAddressResponse>;
    /** SetPauseStatus message type used to pause or unpause status */
    SetPauseStatus(request: MsgSetPauseStatus): Promise<MsgSetPauseStatusResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    IssueTokens(request: MsgIssueTokens): Promise<MsgIssueTokensResponse>;
    RedeemTokens(request: MsgRedeemTokens): Promise<MsgRedeemTokensResponse>;
    BlockAddress(request: MsgBlockAddress): Promise<MsgBlockAddressResponse>;
    UnblockAddress(request: MsgUnblockAddress): Promise<MsgUnblockAddressResponse>;
    SetPauseStatus(request: MsgSetPauseStatus): Promise<MsgSetPauseStatusResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
