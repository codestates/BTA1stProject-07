"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgWithdrawBurnUndelegateResponse = exports.MsgWithdrawBurnUndelegate = exports.MsgWithdrawBurnResponse = exports.MsgWithdrawBurn = exports.MsgDelegateMintDepositResponse = exports.MsgDelegateMintDeposit = exports.MsgMintDepositResponse = exports.MsgMintDeposit = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.router.v1beta1';
function createBaseMsgMintDeposit() {
    return { depositor: '', validator: '', amount: undefined };
}
exports.MsgMintDeposit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.validator !== '') {
            writer.uint32(18).string(message.validator);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgMintDeposit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            validator: isSet(object.validator) ? String(object.validator) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.validator !== undefined && (obj.validator = message.validator);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgMintDeposit();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.validator = (_b = object.validator) !== null && _b !== void 0 ? _b : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseMsgMintDepositResponse() {
    return {};
}
exports.MsgMintDepositResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgMintDepositResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgMintDepositResponse();
        return message;
    },
};
function createBaseMsgDelegateMintDeposit() {
    return { depositor: '', validator: '', amount: undefined };
}
exports.MsgDelegateMintDeposit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.validator !== '') {
            writer.uint32(18).string(message.validator);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDelegateMintDeposit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            validator: isSet(object.validator) ? String(object.validator) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.validator !== undefined && (obj.validator = message.validator);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgDelegateMintDeposit();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.validator = (_b = object.validator) !== null && _b !== void 0 ? _b : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseMsgDelegateMintDepositResponse() {
    return {};
}
exports.MsgDelegateMintDepositResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDelegateMintDepositResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgDelegateMintDepositResponse();
        return message;
    },
};
function createBaseMsgWithdrawBurn() {
    return { from: '', validator: '', amount: undefined };
}
exports.MsgWithdrawBurn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.validator !== '') {
            writer.uint32(18).string(message.validator);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawBurn();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            validator: isSet(object.validator) ? String(object.validator) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.validator !== undefined && (obj.validator = message.validator);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgWithdrawBurn();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.validator = (_b = object.validator) !== null && _b !== void 0 ? _b : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseMsgWithdrawBurnResponse() {
    return {};
}
exports.MsgWithdrawBurnResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawBurnResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgWithdrawBurnResponse();
        return message;
    },
};
function createBaseMsgWithdrawBurnUndelegate() {
    return { from: '', validator: '', amount: undefined };
}
exports.MsgWithdrawBurnUndelegate = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.validator !== '') {
            writer.uint32(18).string(message.validator);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawBurnUndelegate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            validator: isSet(object.validator) ? String(object.validator) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.validator !== undefined && (obj.validator = message.validator);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgWithdrawBurnUndelegate();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.validator = (_b = object.validator) !== null && _b !== void 0 ? _b : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseMsgWithdrawBurnUndelegateResponse() {
    return {};
}
exports.MsgWithdrawBurnUndelegateResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawBurnUndelegateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgWithdrawBurnUndelegateResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.MintDeposit = this.MintDeposit.bind(this);
        this.DelegateMintDeposit = this.DelegateMintDeposit.bind(this);
        this.WithdrawBurn = this.WithdrawBurn.bind(this);
        this.WithdrawBurnUndelegate = this.WithdrawBurnUndelegate.bind(this);
    }
    MsgClientImpl.prototype.MintDeposit = function (request) {
        var data = exports.MsgMintDeposit.encode(request).finish();
        var promise = this.rpc.request('kava.router.v1beta1.Msg', 'MintDeposit', data);
        return promise.then(function (data) {
            return exports.MsgMintDepositResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.DelegateMintDeposit = function (request) {
        var data = exports.MsgDelegateMintDeposit.encode(request).finish();
        var promise = this.rpc.request('kava.router.v1beta1.Msg', 'DelegateMintDeposit', data);
        return promise.then(function (data) {
            return exports.MsgDelegateMintDepositResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.WithdrawBurn = function (request) {
        var data = exports.MsgWithdrawBurn.encode(request).finish();
        var promise = this.rpc.request('kava.router.v1beta1.Msg', 'WithdrawBurn', data);
        return promise.then(function (data) {
            return exports.MsgWithdrawBurnResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.WithdrawBurnUndelegate = function (request) {
        var data = exports.MsgWithdrawBurnUndelegate.encode(request).finish();
        var promise = this.rpc.request('kava.router.v1beta1.Msg', 'WithdrawBurnUndelegate', data);
        return promise.then(function (data) {
            return exports.MsgWithdrawBurnUndelegateResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
