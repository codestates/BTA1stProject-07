import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.router.v1beta1";
/** MsgMintDeposit converts a delegation into staking derivatives and deposits it all into an earn vault. */
export interface MsgMintDeposit {
    /** depositor represents the owner of the delegation to convert */
    depositor: string;
    /** validator is the validator for the depositor's delegation */
    validator: string;
    /** amount is the delegation balance to convert */
    amount?: Coin;
}
/** MsgMintDepositResponse defines the Msg/MsgMintDeposit response type. */
export interface MsgMintDepositResponse {
}
/**
 * MsgDelegateMintDeposit delegates tokens to a validator, then converts them into staking derivatives,
 * then deposits to an earn vault.
 */
export interface MsgDelegateMintDeposit {
    /** depositor represents the owner of the tokens to delegate */
    depositor: string;
    /** validator is the address of the validator to delegate to */
    validator: string;
    /** amount is the tokens to delegate */
    amount?: Coin;
}
/** MsgDelegateMintDepositResponse defines the Msg/MsgDelegateMintDeposit response type. */
export interface MsgDelegateMintDepositResponse {
}
/** MsgWithdrawBurn removes staking derivatives from an earn vault and converts them back to a staking delegation. */
export interface MsgWithdrawBurn {
    /** from is the owner of the earn vault to withdraw from */
    from: string;
    /** validator is the address to select the derivative denom to withdraw */
    validator: string;
    /** amount is the staked token equivalent to withdraw */
    amount?: Coin;
}
/** MsgWithdrawBurnResponse defines the Msg/MsgWithdrawBurn response type. */
export interface MsgWithdrawBurnResponse {
}
/**
 * MsgWithdrawBurnUndelegate removes staking derivatives from an earn vault, converts them to a staking delegation,
 * then undelegates them from their validator.
 */
export interface MsgWithdrawBurnUndelegate {
    /** from is the owner of the earn vault to withdraw from */
    from: string;
    /** validator is the address to select the derivative denom to withdraw */
    validator: string;
    /** amount is the staked token equivalent to withdraw */
    amount?: Coin;
}
/** MsgWithdrawBurnUndelegateResponse defines the Msg/MsgWithdrawBurnUndelegate response type. */
export interface MsgWithdrawBurnUndelegateResponse {
}
export declare const MsgMintDeposit: {
    encode(message: MsgMintDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgMintDeposit;
    fromJSON(object: any): MsgMintDeposit;
    toJSON(message: MsgMintDeposit): unknown;
    fromPartial<I extends {
        depositor?: string | undefined;
        validator?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        depositor?: string | undefined;
        validator?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgMintDeposit>, never>>(object: I): MsgMintDeposit;
};
export declare const MsgMintDepositResponse: {
    encode(_: MsgMintDepositResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgMintDepositResponse;
    fromJSON(_: any): MsgMintDepositResponse;
    toJSON(_: MsgMintDepositResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgMintDepositResponse;
};
export declare const MsgDelegateMintDeposit: {
    encode(message: MsgDelegateMintDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDelegateMintDeposit;
    fromJSON(object: any): MsgDelegateMintDeposit;
    toJSON(message: MsgDelegateMintDeposit): unknown;
    fromPartial<I extends {
        depositor?: string | undefined;
        validator?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        depositor?: string | undefined;
        validator?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgDelegateMintDeposit>, never>>(object: I): MsgDelegateMintDeposit;
};
export declare const MsgDelegateMintDepositResponse: {
    encode(_: MsgDelegateMintDepositResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDelegateMintDepositResponse;
    fromJSON(_: any): MsgDelegateMintDepositResponse;
    toJSON(_: MsgDelegateMintDepositResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgDelegateMintDepositResponse;
};
export declare const MsgWithdrawBurn: {
    encode(message: MsgWithdrawBurn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdrawBurn;
    fromJSON(object: any): MsgWithdrawBurn;
    toJSON(message: MsgWithdrawBurn): unknown;
    fromPartial<I extends {
        from?: string | undefined;
        validator?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        from?: string | undefined;
        validator?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgWithdrawBurn>, never>>(object: I): MsgWithdrawBurn;
};
export declare const MsgWithdrawBurnResponse: {
    encode(_: MsgWithdrawBurnResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdrawBurnResponse;
    fromJSON(_: any): MsgWithdrawBurnResponse;
    toJSON(_: MsgWithdrawBurnResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgWithdrawBurnResponse;
};
export declare const MsgWithdrawBurnUndelegate: {
    encode(message: MsgWithdrawBurnUndelegate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdrawBurnUndelegate;
    fromJSON(object: any): MsgWithdrawBurnUndelegate;
    toJSON(message: MsgWithdrawBurnUndelegate): unknown;
    fromPartial<I extends {
        from?: string | undefined;
        validator?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        from?: string | undefined;
        validator?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgWithdrawBurnUndelegate>, never>>(object: I): MsgWithdrawBurnUndelegate;
};
export declare const MsgWithdrawBurnUndelegateResponse: {
    encode(_: MsgWithdrawBurnUndelegateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdrawBurnUndelegateResponse;
    fromJSON(_: any): MsgWithdrawBurnUndelegateResponse;
    toJSON(_: MsgWithdrawBurnUndelegateResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgWithdrawBurnUndelegateResponse;
};
/** Msg defines the router Msg service. */
export interface Msg {
    /** MintDeposit converts a delegation into staking derivatives and deposits it all into an earn vault. */
    MintDeposit(request: MsgMintDeposit): Promise<MsgMintDepositResponse>;
    /**
     * DelegateMintDeposit delegates tokens to a validator, then converts them into staking derivatives,
     * then deposits to an earn vault.
     */
    DelegateMintDeposit(request: MsgDelegateMintDeposit): Promise<MsgDelegateMintDepositResponse>;
    /** WithdrawBurn removes staking derivatives from an earn vault and converts them back to a staking delegation. */
    WithdrawBurn(request: MsgWithdrawBurn): Promise<MsgWithdrawBurnResponse>;
    /**
     * WithdrawBurnUndelegate removes staking derivatives from an earn vault, converts them to a staking delegation,
     * then undelegates them from their validator.
     */
    WithdrawBurnUndelegate(request: MsgWithdrawBurnUndelegate): Promise<MsgWithdrawBurnUndelegateResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    MintDeposit(request: MsgMintDeposit): Promise<MsgMintDepositResponse>;
    DelegateMintDeposit(request: MsgDelegateMintDeposit): Promise<MsgDelegateMintDepositResponse>;
    WithdrawBurn(request: MsgWithdrawBurn): Promise<MsgWithdrawBurnResponse>;
    WithdrawBurnUndelegate(request: MsgWithdrawBurnUndelegate): Promise<MsgWithdrawBurnUndelegateResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
