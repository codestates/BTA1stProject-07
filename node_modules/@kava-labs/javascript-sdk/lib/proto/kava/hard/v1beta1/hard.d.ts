import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.hard.v1beta1";
/** Params defines the parameters for the hard module. */
export interface Params {
    moneyMarkets: MoneyMarket[];
    minimumBorrowUsdValue: string;
}
/** MoneyMarket is a money market for an individual asset. */
export interface MoneyMarket {
    denom: string;
    borrowLimit?: BorrowLimit;
    spotMarketId: string;
    conversionFactor: string;
    interestRateModel?: InterestRateModel;
    reserveFactor: string;
    keeperRewardPercentage: string;
}
/** BorrowLimit enforces restrictions on a money market. */
export interface BorrowLimit {
    hasMaxLimit: boolean;
    maximumLimit: string;
    loanToValue: string;
}
/** InterestRateModel contains information about an asset's interest rate. */
export interface InterestRateModel {
    baseRateApy: string;
    baseMultiplier: string;
    kink: string;
    jumpMultiplier: string;
}
/** Deposit defines an amount of coins deposited into a hard module account. */
export interface Deposit {
    depositor: string;
    amount: Coin[];
    index: SupplyInterestFactor[];
}
/** Borrow defines an amount of coins borrowed from a hard module account. */
export interface Borrow {
    borrower: string;
    amount: Coin[];
    index: BorrowInterestFactor[];
}
/** SupplyInterestFactor defines an individual borrow interest factor. */
export interface SupplyInterestFactor {
    denom: string;
    value: string;
}
/** BorrowInterestFactor defines an individual borrow interest factor. */
export interface BorrowInterestFactor {
    denom: string;
    value: string;
}
/** CoinsProto defines a Protobuf wrapper around a Coins slice */
export interface CoinsProto {
    coins: Coin[];
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        moneyMarkets?: {
            denom?: string | undefined;
            borrowLimit?: {
                hasMaxLimit?: boolean | undefined;
                maximumLimit?: string | undefined;
                loanToValue?: string | undefined;
            } | undefined;
            spotMarketId?: string | undefined;
            conversionFactor?: string | undefined;
            interestRateModel?: {
                baseRateApy?: string | undefined;
                baseMultiplier?: string | undefined;
                kink?: string | undefined;
                jumpMultiplier?: string | undefined;
            } | undefined;
            reserveFactor?: string | undefined;
            keeperRewardPercentage?: string | undefined;
        }[] | undefined;
        minimumBorrowUsdValue?: string | undefined;
    } & {
        moneyMarkets?: ({
            denom?: string | undefined;
            borrowLimit?: {
                hasMaxLimit?: boolean | undefined;
                maximumLimit?: string | undefined;
                loanToValue?: string | undefined;
            } | undefined;
            spotMarketId?: string | undefined;
            conversionFactor?: string | undefined;
            interestRateModel?: {
                baseRateApy?: string | undefined;
                baseMultiplier?: string | undefined;
                kink?: string | undefined;
                jumpMultiplier?: string | undefined;
            } | undefined;
            reserveFactor?: string | undefined;
            keeperRewardPercentage?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            borrowLimit?: {
                hasMaxLimit?: boolean | undefined;
                maximumLimit?: string | undefined;
                loanToValue?: string | undefined;
            } | undefined;
            spotMarketId?: string | undefined;
            conversionFactor?: string | undefined;
            interestRateModel?: {
                baseRateApy?: string | undefined;
                baseMultiplier?: string | undefined;
                kink?: string | undefined;
                jumpMultiplier?: string | undefined;
            } | undefined;
            reserveFactor?: string | undefined;
            keeperRewardPercentage?: string | undefined;
        } & {
            denom?: string | undefined;
            borrowLimit?: ({
                hasMaxLimit?: boolean | undefined;
                maximumLimit?: string | undefined;
                loanToValue?: string | undefined;
            } & {
                hasMaxLimit?: boolean | undefined;
                maximumLimit?: string | undefined;
                loanToValue?: string | undefined;
            } & Record<Exclude<keyof I["moneyMarkets"][number]["borrowLimit"], keyof BorrowLimit>, never>) | undefined;
            spotMarketId?: string | undefined;
            conversionFactor?: string | undefined;
            interestRateModel?: ({
                baseRateApy?: string | undefined;
                baseMultiplier?: string | undefined;
                kink?: string | undefined;
                jumpMultiplier?: string | undefined;
            } & {
                baseRateApy?: string | undefined;
                baseMultiplier?: string | undefined;
                kink?: string | undefined;
                jumpMultiplier?: string | undefined;
            } & Record<Exclude<keyof I["moneyMarkets"][number]["interestRateModel"], keyof InterestRateModel>, never>) | undefined;
            reserveFactor?: string | undefined;
            keeperRewardPercentage?: string | undefined;
        } & Record<Exclude<keyof I["moneyMarkets"][number], keyof MoneyMarket>, never>)[] & Record<Exclude<keyof I["moneyMarkets"], keyof {
            denom?: string | undefined;
            borrowLimit?: {
                hasMaxLimit?: boolean | undefined;
                maximumLimit?: string | undefined;
                loanToValue?: string | undefined;
            } | undefined;
            spotMarketId?: string | undefined;
            conversionFactor?: string | undefined;
            interestRateModel?: {
                baseRateApy?: string | undefined;
                baseMultiplier?: string | undefined;
                kink?: string | undefined;
                jumpMultiplier?: string | undefined;
            } | undefined;
            reserveFactor?: string | undefined;
            keeperRewardPercentage?: string | undefined;
        }[]>, never>) | undefined;
        minimumBorrowUsdValue?: string | undefined;
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
};
export declare const MoneyMarket: {
    encode(message: MoneyMarket, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MoneyMarket;
    fromJSON(object: any): MoneyMarket;
    toJSON(message: MoneyMarket): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        borrowLimit?: {
            hasMaxLimit?: boolean | undefined;
            maximumLimit?: string | undefined;
            loanToValue?: string | undefined;
        } | undefined;
        spotMarketId?: string | undefined;
        conversionFactor?: string | undefined;
        interestRateModel?: {
            baseRateApy?: string | undefined;
            baseMultiplier?: string | undefined;
            kink?: string | undefined;
            jumpMultiplier?: string | undefined;
        } | undefined;
        reserveFactor?: string | undefined;
        keeperRewardPercentage?: string | undefined;
    } & {
        denom?: string | undefined;
        borrowLimit?: ({
            hasMaxLimit?: boolean | undefined;
            maximumLimit?: string | undefined;
            loanToValue?: string | undefined;
        } & {
            hasMaxLimit?: boolean | undefined;
            maximumLimit?: string | undefined;
            loanToValue?: string | undefined;
        } & Record<Exclude<keyof I["borrowLimit"], keyof BorrowLimit>, never>) | undefined;
        spotMarketId?: string | undefined;
        conversionFactor?: string | undefined;
        interestRateModel?: ({
            baseRateApy?: string | undefined;
            baseMultiplier?: string | undefined;
            kink?: string | undefined;
            jumpMultiplier?: string | undefined;
        } & {
            baseRateApy?: string | undefined;
            baseMultiplier?: string | undefined;
            kink?: string | undefined;
            jumpMultiplier?: string | undefined;
        } & Record<Exclude<keyof I["interestRateModel"], keyof InterestRateModel>, never>) | undefined;
        reserveFactor?: string | undefined;
        keeperRewardPercentage?: string | undefined;
    } & Record<Exclude<keyof I, keyof MoneyMarket>, never>>(object: I): MoneyMarket;
};
export declare const BorrowLimit: {
    encode(message: BorrowLimit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BorrowLimit;
    fromJSON(object: any): BorrowLimit;
    toJSON(message: BorrowLimit): unknown;
    fromPartial<I extends {
        hasMaxLimit?: boolean | undefined;
        maximumLimit?: string | undefined;
        loanToValue?: string | undefined;
    } & {
        hasMaxLimit?: boolean | undefined;
        maximumLimit?: string | undefined;
        loanToValue?: string | undefined;
    } & Record<Exclude<keyof I, keyof BorrowLimit>, never>>(object: I): BorrowLimit;
};
export declare const InterestRateModel: {
    encode(message: InterestRateModel, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InterestRateModel;
    fromJSON(object: any): InterestRateModel;
    toJSON(message: InterestRateModel): unknown;
    fromPartial<I extends {
        baseRateApy?: string | undefined;
        baseMultiplier?: string | undefined;
        kink?: string | undefined;
        jumpMultiplier?: string | undefined;
    } & {
        baseRateApy?: string | undefined;
        baseMultiplier?: string | undefined;
        kink?: string | undefined;
        jumpMultiplier?: string | undefined;
    } & Record<Exclude<keyof I, keyof InterestRateModel>, never>>(object: I): InterestRateModel;
};
export declare const Deposit: {
    encode(message: Deposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Deposit;
    fromJSON(object: any): Deposit;
    toJSON(message: Deposit): unknown;
    fromPartial<I extends {
        depositor?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        index?: {
            denom?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        depositor?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["amount"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
        index?: ({
            denom?: string | undefined;
            value?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            value?: string | undefined;
        } & {
            denom?: string | undefined;
            value?: string | undefined;
        } & Record<Exclude<keyof I["index"][number], keyof SupplyInterestFactor>, never>)[] & Record<Exclude<keyof I["index"], keyof {
            denom?: string | undefined;
            value?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Deposit>, never>>(object: I): Deposit;
};
export declare const Borrow: {
    encode(message: Borrow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Borrow;
    fromJSON(object: any): Borrow;
    toJSON(message: Borrow): unknown;
    fromPartial<I extends {
        borrower?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        index?: {
            denom?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        borrower?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["amount"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
        index?: ({
            denom?: string | undefined;
            value?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            value?: string | undefined;
        } & {
            denom?: string | undefined;
            value?: string | undefined;
        } & Record<Exclude<keyof I["index"][number], keyof BorrowInterestFactor>, never>)[] & Record<Exclude<keyof I["index"], keyof {
            denom?: string | undefined;
            value?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Borrow>, never>>(object: I): Borrow;
};
export declare const SupplyInterestFactor: {
    encode(message: SupplyInterestFactor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SupplyInterestFactor;
    fromJSON(object: any): SupplyInterestFactor;
    toJSON(message: SupplyInterestFactor): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        value?: string | undefined;
    } & {
        denom?: string | undefined;
        value?: string | undefined;
    } & Record<Exclude<keyof I, keyof SupplyInterestFactor>, never>>(object: I): SupplyInterestFactor;
};
export declare const BorrowInterestFactor: {
    encode(message: BorrowInterestFactor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BorrowInterestFactor;
    fromJSON(object: any): BorrowInterestFactor;
    toJSON(message: BorrowInterestFactor): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        value?: string | undefined;
    } & {
        denom?: string | undefined;
        value?: string | undefined;
    } & Record<Exclude<keyof I, keyof BorrowInterestFactor>, never>>(object: I): BorrowInterestFactor;
};
export declare const CoinsProto: {
    encode(message: CoinsProto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CoinsProto;
    fromJSON(object: any): CoinsProto;
    toJSON(message: CoinsProto): unknown;
    fromPartial<I extends {
        coins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        coins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["coins"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["coins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "coins">, never>>(object: I): CoinsProto;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
