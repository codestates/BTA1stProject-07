import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.auction.v1beta1";
/** BaseAuction defines common attributes of all auctions */
export interface BaseAuction {
    id: Long;
    initiator: string;
    lot?: Coin;
    bidder: Uint8Array;
    bid?: Coin;
    hasReceivedBids: boolean;
    endTime?: Date;
    maxEndTime?: Date;
}
/**
 * SurplusAuction is a forward auction that burns what it receives from bids.
 * It is normally used to sell off excess pegged asset acquired by the CDP system.
 */
export interface SurplusAuction {
    baseAuction?: BaseAuction;
}
/**
 * DebtAuction is a reverse auction that mints what it pays out.
 * It is normally used to acquire pegged asset to cover the CDP system's debts that were not covered by selling
 * collateral.
 */
export interface DebtAuction {
    baseAuction?: BaseAuction;
    correspondingDebt?: Coin;
}
/**
 * CollateralAuction is a two phase auction.
 * Initially, in forward auction phase, bids can be placed up to a max bid.
 * Then it switches to a reverse auction phase, where the initial amount up for auction is bid down.
 * Unsold Lot is sent to LotReturns, being divided among the addresses by weight.
 * Collateral auctions are normally used to sell off collateral seized from CDPs.
 */
export interface CollateralAuction {
    baseAuction?: BaseAuction;
    correspondingDebt?: Coin;
    maxBid?: Coin;
    lotReturns?: WeightedAddresses;
}
/** WeightedAddresses is a type for storing some addresses and associated weights. */
export interface WeightedAddresses {
    addresses: Uint8Array[];
    weights: Uint8Array[];
}
export declare const BaseAuction: {
    encode(message: BaseAuction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BaseAuction;
    fromJSON(object: any): BaseAuction;
    toJSON(message: BaseAuction): unknown;
    fromPartial<I extends {
        id?: string | number | Long | undefined;
        initiator?: string | undefined;
        lot?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        bidder?: Uint8Array | undefined;
        bid?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        hasReceivedBids?: boolean | undefined;
        endTime?: Date | undefined;
        maxEndTime?: Date | undefined;
    } & {
        id?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & Record<Exclude<keyof I["id"], keyof Long>, never>) | undefined;
        initiator?: string | undefined;
        lot?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["lot"], keyof Coin>, never>) | undefined;
        bidder?: Uint8Array | undefined;
        bid?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["bid"], keyof Coin>, never>) | undefined;
        hasReceivedBids?: boolean | undefined;
        endTime?: Date | undefined;
        maxEndTime?: Date | undefined;
    } & Record<Exclude<keyof I, keyof BaseAuction>, never>>(object: I): BaseAuction;
};
export declare const SurplusAuction: {
    encode(message: SurplusAuction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SurplusAuction;
    fromJSON(object: any): SurplusAuction;
    toJSON(message: SurplusAuction): unknown;
    fromPartial<I extends {
        baseAuction?: {
            id?: string | number | Long | undefined;
            initiator?: string | undefined;
            lot?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            bidder?: Uint8Array | undefined;
            bid?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } | undefined;
    } & {
        baseAuction?: ({
            id?: string | number | Long | undefined;
            initiator?: string | undefined;
            lot?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            bidder?: Uint8Array | undefined;
            bid?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } & {
            id?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["baseAuction"]["id"], keyof Long>, never>) | undefined;
            initiator?: string | undefined;
            lot?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseAuction"]["lot"], keyof Coin>, never>) | undefined;
            bidder?: Uint8Array | undefined;
            bid?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseAuction"]["bid"], keyof Coin>, never>) | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } & Record<Exclude<keyof I["baseAuction"], keyof BaseAuction>, never>) | undefined;
    } & Record<Exclude<keyof I, "baseAuction">, never>>(object: I): SurplusAuction;
};
export declare const DebtAuction: {
    encode(message: DebtAuction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DebtAuction;
    fromJSON(object: any): DebtAuction;
    toJSON(message: DebtAuction): unknown;
    fromPartial<I extends {
        baseAuction?: {
            id?: string | number | Long | undefined;
            initiator?: string | undefined;
            lot?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            bidder?: Uint8Array | undefined;
            bid?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } | undefined;
        correspondingDebt?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        baseAuction?: ({
            id?: string | number | Long | undefined;
            initiator?: string | undefined;
            lot?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            bidder?: Uint8Array | undefined;
            bid?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } & {
            id?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["baseAuction"]["id"], keyof Long>, never>) | undefined;
            initiator?: string | undefined;
            lot?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseAuction"]["lot"], keyof Coin>, never>) | undefined;
            bidder?: Uint8Array | undefined;
            bid?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseAuction"]["bid"], keyof Coin>, never>) | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } & Record<Exclude<keyof I["baseAuction"], keyof BaseAuction>, never>) | undefined;
        correspondingDebt?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["correspondingDebt"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof DebtAuction>, never>>(object: I): DebtAuction;
};
export declare const CollateralAuction: {
    encode(message: CollateralAuction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CollateralAuction;
    fromJSON(object: any): CollateralAuction;
    toJSON(message: CollateralAuction): unknown;
    fromPartial<I extends {
        baseAuction?: {
            id?: string | number | Long | undefined;
            initiator?: string | undefined;
            lot?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            bidder?: Uint8Array | undefined;
            bid?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } | undefined;
        correspondingDebt?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        maxBid?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        lotReturns?: {
            addresses?: Uint8Array[] | undefined;
            weights?: Uint8Array[] | undefined;
        } | undefined;
    } & {
        baseAuction?: ({
            id?: string | number | Long | undefined;
            initiator?: string | undefined;
            lot?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            bidder?: Uint8Array | undefined;
            bid?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } & {
            id?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["baseAuction"]["id"], keyof Long>, never>) | undefined;
            initiator?: string | undefined;
            lot?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseAuction"]["lot"], keyof Coin>, never>) | undefined;
            bidder?: Uint8Array | undefined;
            bid?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["baseAuction"]["bid"], keyof Coin>, never>) | undefined;
            hasReceivedBids?: boolean | undefined;
            endTime?: Date | undefined;
            maxEndTime?: Date | undefined;
        } & Record<Exclude<keyof I["baseAuction"], keyof BaseAuction>, never>) | undefined;
        correspondingDebt?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["correspondingDebt"], keyof Coin>, never>) | undefined;
        maxBid?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["maxBid"], keyof Coin>, never>) | undefined;
        lotReturns?: ({
            addresses?: Uint8Array[] | undefined;
            weights?: Uint8Array[] | undefined;
        } & {
            addresses?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["lotReturns"]["addresses"], keyof Uint8Array[]>, never>) | undefined;
            weights?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["lotReturns"]["weights"], keyof Uint8Array[]>, never>) | undefined;
        } & Record<Exclude<keyof I["lotReturns"], keyof WeightedAddresses>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CollateralAuction>, never>>(object: I): CollateralAuction;
};
export declare const WeightedAddresses: {
    encode(message: WeightedAddresses, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): WeightedAddresses;
    fromJSON(object: any): WeightedAddresses;
    toJSON(message: WeightedAddresses): unknown;
    fromPartial<I extends {
        addresses?: Uint8Array[] | undefined;
        weights?: Uint8Array[] | undefined;
    } & {
        addresses?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["addresses"], keyof Uint8Array[]>, never>) | undefined;
        weights?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["weights"], keyof Uint8Array[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof WeightedAddresses>, never>>(object: I): WeightedAddresses;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
