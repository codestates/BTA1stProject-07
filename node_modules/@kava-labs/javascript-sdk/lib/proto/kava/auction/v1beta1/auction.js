"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeightedAddresses = exports.CollateralAuction = exports.DebtAuction = exports.SurplusAuction = exports.BaseAuction = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = 'kava.auction.v1beta1';
function createBaseBaseAuction() {
    return {
        id: long_1.default.UZERO,
        initiator: '',
        lot: undefined,
        bidder: new Uint8Array(),
        bid: undefined,
        hasReceivedBids: false,
        endTime: undefined,
        maxEndTime: undefined,
    };
}
exports.BaseAuction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.initiator !== '') {
            writer.uint32(18).string(message.initiator);
        }
        if (message.lot !== undefined) {
            coin_1.Coin.encode(message.lot, writer.uint32(26).fork()).ldelim();
        }
        if (message.bidder.length !== 0) {
            writer.uint32(34).bytes(message.bidder);
        }
        if (message.bid !== undefined) {
            coin_1.Coin.encode(message.bid, writer.uint32(42).fork()).ldelim();
        }
        if (message.hasReceivedBids === true) {
            writer.uint32(48).bool(message.hasReceivedBids);
        }
        if (message.endTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(58).fork()).ldelim();
        }
        if (message.maxEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.maxEndTime), writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBaseAuction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.initiator = reader.string();
                    break;
                case 3:
                    message.lot = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.bidder = reader.bytes();
                    break;
                case 5:
                    message.bid = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.hasReceivedBids = reader.bool();
                    break;
                case 7:
                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.maxEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? long_1.default.fromString(object.id) : long_1.default.UZERO,
            initiator: isSet(object.initiator) ? String(object.initiator) : '',
            lot: isSet(object.lot) ? coin_1.Coin.fromJSON(object.lot) : undefined,
            bidder: isSet(object.bidder)
                ? bytesFromBase64(object.bidder)
                : new Uint8Array(),
            bid: isSet(object.bid) ? coin_1.Coin.fromJSON(object.bid) : undefined,
            hasReceivedBids: isSet(object.hasReceivedBids)
                ? Boolean(object.hasReceivedBids)
                : false,
            endTime: isSet(object.endTime)
                ? fromJsonTimestamp(object.endTime)
                : undefined,
            maxEndTime: isSet(object.maxEndTime)
                ? fromJsonTimestamp(object.maxEndTime)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined &&
            (obj.id = (message.id || long_1.default.UZERO).toString());
        message.initiator !== undefined && (obj.initiator = message.initiator);
        message.lot !== undefined &&
            (obj.lot = message.lot ? coin_1.Coin.toJSON(message.lot) : undefined);
        message.bidder !== undefined &&
            (obj.bidder = base64FromBytes(message.bidder !== undefined ? message.bidder : new Uint8Array()));
        message.bid !== undefined &&
            (obj.bid = message.bid ? coin_1.Coin.toJSON(message.bid) : undefined);
        message.hasReceivedBids !== undefined &&
            (obj.hasReceivedBids = message.hasReceivedBids);
        message.endTime !== undefined &&
            (obj.endTime = message.endTime.toISOString());
        message.maxEndTime !== undefined &&
            (obj.maxEndTime = message.maxEndTime.toISOString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseBaseAuction();
        message.id =
            object.id !== undefined && object.id !== null
                ? long_1.default.fromValue(object.id)
                : long_1.default.UZERO;
        message.initiator = (_a = object.initiator) !== null && _a !== void 0 ? _a : '';
        message.lot =
            object.lot !== undefined && object.lot !== null
                ? coin_1.Coin.fromPartial(object.lot)
                : undefined;
        message.bidder = (_b = object.bidder) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.bid =
            object.bid !== undefined && object.bid !== null
                ? coin_1.Coin.fromPartial(object.bid)
                : undefined;
        message.hasReceivedBids = (_c = object.hasReceivedBids) !== null && _c !== void 0 ? _c : false;
        message.endTime = (_d = object.endTime) !== null && _d !== void 0 ? _d : undefined;
        message.maxEndTime = (_e = object.maxEndTime) !== null && _e !== void 0 ? _e : undefined;
        return message;
    },
};
function createBaseSurplusAuction() {
    return { baseAuction: undefined };
}
exports.SurplusAuction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseAuction !== undefined) {
            exports.BaseAuction.encode(message.baseAuction, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSurplusAuction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseAuction = exports.BaseAuction.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseAuction: isSet(object.baseAuction)
                ? exports.BaseAuction.fromJSON(object.baseAuction)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseAuction !== undefined &&
            (obj.baseAuction = message.baseAuction
                ? exports.BaseAuction.toJSON(message.baseAuction)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseSurplusAuction();
        message.baseAuction =
            object.baseAuction !== undefined && object.baseAuction !== null
                ? exports.BaseAuction.fromPartial(object.baseAuction)
                : undefined;
        return message;
    },
};
function createBaseDebtAuction() {
    return { baseAuction: undefined, correspondingDebt: undefined };
}
exports.DebtAuction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseAuction !== undefined) {
            exports.BaseAuction.encode(message.baseAuction, writer.uint32(10).fork()).ldelim();
        }
        if (message.correspondingDebt !== undefined) {
            coin_1.Coin.encode(message.correspondingDebt, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDebtAuction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseAuction = exports.BaseAuction.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.correspondingDebt = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseAuction: isSet(object.baseAuction)
                ? exports.BaseAuction.fromJSON(object.baseAuction)
                : undefined,
            correspondingDebt: isSet(object.correspondingDebt)
                ? coin_1.Coin.fromJSON(object.correspondingDebt)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseAuction !== undefined &&
            (obj.baseAuction = message.baseAuction
                ? exports.BaseAuction.toJSON(message.baseAuction)
                : undefined);
        message.correspondingDebt !== undefined &&
            (obj.correspondingDebt = message.correspondingDebt
                ? coin_1.Coin.toJSON(message.correspondingDebt)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseDebtAuction();
        message.baseAuction =
            object.baseAuction !== undefined && object.baseAuction !== null
                ? exports.BaseAuction.fromPartial(object.baseAuction)
                : undefined;
        message.correspondingDebt =
            object.correspondingDebt !== undefined &&
                object.correspondingDebt !== null
                ? coin_1.Coin.fromPartial(object.correspondingDebt)
                : undefined;
        return message;
    },
};
function createBaseCollateralAuction() {
    return {
        baseAuction: undefined,
        correspondingDebt: undefined,
        maxBid: undefined,
        lotReturns: undefined,
    };
}
exports.CollateralAuction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.baseAuction !== undefined) {
            exports.BaseAuction.encode(message.baseAuction, writer.uint32(10).fork()).ldelim();
        }
        if (message.correspondingDebt !== undefined) {
            coin_1.Coin.encode(message.correspondingDebt, writer.uint32(18).fork()).ldelim();
        }
        if (message.maxBid !== undefined) {
            coin_1.Coin.encode(message.maxBid, writer.uint32(26).fork()).ldelim();
        }
        if (message.lotReturns !== undefined) {
            exports.WeightedAddresses.encode(message.lotReturns, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCollateralAuction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseAuction = exports.BaseAuction.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.correspondingDebt = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.maxBid = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.lotReturns = exports.WeightedAddresses.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            baseAuction: isSet(object.baseAuction)
                ? exports.BaseAuction.fromJSON(object.baseAuction)
                : undefined,
            correspondingDebt: isSet(object.correspondingDebt)
                ? coin_1.Coin.fromJSON(object.correspondingDebt)
                : undefined,
            maxBid: isSet(object.maxBid) ? coin_1.Coin.fromJSON(object.maxBid) : undefined,
            lotReturns: isSet(object.lotReturns)
                ? exports.WeightedAddresses.fromJSON(object.lotReturns)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.baseAuction !== undefined &&
            (obj.baseAuction = message.baseAuction
                ? exports.BaseAuction.toJSON(message.baseAuction)
                : undefined);
        message.correspondingDebt !== undefined &&
            (obj.correspondingDebt = message.correspondingDebt
                ? coin_1.Coin.toJSON(message.correspondingDebt)
                : undefined);
        message.maxBid !== undefined &&
            (obj.maxBid = message.maxBid ? coin_1.Coin.toJSON(message.maxBid) : undefined);
        message.lotReturns !== undefined &&
            (obj.lotReturns = message.lotReturns
                ? exports.WeightedAddresses.toJSON(message.lotReturns)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseCollateralAuction();
        message.baseAuction =
            object.baseAuction !== undefined && object.baseAuction !== null
                ? exports.BaseAuction.fromPartial(object.baseAuction)
                : undefined;
        message.correspondingDebt =
            object.correspondingDebt !== undefined &&
                object.correspondingDebt !== null
                ? coin_1.Coin.fromPartial(object.correspondingDebt)
                : undefined;
        message.maxBid =
            object.maxBid !== undefined && object.maxBid !== null
                ? coin_1.Coin.fromPartial(object.maxBid)
                : undefined;
        message.lotReturns =
            object.lotReturns !== undefined && object.lotReturns !== null
                ? exports.WeightedAddresses.fromPartial(object.lotReturns)
                : undefined;
        return message;
    },
};
function createBaseWeightedAddresses() {
    return { addresses: [], weights: [] };
}
exports.WeightedAddresses = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _c = __values(message.addresses), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                writer.uint32(10).bytes(v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = __values(message.weights), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                writer.uint32(18).bytes(v);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseWeightedAddresses();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.addresses.push(reader.bytes());
                    break;
                case 2:
                    message.weights.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            addresses: Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map(function (e) { return bytesFromBase64(e); })
                : [],
            weights: Array.isArray(object === null || object === void 0 ? void 0 : object.weights)
                ? object.weights.map(function (e) { return bytesFromBase64(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.addresses) {
            obj.addresses = message.addresses.map(function (e) {
                return base64FromBytes(e !== undefined ? e : new Uint8Array());
            });
        }
        else {
            obj.addresses = [];
        }
        if (message.weights) {
            obj.weights = message.weights.map(function (e) {
                return base64FromBytes(e !== undefined ? e : new Uint8Array());
            });
        }
        else {
            obj.weights = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseWeightedAddresses();
        message.addresses = ((_a = object.addresses) === null || _a === void 0 ? void 0 : _a.map(function (e) { return e; })) || [];
        message.weights = ((_b = object.weights) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_3, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return btoa(bin.join(''));
}
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
