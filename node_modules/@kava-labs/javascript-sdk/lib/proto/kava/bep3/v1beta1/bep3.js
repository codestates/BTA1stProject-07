"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetSupply = exports.AtomicSwap = exports.SupplyLimit = exports.AssetParam = exports.Params = exports.swapDirectionToJSON = exports.swapDirectionFromJSON = exports.SwapDirection = exports.swapStatusToJSON = exports.swapStatusFromJSON = exports.SwapStatus = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var duration_1 = require("../../../google/protobuf/duration");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.bep3.v1beta1';
/** SwapStatus is the status of an AtomicSwap */
var SwapStatus;
(function (SwapStatus) {
    /** SWAP_STATUS_UNSPECIFIED - SWAP_STATUS_UNSPECIFIED represents an unspecified status */
    SwapStatus[SwapStatus["SWAP_STATUS_UNSPECIFIED"] = 0] = "SWAP_STATUS_UNSPECIFIED";
    /** SWAP_STATUS_OPEN - SWAP_STATUS_OPEN represents an open swap */
    SwapStatus[SwapStatus["SWAP_STATUS_OPEN"] = 1] = "SWAP_STATUS_OPEN";
    /** SWAP_STATUS_COMPLETED - SWAP_STATUS_COMPLETED represents a completed swap */
    SwapStatus[SwapStatus["SWAP_STATUS_COMPLETED"] = 2] = "SWAP_STATUS_COMPLETED";
    /** SWAP_STATUS_EXPIRED - SWAP_STATUS_EXPIRED represents an expired swap */
    SwapStatus[SwapStatus["SWAP_STATUS_EXPIRED"] = 3] = "SWAP_STATUS_EXPIRED";
    SwapStatus[SwapStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SwapStatus = exports.SwapStatus || (exports.SwapStatus = {}));
function swapStatusFromJSON(object) {
    switch (object) {
        case 0:
        case 'SWAP_STATUS_UNSPECIFIED':
            return SwapStatus.SWAP_STATUS_UNSPECIFIED;
        case 1:
        case 'SWAP_STATUS_OPEN':
            return SwapStatus.SWAP_STATUS_OPEN;
        case 2:
        case 'SWAP_STATUS_COMPLETED':
            return SwapStatus.SWAP_STATUS_COMPLETED;
        case 3:
        case 'SWAP_STATUS_EXPIRED':
            return SwapStatus.SWAP_STATUS_EXPIRED;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return SwapStatus.UNRECOGNIZED;
    }
}
exports.swapStatusFromJSON = swapStatusFromJSON;
function swapStatusToJSON(object) {
    switch (object) {
        case SwapStatus.SWAP_STATUS_UNSPECIFIED:
            return 'SWAP_STATUS_UNSPECIFIED';
        case SwapStatus.SWAP_STATUS_OPEN:
            return 'SWAP_STATUS_OPEN';
        case SwapStatus.SWAP_STATUS_COMPLETED:
            return 'SWAP_STATUS_COMPLETED';
        case SwapStatus.SWAP_STATUS_EXPIRED:
            return 'SWAP_STATUS_EXPIRED';
        default:
            return 'UNKNOWN';
    }
}
exports.swapStatusToJSON = swapStatusToJSON;
/** SwapDirection is the direction of an AtomicSwap */
var SwapDirection;
(function (SwapDirection) {
    /** SWAP_DIRECTION_UNSPECIFIED - SWAP_DIRECTION_UNSPECIFIED represents unspecified or invalid swap direcation */
    SwapDirection[SwapDirection["SWAP_DIRECTION_UNSPECIFIED"] = 0] = "SWAP_DIRECTION_UNSPECIFIED";
    /** SWAP_DIRECTION_INCOMING - SWAP_DIRECTION_INCOMING represents is incoming swap (to the kava chain) */
    SwapDirection[SwapDirection["SWAP_DIRECTION_INCOMING"] = 1] = "SWAP_DIRECTION_INCOMING";
    /** SWAP_DIRECTION_OUTGOING - SWAP_DIRECTION_OUTGOING represents an outgoing swap (from the kava chain) */
    SwapDirection[SwapDirection["SWAP_DIRECTION_OUTGOING"] = 2] = "SWAP_DIRECTION_OUTGOING";
    SwapDirection[SwapDirection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SwapDirection = exports.SwapDirection || (exports.SwapDirection = {}));
function swapDirectionFromJSON(object) {
    switch (object) {
        case 0:
        case 'SWAP_DIRECTION_UNSPECIFIED':
            return SwapDirection.SWAP_DIRECTION_UNSPECIFIED;
        case 1:
        case 'SWAP_DIRECTION_INCOMING':
            return SwapDirection.SWAP_DIRECTION_INCOMING;
        case 2:
        case 'SWAP_DIRECTION_OUTGOING':
            return SwapDirection.SWAP_DIRECTION_OUTGOING;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return SwapDirection.UNRECOGNIZED;
    }
}
exports.swapDirectionFromJSON = swapDirectionFromJSON;
function swapDirectionToJSON(object) {
    switch (object) {
        case SwapDirection.SWAP_DIRECTION_UNSPECIFIED:
            return 'SWAP_DIRECTION_UNSPECIFIED';
        case SwapDirection.SWAP_DIRECTION_INCOMING:
            return 'SWAP_DIRECTION_INCOMING';
        case SwapDirection.SWAP_DIRECTION_OUTGOING:
            return 'SWAP_DIRECTION_OUTGOING';
        default:
            return 'UNKNOWN';
    }
}
exports.swapDirectionToJSON = swapDirectionToJSON;
function createBaseParams() {
    return { assetParams: [] };
}
exports.Params = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.assetParams), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.AssetParam.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.assetParams.push(exports.AssetParam.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            assetParams: Array.isArray(object === null || object === void 0 ? void 0 : object.assetParams)
                ? object.assetParams.map(function (e) { return exports.AssetParam.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.assetParams) {
            obj.assetParams = message.assetParams.map(function (e) {
                return e ? exports.AssetParam.toJSON(e) : undefined;
            });
        }
        else {
            obj.assetParams = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseParams();
        message.assetParams =
            ((_a = object.assetParams) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.AssetParam.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseAssetParam() {
    return {
        denom: '',
        coinId: long_1.default.ZERO,
        supplyLimit: undefined,
        active: false,
        deputyAddress: new Uint8Array(),
        fixedFee: '',
        minSwapAmount: '',
        maxSwapAmount: '',
        minBlockLock: long_1.default.UZERO,
        maxBlockLock: long_1.default.UZERO,
    };
}
exports.AssetParam = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        if (!message.coinId.isZero()) {
            writer.uint32(16).int64(message.coinId);
        }
        if (message.supplyLimit !== undefined) {
            exports.SupplyLimit.encode(message.supplyLimit, writer.uint32(26).fork()).ldelim();
        }
        if (message.active === true) {
            writer.uint32(32).bool(message.active);
        }
        if (message.deputyAddress.length !== 0) {
            writer.uint32(42).bytes(message.deputyAddress);
        }
        if (message.fixedFee !== '') {
            writer.uint32(50).string(message.fixedFee);
        }
        if (message.minSwapAmount !== '') {
            writer.uint32(58).string(message.minSwapAmount);
        }
        if (message.maxSwapAmount !== '') {
            writer.uint32(66).string(message.maxSwapAmount);
        }
        if (!message.minBlockLock.isZero()) {
            writer.uint32(72).uint64(message.minBlockLock);
        }
        if (!message.maxBlockLock.isZero()) {
            writer.uint32(80).uint64(message.maxBlockLock);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAssetParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.coinId = reader.int64();
                    break;
                case 3:
                    message.supplyLimit = exports.SupplyLimit.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.active = reader.bool();
                    break;
                case 5:
                    message.deputyAddress = reader.bytes();
                    break;
                case 6:
                    message.fixedFee = reader.string();
                    break;
                case 7:
                    message.minSwapAmount = reader.string();
                    break;
                case 8:
                    message.maxSwapAmount = reader.string();
                    break;
                case 9:
                    message.minBlockLock = reader.uint64();
                    break;
                case 10:
                    message.maxBlockLock = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            coinId: isSet(object.coinId) ? long_1.default.fromString(object.coinId) : long_1.default.ZERO,
            supplyLimit: isSet(object.supplyLimit)
                ? exports.SupplyLimit.fromJSON(object.supplyLimit)
                : undefined,
            active: isSet(object.active) ? Boolean(object.active) : false,
            deputyAddress: isSet(object.deputyAddress)
                ? bytesFromBase64(object.deputyAddress)
                : new Uint8Array(),
            fixedFee: isSet(object.fixedFee) ? String(object.fixedFee) : '',
            minSwapAmount: isSet(object.minSwapAmount)
                ? String(object.minSwapAmount)
                : '',
            maxSwapAmount: isSet(object.maxSwapAmount)
                ? String(object.maxSwapAmount)
                : '',
            minBlockLock: isSet(object.minBlockLock)
                ? long_1.default.fromString(object.minBlockLock)
                : long_1.default.UZERO,
            maxBlockLock: isSet(object.maxBlockLock)
                ? long_1.default.fromString(object.maxBlockLock)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.coinId !== undefined &&
            (obj.coinId = (message.coinId || long_1.default.ZERO).toString());
        message.supplyLimit !== undefined &&
            (obj.supplyLimit = message.supplyLimit
                ? exports.SupplyLimit.toJSON(message.supplyLimit)
                : undefined);
        message.active !== undefined && (obj.active = message.active);
        message.deputyAddress !== undefined &&
            (obj.deputyAddress = base64FromBytes(message.deputyAddress !== undefined
                ? message.deputyAddress
                : new Uint8Array()));
        message.fixedFee !== undefined && (obj.fixedFee = message.fixedFee);
        message.minSwapAmount !== undefined &&
            (obj.minSwapAmount = message.minSwapAmount);
        message.maxSwapAmount !== undefined &&
            (obj.maxSwapAmount = message.maxSwapAmount);
        message.minBlockLock !== undefined &&
            (obj.minBlockLock = (message.minBlockLock || long_1.default.UZERO).toString());
        message.maxBlockLock !== undefined &&
            (obj.maxBlockLock = (message.maxBlockLock || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseAssetParam();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.coinId =
            object.coinId !== undefined && object.coinId !== null
                ? long_1.default.fromValue(object.coinId)
                : long_1.default.ZERO;
        message.supplyLimit =
            object.supplyLimit !== undefined && object.supplyLimit !== null
                ? exports.SupplyLimit.fromPartial(object.supplyLimit)
                : undefined;
        message.active = (_b = object.active) !== null && _b !== void 0 ? _b : false;
        message.deputyAddress = (_c = object.deputyAddress) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.fixedFee = (_d = object.fixedFee) !== null && _d !== void 0 ? _d : '';
        message.minSwapAmount = (_e = object.minSwapAmount) !== null && _e !== void 0 ? _e : '';
        message.maxSwapAmount = (_f = object.maxSwapAmount) !== null && _f !== void 0 ? _f : '';
        message.minBlockLock =
            object.minBlockLock !== undefined && object.minBlockLock !== null
                ? long_1.default.fromValue(object.minBlockLock)
                : long_1.default.UZERO;
        message.maxBlockLock =
            object.maxBlockLock !== undefined && object.maxBlockLock !== null
                ? long_1.default.fromValue(object.maxBlockLock)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseSupplyLimit() {
    return {
        limit: '',
        timeLimited: false,
        timePeriod: undefined,
        timeBasedLimit: '',
    };
}
exports.SupplyLimit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.limit !== '') {
            writer.uint32(10).string(message.limit);
        }
        if (message.timeLimited === true) {
            writer.uint32(16).bool(message.timeLimited);
        }
        if (message.timePeriod !== undefined) {
            duration_1.Duration.encode(message.timePeriod, writer.uint32(26).fork()).ldelim();
        }
        if (message.timeBasedLimit !== '') {
            writer.uint32(34).string(message.timeBasedLimit);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSupplyLimit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.limit = reader.string();
                    break;
                case 2:
                    message.timeLimited = reader.bool();
                    break;
                case 3:
                    message.timePeriod = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.timeBasedLimit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            limit: isSet(object.limit) ? String(object.limit) : '',
            timeLimited: isSet(object.timeLimited)
                ? Boolean(object.timeLimited)
                : false,
            timePeriod: isSet(object.timePeriod)
                ? duration_1.Duration.fromJSON(object.timePeriod)
                : undefined,
            timeBasedLimit: isSet(object.timeBasedLimit)
                ? String(object.timeBasedLimit)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.limit !== undefined && (obj.limit = message.limit);
        message.timeLimited !== undefined &&
            (obj.timeLimited = message.timeLimited);
        message.timePeriod !== undefined &&
            (obj.timePeriod = message.timePeriod
                ? duration_1.Duration.toJSON(message.timePeriod)
                : undefined);
        message.timeBasedLimit !== undefined &&
            (obj.timeBasedLimit = message.timeBasedLimit);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseSupplyLimit();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : '';
        message.timeLimited = (_b = object.timeLimited) !== null && _b !== void 0 ? _b : false;
        message.timePeriod =
            object.timePeriod !== undefined && object.timePeriod !== null
                ? duration_1.Duration.fromPartial(object.timePeriod)
                : undefined;
        message.timeBasedLimit = (_c = object.timeBasedLimit) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseAtomicSwap() {
    return {
        amount: [],
        randomNumberHash: new Uint8Array(),
        expireHeight: long_1.default.UZERO,
        timestamp: long_1.default.ZERO,
        sender: new Uint8Array(),
        recipient: new Uint8Array(),
        senderOtherChain: '',
        recipientOtherChain: '',
        closedBlock: long_1.default.ZERO,
        status: 0,
        crossChain: false,
        direction: 0,
    };
}
exports.AtomicSwap = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.amount), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.randomNumberHash.length !== 0) {
            writer.uint32(18).bytes(message.randomNumberHash);
        }
        if (!message.expireHeight.isZero()) {
            writer.uint32(24).uint64(message.expireHeight);
        }
        if (!message.timestamp.isZero()) {
            writer.uint32(32).int64(message.timestamp);
        }
        if (message.sender.length !== 0) {
            writer.uint32(42).bytes(message.sender);
        }
        if (message.recipient.length !== 0) {
            writer.uint32(50).bytes(message.recipient);
        }
        if (message.senderOtherChain !== '') {
            writer.uint32(58).string(message.senderOtherChain);
        }
        if (message.recipientOtherChain !== '') {
            writer.uint32(66).string(message.recipientOtherChain);
        }
        if (!message.closedBlock.isZero()) {
            writer.uint32(72).int64(message.closedBlock);
        }
        if (message.status !== 0) {
            writer.uint32(80).int32(message.status);
        }
        if (message.crossChain === true) {
            writer.uint32(88).bool(message.crossChain);
        }
        if (message.direction !== 0) {
            writer.uint32(96).int32(message.direction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAtomicSwap();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.randomNumberHash = reader.bytes();
                    break;
                case 3:
                    message.expireHeight = reader.uint64();
                    break;
                case 4:
                    message.timestamp = reader.int64();
                    break;
                case 5:
                    message.sender = reader.bytes();
                    break;
                case 6:
                    message.recipient = reader.bytes();
                    break;
                case 7:
                    message.senderOtherChain = reader.string();
                    break;
                case 8:
                    message.recipientOtherChain = reader.string();
                    break;
                case 9:
                    message.closedBlock = reader.int64();
                    break;
                case 10:
                    message.status = reader.int32();
                    break;
                case 11:
                    message.crossChain = reader.bool();
                    break;
                case 12:
                    message.direction = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)
                ? object.amount.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
            randomNumberHash: isSet(object.randomNumberHash)
                ? bytesFromBase64(object.randomNumberHash)
                : new Uint8Array(),
            expireHeight: isSet(object.expireHeight)
                ? long_1.default.fromString(object.expireHeight)
                : long_1.default.UZERO,
            timestamp: isSet(object.timestamp)
                ? long_1.default.fromString(object.timestamp)
                : long_1.default.ZERO,
            sender: isSet(object.sender)
                ? bytesFromBase64(object.sender)
                : new Uint8Array(),
            recipient: isSet(object.recipient)
                ? bytesFromBase64(object.recipient)
                : new Uint8Array(),
            senderOtherChain: isSet(object.senderOtherChain)
                ? String(object.senderOtherChain)
                : '',
            recipientOtherChain: isSet(object.recipientOtherChain)
                ? String(object.recipientOtherChain)
                : '',
            closedBlock: isSet(object.closedBlock)
                ? long_1.default.fromString(object.closedBlock)
                : long_1.default.ZERO,
            status: isSet(object.status) ? swapStatusFromJSON(object.status) : 0,
            crossChain: isSet(object.crossChain) ? Boolean(object.crossChain) : false,
            direction: isSet(object.direction)
                ? swapDirectionFromJSON(object.direction)
                : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.amount) {
            obj.amount = message.amount.map(function (e) { return (e ? coin_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.amount = [];
        }
        message.randomNumberHash !== undefined &&
            (obj.randomNumberHash = base64FromBytes(message.randomNumberHash !== undefined
                ? message.randomNumberHash
                : new Uint8Array()));
        message.expireHeight !== undefined &&
            (obj.expireHeight = (message.expireHeight || long_1.default.UZERO).toString());
        message.timestamp !== undefined &&
            (obj.timestamp = (message.timestamp || long_1.default.ZERO).toString());
        message.sender !== undefined &&
            (obj.sender = base64FromBytes(message.sender !== undefined ? message.sender : new Uint8Array()));
        message.recipient !== undefined &&
            (obj.recipient = base64FromBytes(message.recipient !== undefined ? message.recipient : new Uint8Array()));
        message.senderOtherChain !== undefined &&
            (obj.senderOtherChain = message.senderOtherChain);
        message.recipientOtherChain !== undefined &&
            (obj.recipientOtherChain = message.recipientOtherChain);
        message.closedBlock !== undefined &&
            (obj.closedBlock = (message.closedBlock || long_1.default.ZERO).toString());
        message.status !== undefined &&
            (obj.status = swapStatusToJSON(message.status));
        message.crossChain !== undefined && (obj.crossChain = message.crossChain);
        message.direction !== undefined &&
            (obj.direction = swapDirectionToJSON(message.direction));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseAtomicSwap();
        message.amount = ((_a = object.amount) === null || _a === void 0 ? void 0 : _a.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.randomNumberHash = (_b = object.randomNumberHash) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.expireHeight =
            object.expireHeight !== undefined && object.expireHeight !== null
                ? long_1.default.fromValue(object.expireHeight)
                : long_1.default.UZERO;
        message.timestamp =
            object.timestamp !== undefined && object.timestamp !== null
                ? long_1.default.fromValue(object.timestamp)
                : long_1.default.ZERO;
        message.sender = (_c = object.sender) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.recipient = (_d = object.recipient) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.senderOtherChain = (_e = object.senderOtherChain) !== null && _e !== void 0 ? _e : '';
        message.recipientOtherChain = (_f = object.recipientOtherChain) !== null && _f !== void 0 ? _f : '';
        message.closedBlock =
            object.closedBlock !== undefined && object.closedBlock !== null
                ? long_1.default.fromValue(object.closedBlock)
                : long_1.default.ZERO;
        message.status = (_g = object.status) !== null && _g !== void 0 ? _g : 0;
        message.crossChain = (_h = object.crossChain) !== null && _h !== void 0 ? _h : false;
        message.direction = (_j = object.direction) !== null && _j !== void 0 ? _j : 0;
        return message;
    },
};
function createBaseAssetSupply() {
    return {
        incomingSupply: undefined,
        outgoingSupply: undefined,
        currentSupply: undefined,
        timeLimitedCurrentSupply: undefined,
        timeElapsed: undefined,
    };
}
exports.AssetSupply = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.incomingSupply !== undefined) {
            coin_1.Coin.encode(message.incomingSupply, writer.uint32(10).fork()).ldelim();
        }
        if (message.outgoingSupply !== undefined) {
            coin_1.Coin.encode(message.outgoingSupply, writer.uint32(18).fork()).ldelim();
        }
        if (message.currentSupply !== undefined) {
            coin_1.Coin.encode(message.currentSupply, writer.uint32(26).fork()).ldelim();
        }
        if (message.timeLimitedCurrentSupply !== undefined) {
            coin_1.Coin.encode(message.timeLimitedCurrentSupply, writer.uint32(34).fork()).ldelim();
        }
        if (message.timeElapsed !== undefined) {
            duration_1.Duration.encode(message.timeElapsed, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAssetSupply();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.incomingSupply = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.outgoingSupply = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.currentSupply = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.timeLimitedCurrentSupply = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.timeElapsed = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            incomingSupply: isSet(object.incomingSupply)
                ? coin_1.Coin.fromJSON(object.incomingSupply)
                : undefined,
            outgoingSupply: isSet(object.outgoingSupply)
                ? coin_1.Coin.fromJSON(object.outgoingSupply)
                : undefined,
            currentSupply: isSet(object.currentSupply)
                ? coin_1.Coin.fromJSON(object.currentSupply)
                : undefined,
            timeLimitedCurrentSupply: isSet(object.timeLimitedCurrentSupply)
                ? coin_1.Coin.fromJSON(object.timeLimitedCurrentSupply)
                : undefined,
            timeElapsed: isSet(object.timeElapsed)
                ? duration_1.Duration.fromJSON(object.timeElapsed)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.incomingSupply !== undefined &&
            (obj.incomingSupply = message.incomingSupply
                ? coin_1.Coin.toJSON(message.incomingSupply)
                : undefined);
        message.outgoingSupply !== undefined &&
            (obj.outgoingSupply = message.outgoingSupply
                ? coin_1.Coin.toJSON(message.outgoingSupply)
                : undefined);
        message.currentSupply !== undefined &&
            (obj.currentSupply = message.currentSupply
                ? coin_1.Coin.toJSON(message.currentSupply)
                : undefined);
        message.timeLimitedCurrentSupply !== undefined &&
            (obj.timeLimitedCurrentSupply = message.timeLimitedCurrentSupply
                ? coin_1.Coin.toJSON(message.timeLimitedCurrentSupply)
                : undefined);
        message.timeElapsed !== undefined &&
            (obj.timeElapsed = message.timeElapsed
                ? duration_1.Duration.toJSON(message.timeElapsed)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseAssetSupply();
        message.incomingSupply =
            object.incomingSupply !== undefined && object.incomingSupply !== null
                ? coin_1.Coin.fromPartial(object.incomingSupply)
                : undefined;
        message.outgoingSupply =
            object.outgoingSupply !== undefined && object.outgoingSupply !== null
                ? coin_1.Coin.fromPartial(object.outgoingSupply)
                : undefined;
        message.currentSupply =
            object.currentSupply !== undefined && object.currentSupply !== null
                ? coin_1.Coin.fromPartial(object.currentSupply)
                : undefined;
        message.timeLimitedCurrentSupply =
            object.timeLimitedCurrentSupply !== undefined &&
                object.timeLimitedCurrentSupply !== null
                ? coin_1.Coin.fromPartial(object.timeLimitedCurrentSupply)
                : undefined;
        message.timeElapsed =
            object.timeElapsed !== undefined && object.timeElapsed !== null
                ? duration_1.Duration.fromPartial(object.timeElapsed)
                : undefined;
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_3, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
