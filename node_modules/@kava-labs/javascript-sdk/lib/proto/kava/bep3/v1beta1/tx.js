"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgRefundAtomicSwapResponse = exports.MsgRefundAtomicSwap = exports.MsgClaimAtomicSwapResponse = exports.MsgClaimAtomicSwap = exports.MsgCreateAtomicSwapResponse = exports.MsgCreateAtomicSwap = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.bep3.v1beta1';
function createBaseMsgCreateAtomicSwap() {
    return {
        from: '',
        to: '',
        recipientOtherChain: '',
        senderOtherChain: '',
        randomNumberHash: '',
        timestamp: long_1.default.ZERO,
        amount: [],
        heightSpan: long_1.default.UZERO,
    };
}
exports.MsgCreateAtomicSwap = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.to !== '') {
            writer.uint32(18).string(message.to);
        }
        if (message.recipientOtherChain !== '') {
            writer.uint32(26).string(message.recipientOtherChain);
        }
        if (message.senderOtherChain !== '') {
            writer.uint32(34).string(message.senderOtherChain);
        }
        if (message.randomNumberHash !== '') {
            writer.uint32(42).string(message.randomNumberHash);
        }
        if (!message.timestamp.isZero()) {
            writer.uint32(48).int64(message.timestamp);
        }
        try {
            for (var _b = __values(message.amount), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                coin_1.Coin.encode(v, writer.uint32(58).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!message.heightSpan.isZero()) {
            writer.uint32(64).uint64(message.heightSpan);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgCreateAtomicSwap();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.to = reader.string();
                    break;
                case 3:
                    message.recipientOtherChain = reader.string();
                    break;
                case 4:
                    message.senderOtherChain = reader.string();
                    break;
                case 5:
                    message.randomNumberHash = reader.string();
                    break;
                case 6:
                    message.timestamp = reader.int64();
                    break;
                case 7:
                    message.amount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.heightSpan = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            to: isSet(object.to) ? String(object.to) : '',
            recipientOtherChain: isSet(object.recipientOtherChain)
                ? String(object.recipientOtherChain)
                : '',
            senderOtherChain: isSet(object.senderOtherChain)
                ? String(object.senderOtherChain)
                : '',
            randomNumberHash: isSet(object.randomNumberHash)
                ? String(object.randomNumberHash)
                : '',
            timestamp: isSet(object.timestamp)
                ? long_1.default.fromString(object.timestamp)
                : long_1.default.ZERO,
            amount: Array.isArray(object === null || object === void 0 ? void 0 : object.amount)
                ? object.amount.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
            heightSpan: isSet(object.heightSpan)
                ? long_1.default.fromString(object.heightSpan)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.to !== undefined && (obj.to = message.to);
        message.recipientOtherChain !== undefined &&
            (obj.recipientOtherChain = message.recipientOtherChain);
        message.senderOtherChain !== undefined &&
            (obj.senderOtherChain = message.senderOtherChain);
        message.randomNumberHash !== undefined &&
            (obj.randomNumberHash = message.randomNumberHash);
        message.timestamp !== undefined &&
            (obj.timestamp = (message.timestamp || long_1.default.ZERO).toString());
        if (message.amount) {
            obj.amount = message.amount.map(function (e) { return (e ? coin_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.amount = [];
        }
        message.heightSpan !== undefined &&
            (obj.heightSpan = (message.heightSpan || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseMsgCreateAtomicSwap();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.to = (_b = object.to) !== null && _b !== void 0 ? _b : '';
        message.recipientOtherChain = (_c = object.recipientOtherChain) !== null && _c !== void 0 ? _c : '';
        message.senderOtherChain = (_d = object.senderOtherChain) !== null && _d !== void 0 ? _d : '';
        message.randomNumberHash = (_e = object.randomNumberHash) !== null && _e !== void 0 ? _e : '';
        message.timestamp =
            object.timestamp !== undefined && object.timestamp !== null
                ? long_1.default.fromValue(object.timestamp)
                : long_1.default.ZERO;
        message.amount = ((_f = object.amount) === null || _f === void 0 ? void 0 : _f.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.heightSpan =
            object.heightSpan !== undefined && object.heightSpan !== null
                ? long_1.default.fromValue(object.heightSpan)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgCreateAtomicSwapResponse() {
    return {};
}
exports.MsgCreateAtomicSwapResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgCreateAtomicSwapResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgCreateAtomicSwapResponse();
        return message;
    },
};
function createBaseMsgClaimAtomicSwap() {
    return { from: '', swapId: '', randomNumber: '' };
}
exports.MsgClaimAtomicSwap = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.swapId !== '') {
            writer.uint32(18).string(message.swapId);
        }
        if (message.randomNumber !== '') {
            writer.uint32(26).string(message.randomNumber);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimAtomicSwap();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.swapId = reader.string();
                    break;
                case 3:
                    message.randomNumber = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            swapId: isSet(object.swapId) ? String(object.swapId) : '',
            randomNumber: isSet(object.randomNumber)
                ? String(object.randomNumber)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.swapId !== undefined && (obj.swapId = message.swapId);
        message.randomNumber !== undefined &&
            (obj.randomNumber = message.randomNumber);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgClaimAtomicSwap();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.swapId = (_b = object.swapId) !== null && _b !== void 0 ? _b : '';
        message.randomNumber = (_c = object.randomNumber) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMsgClaimAtomicSwapResponse() {
    return {};
}
exports.MsgClaimAtomicSwapResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimAtomicSwapResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimAtomicSwapResponse();
        return message;
    },
};
function createBaseMsgRefundAtomicSwap() {
    return { from: '', swapId: '' };
}
exports.MsgRefundAtomicSwap = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.swapId !== '') {
            writer.uint32(18).string(message.swapId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgRefundAtomicSwap();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.swapId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            swapId: isSet(object.swapId) ? String(object.swapId) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.swapId !== undefined && (obj.swapId = message.swapId);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgRefundAtomicSwap();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.swapId = (_b = object.swapId) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseMsgRefundAtomicSwapResponse() {
    return {};
}
exports.MsgRefundAtomicSwapResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgRefundAtomicSwapResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgRefundAtomicSwapResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.CreateAtomicSwap = this.CreateAtomicSwap.bind(this);
        this.ClaimAtomicSwap = this.ClaimAtomicSwap.bind(this);
        this.RefundAtomicSwap = this.RefundAtomicSwap.bind(this);
    }
    MsgClientImpl.prototype.CreateAtomicSwap = function (request) {
        var data = exports.MsgCreateAtomicSwap.encode(request).finish();
        var promise = this.rpc.request('kava.bep3.v1beta1.Msg', 'CreateAtomicSwap', data);
        return promise.then(function (data) {
            return exports.MsgCreateAtomicSwapResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.ClaimAtomicSwap = function (request) {
        var data = exports.MsgClaimAtomicSwap.encode(request).finish();
        var promise = this.rpc.request('kava.bep3.v1beta1.Msg', 'ClaimAtomicSwap', data);
        return promise.then(function (data) {
            return exports.MsgClaimAtomicSwapResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.RefundAtomicSwap = function (request) {
        var data = exports.MsgRefundAtomicSwap.encode(request).finish();
        var promise = this.rpc.request('kava.bep3.v1beta1.Msg', 'RefundAtomicSwap', data);
        return promise.then(function (data) {
            return exports.MsgRefundAtomicSwapResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
