import Long from 'long';
import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "kava.committee.v1beta1";
/** GodPermission allows any governance proposal. It is used mainly for testing. */
export interface GodPermission {
}
/** SoftwareUpgradePermission permission type for software upgrade proposals */
export interface SoftwareUpgradePermission {
}
/** TextPermission allows any text governance proposal. */
export interface TextPermission {
}
/** ParamsChangePermission allows any parameter or sub parameter change proposal. */
export interface ParamsChangePermission {
    allowedParamsChanges: AllowedParamsChange[];
}
/** AllowedParamsChange contains data on the allowed parameter changes for subspace, key, and sub params requirements. */
export interface AllowedParamsChange {
    subspace: string;
    key: string;
    /**
     * Requirements for when the subparam value is a single record. This contains list of allowed attribute keys that can
     * be changed on the subparam record.
     */
    singleSubparamAllowedAttrs: string[];
    /**
     * Requirements for when the subparam value is a list of records. The requirements contains requirements for each
     * record in the list.
     */
    multiSubparamsRequirements: SubparamRequirement[];
}
/** SubparamRequirement contains requirements for a single record in a subparam value list */
export interface SubparamRequirement {
    /** The required attr key of the param record. */
    key: string;
    /** The required param value for the param record key. The key and value is used to match to the target param record. */
    val: string;
    /** The sub param attrs that are allowed to be changed. */
    allowedSubparamAttrChanges: string[];
}
export declare const GodPermission: {
    encode(_: GodPermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GodPermission;
    fromJSON(_: any): GodPermission;
    toJSON(_: GodPermission): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): GodPermission;
};
export declare const SoftwareUpgradePermission: {
    encode(_: SoftwareUpgradePermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SoftwareUpgradePermission;
    fromJSON(_: any): SoftwareUpgradePermission;
    toJSON(_: SoftwareUpgradePermission): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): SoftwareUpgradePermission;
};
export declare const TextPermission: {
    encode(_: TextPermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TextPermission;
    fromJSON(_: any): TextPermission;
    toJSON(_: TextPermission): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): TextPermission;
};
export declare const ParamsChangePermission: {
    encode(message: ParamsChangePermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ParamsChangePermission;
    fromJSON(object: any): ParamsChangePermission;
    toJSON(message: ParamsChangePermission): unknown;
    fromPartial<I extends {
        allowedParamsChanges?: {
            subspace?: string | undefined;
            key?: string | undefined;
            singleSubparamAllowedAttrs?: string[] | undefined;
            multiSubparamsRequirements?: {
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        allowedParamsChanges?: ({
            subspace?: string | undefined;
            key?: string | undefined;
            singleSubparamAllowedAttrs?: string[] | undefined;
            multiSubparamsRequirements?: {
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            }[] | undefined;
        }[] & ({
            subspace?: string | undefined;
            key?: string | undefined;
            singleSubparamAllowedAttrs?: string[] | undefined;
            multiSubparamsRequirements?: {
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            }[] | undefined;
        } & {
            subspace?: string | undefined;
            key?: string | undefined;
            singleSubparamAllowedAttrs?: (string[] & string[] & Record<Exclude<keyof I["allowedParamsChanges"][number]["singleSubparamAllowedAttrs"], keyof string[]>, never>) | undefined;
            multiSubparamsRequirements?: ({
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            }[] & ({
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            } & {
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: (string[] & string[] & Record<Exclude<keyof I["allowedParamsChanges"][number]["multiSubparamsRequirements"][number]["allowedSubparamAttrChanges"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["allowedParamsChanges"][number]["multiSubparamsRequirements"][number], keyof SubparamRequirement>, never>)[] & Record<Exclude<keyof I["allowedParamsChanges"][number]["multiSubparamsRequirements"], keyof {
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["allowedParamsChanges"][number], keyof AllowedParamsChange>, never>)[] & Record<Exclude<keyof I["allowedParamsChanges"], keyof {
            subspace?: string | undefined;
            key?: string | undefined;
            singleSubparamAllowedAttrs?: string[] | undefined;
            multiSubparamsRequirements?: {
                key?: string | undefined;
                val?: string | undefined;
                allowedSubparamAttrChanges?: string[] | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "allowedParamsChanges">, never>>(object: I): ParamsChangePermission;
};
export declare const AllowedParamsChange: {
    encode(message: AllowedParamsChange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AllowedParamsChange;
    fromJSON(object: any): AllowedParamsChange;
    toJSON(message: AllowedParamsChange): unknown;
    fromPartial<I extends {
        subspace?: string | undefined;
        key?: string | undefined;
        singleSubparamAllowedAttrs?: string[] | undefined;
        multiSubparamsRequirements?: {
            key?: string | undefined;
            val?: string | undefined;
            allowedSubparamAttrChanges?: string[] | undefined;
        }[] | undefined;
    } & {
        subspace?: string | undefined;
        key?: string | undefined;
        singleSubparamAllowedAttrs?: (string[] & string[] & Record<Exclude<keyof I["singleSubparamAllowedAttrs"], keyof string[]>, never>) | undefined;
        multiSubparamsRequirements?: ({
            key?: string | undefined;
            val?: string | undefined;
            allowedSubparamAttrChanges?: string[] | undefined;
        }[] & ({
            key?: string | undefined;
            val?: string | undefined;
            allowedSubparamAttrChanges?: string[] | undefined;
        } & {
            key?: string | undefined;
            val?: string | undefined;
            allowedSubparamAttrChanges?: (string[] & string[] & Record<Exclude<keyof I["multiSubparamsRequirements"][number]["allowedSubparamAttrChanges"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["multiSubparamsRequirements"][number], keyof SubparamRequirement>, never>)[] & Record<Exclude<keyof I["multiSubparamsRequirements"], keyof {
            key?: string | undefined;
            val?: string | undefined;
            allowedSubparamAttrChanges?: string[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AllowedParamsChange>, never>>(object: I): AllowedParamsChange;
};
export declare const SubparamRequirement: {
    encode(message: SubparamRequirement, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubparamRequirement;
    fromJSON(object: any): SubparamRequirement;
    toJSON(message: SubparamRequirement): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        val?: string | undefined;
        allowedSubparamAttrChanges?: string[] | undefined;
    } & {
        key?: string | undefined;
        val?: string | undefined;
        allowedSubparamAttrChanges?: (string[] & string[] & Record<Exclude<keyof I["allowedSubparamAttrChanges"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof SubparamRequirement>, never>>(object: I): SubparamRequirement;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
