"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryRawParamsResponse = exports.QueryRawParamsRequest = exports.QueryTallyResponse = exports.QueryTallyRequest = exports.QueryVoteResponse = exports.QueryVoteRequest = exports.QueryVotesResponse = exports.QueryVotesRequest = exports.QueryNextProposalIDResponse = exports.QueryNextProposalIDRequest = exports.QueryProposalResponse = exports.QueryProposalRequest = exports.QueryProposalsResponse = exports.QueryProposalsRequest = exports.QueryCommitteeResponse = exports.QueryCommitteeRequest = exports.QueryCommitteesResponse = exports.QueryCommitteesRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var any_1 = require("../../../google/protobuf/any");
var pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
var genesis_1 = require("../../../kava/committee/v1beta1/genesis");
var timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = 'kava.committee.v1beta1';
function createBaseQueryCommitteesRequest() {
    return {};
}
exports.QueryCommitteesRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCommitteesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryCommitteesRequest();
        return message;
    },
};
function createBaseQueryCommitteesResponse() {
    return { committees: [] };
}
exports.QueryCommitteesResponse = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.committees), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCommitteesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.committees.push(any_1.Any.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            committees: Array.isArray(object === null || object === void 0 ? void 0 : object.committees)
                ? object.committees.map(function (e) { return any_1.Any.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.committees) {
            obj.committees = message.committees.map(function (e) {
                return e ? any_1.Any.toJSON(e) : undefined;
            });
        }
        else {
            obj.committees = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryCommitteesResponse();
        message.committees =
            ((_a = object.committees) === null || _a === void 0 ? void 0 : _a.map(function (e) { return any_1.Any.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryCommitteeRequest() {
    return { committeeId: long_1.default.UZERO };
}
exports.QueryCommitteeRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.committeeId.isZero()) {
            writer.uint32(8).uint64(message.committeeId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCommitteeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.committeeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            committeeId: isSet(object.committeeId)
                ? long_1.default.fromString(object.committeeId)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.committeeId !== undefined &&
            (obj.committeeId = (message.committeeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryCommitteeRequest();
        message.committeeId =
            object.committeeId !== undefined && object.committeeId !== null
                ? long_1.default.fromValue(object.committeeId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryCommitteeResponse() {
    return { committee: undefined };
}
exports.QueryCommitteeResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.committee !== undefined) {
            any_1.Any.encode(message.committee, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCommitteeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.committee = any_1.Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            committee: isSet(object.committee)
                ? any_1.Any.fromJSON(object.committee)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.committee !== undefined &&
            (obj.committee = message.committee
                ? any_1.Any.toJSON(message.committee)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryCommitteeResponse();
        message.committee =
            object.committee !== undefined && object.committee !== null
                ? any_1.Any.fromPartial(object.committee)
                : undefined;
        return message;
    },
};
function createBaseQueryProposalsRequest() {
    return { committeeId: long_1.default.UZERO };
}
exports.QueryProposalsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.committeeId.isZero()) {
            writer.uint32(8).uint64(message.committeeId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryProposalsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.committeeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            committeeId: isSet(object.committeeId)
                ? long_1.default.fromString(object.committeeId)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.committeeId !== undefined &&
            (obj.committeeId = (message.committeeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryProposalsRequest();
        message.committeeId =
            object.committeeId !== undefined && object.committeeId !== null
                ? long_1.default.fromValue(object.committeeId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryProposalsResponse() {
    return { proposals: [] };
}
exports.QueryProposalsResponse = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.proposals), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.QueryProposalResponse.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryProposalsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposals.push(exports.QueryProposalResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposals: Array.isArray(object === null || object === void 0 ? void 0 : object.proposals)
                ? object.proposals.map(function (e) { return exports.QueryProposalResponse.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.proposals) {
            obj.proposals = message.proposals.map(function (e) {
                return e ? exports.QueryProposalResponse.toJSON(e) : undefined;
            });
        }
        else {
            obj.proposals = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryProposalsResponse();
        message.proposals =
            ((_a = object.proposals) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.QueryProposalResponse.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryProposalRequest() {
    return { proposalId: long_1.default.UZERO };
}
exports.QueryProposalRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.proposalId.isZero()) {
            writer.uint32(8).uint64(message.proposalId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryProposalRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposalId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposalId: isSet(object.proposalId)
                ? long_1.default.fromString(object.proposalId)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.proposalId !== undefined &&
            (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryProposalRequest();
        message.proposalId =
            object.proposalId !== undefined && object.proposalId !== null
                ? long_1.default.fromValue(object.proposalId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryProposalResponse() {
    return {
        pubProposal: undefined,
        id: long_1.default.UZERO,
        committeeId: long_1.default.UZERO,
        deadline: undefined,
    };
}
exports.QueryProposalResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.pubProposal !== undefined) {
            any_1.Any.encode(message.pubProposal, writer.uint32(10).fork()).ldelim();
        }
        if (!message.id.isZero()) {
            writer.uint32(16).uint64(message.id);
        }
        if (!message.committeeId.isZero()) {
            writer.uint32(24).uint64(message.committeeId);
        }
        if (message.deadline !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.deadline), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryProposalResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pubProposal = any_1.Any.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.id = reader.uint64();
                    break;
                case 3:
                    message.committeeId = reader.uint64();
                    break;
                case 4:
                    message.deadline = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pubProposal: isSet(object.pubProposal)
                ? any_1.Any.fromJSON(object.pubProposal)
                : undefined,
            id: isSet(object.id) ? long_1.default.fromString(object.id) : long_1.default.UZERO,
            committeeId: isSet(object.committeeId)
                ? long_1.default.fromString(object.committeeId)
                : long_1.default.UZERO,
            deadline: isSet(object.deadline)
                ? fromJsonTimestamp(object.deadline)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.pubProposal !== undefined &&
            (obj.pubProposal = message.pubProposal
                ? any_1.Any.toJSON(message.pubProposal)
                : undefined);
        message.id !== undefined &&
            (obj.id = (message.id || long_1.default.UZERO).toString());
        message.committeeId !== undefined &&
            (obj.committeeId = (message.committeeId || long_1.default.UZERO).toString());
        message.deadline !== undefined &&
            (obj.deadline = message.deadline.toISOString());
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryProposalResponse();
        message.pubProposal =
            object.pubProposal !== undefined && object.pubProposal !== null
                ? any_1.Any.fromPartial(object.pubProposal)
                : undefined;
        message.id =
            object.id !== undefined && object.id !== null
                ? long_1.default.fromValue(object.id)
                : long_1.default.UZERO;
        message.committeeId =
            object.committeeId !== undefined && object.committeeId !== null
                ? long_1.default.fromValue(object.committeeId)
                : long_1.default.UZERO;
        message.deadline = (_a = object.deadline) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseQueryNextProposalIDRequest() {
    return {};
}
exports.QueryNextProposalIDRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryNextProposalIDRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryNextProposalIDRequest();
        return message;
    },
};
function createBaseQueryNextProposalIDResponse() {
    return { nextProposalId: long_1.default.UZERO };
}
exports.QueryNextProposalIDResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.nextProposalId.isZero()) {
            writer.uint32(8).uint64(message.nextProposalId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryNextProposalIDResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nextProposalId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            nextProposalId: isSet(object.nextProposalId)
                ? long_1.default.fromString(object.nextProposalId)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.nextProposalId !== undefined &&
            (obj.nextProposalId = (message.nextProposalId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryNextProposalIDResponse();
        message.nextProposalId =
            object.nextProposalId !== undefined && object.nextProposalId !== null
                ? long_1.default.fromValue(object.nextProposalId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryVotesRequest() {
    return { proposalId: long_1.default.UZERO, pagination: undefined };
}
exports.QueryVotesRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.proposalId.isZero()) {
            writer.uint32(8).uint64(message.proposalId);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVotesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposalId = reader.uint64();
                    break;
                case 2:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposalId: isSet(object.proposalId)
                ? long_1.default.fromString(object.proposalId)
                : long_1.default.UZERO,
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.proposalId !== undefined &&
            (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageRequest.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryVotesRequest();
        message.proposalId =
            object.proposalId !== undefined && object.proposalId !== null
                ? long_1.default.fromValue(object.proposalId)
                : long_1.default.UZERO;
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryVotesResponse() {
    return { votes: [], pagination: undefined };
}
exports.QueryVotesResponse = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.votes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.QueryVoteResponse.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVotesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.votes.push(exports.QueryVoteResponse.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            votes: Array.isArray(object === null || object === void 0 ? void 0 : object.votes)
                ? object.votes.map(function (e) { return exports.QueryVoteResponse.fromJSON(e); })
                : [],
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.votes) {
            obj.votes = message.votes.map(function (e) {
                return e ? exports.QueryVoteResponse.toJSON(e) : undefined;
            });
        }
        else {
            obj.votes = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageResponse.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryVotesResponse();
        message.votes =
            ((_a = object.votes) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.QueryVoteResponse.fromPartial(e); })) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryVoteRequest() {
    return { proposalId: long_1.default.UZERO, voter: '' };
}
exports.QueryVoteRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.proposalId.isZero()) {
            writer.uint32(8).uint64(message.proposalId);
        }
        if (message.voter !== '') {
            writer.uint32(18).string(message.voter);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVoteRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposalId = reader.uint64();
                    break;
                case 2:
                    message.voter = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposalId: isSet(object.proposalId)
                ? long_1.default.fromString(object.proposalId)
                : long_1.default.UZERO,
            voter: isSet(object.voter) ? String(object.voter) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.proposalId !== undefined &&
            (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());
        message.voter !== undefined && (obj.voter = message.voter);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryVoteRequest();
        message.proposalId =
            object.proposalId !== undefined && object.proposalId !== null
                ? long_1.default.fromValue(object.proposalId)
                : long_1.default.UZERO;
        message.voter = (_a = object.voter) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryVoteResponse() {
    return { proposalId: long_1.default.UZERO, voter: '', voteType: 0 };
}
exports.QueryVoteResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.proposalId.isZero()) {
            writer.uint32(8).uint64(message.proposalId);
        }
        if (message.voter !== '') {
            writer.uint32(18).string(message.voter);
        }
        if (message.voteType !== 0) {
            writer.uint32(24).int32(message.voteType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryVoteResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposalId = reader.uint64();
                    break;
                case 2:
                    message.voter = reader.string();
                    break;
                case 3:
                    message.voteType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposalId: isSet(object.proposalId)
                ? long_1.default.fromString(object.proposalId)
                : long_1.default.UZERO,
            voter: isSet(object.voter) ? String(object.voter) : '',
            voteType: isSet(object.voteType) ? (0, genesis_1.voteTypeFromJSON)(object.voteType) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.proposalId !== undefined &&
            (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());
        message.voter !== undefined && (obj.voter = message.voter);
        message.voteType !== undefined &&
            (obj.voteType = (0, genesis_1.voteTypeToJSON)(message.voteType));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryVoteResponse();
        message.proposalId =
            object.proposalId !== undefined && object.proposalId !== null
                ? long_1.default.fromValue(object.proposalId)
                : long_1.default.UZERO;
        message.voter = (_a = object.voter) !== null && _a !== void 0 ? _a : '';
        message.voteType = (_b = object.voteType) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseQueryTallyRequest() {
    return { proposalId: long_1.default.UZERO };
}
exports.QueryTallyRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.proposalId.isZero()) {
            writer.uint32(8).uint64(message.proposalId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTallyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposalId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposalId: isSet(object.proposalId)
                ? long_1.default.fromString(object.proposalId)
                : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.proposalId !== undefined &&
            (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryTallyRequest();
        message.proposalId =
            object.proposalId !== undefined && object.proposalId !== null
                ? long_1.default.fromValue(object.proposalId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryTallyResponse() {
    return {
        proposalId: long_1.default.UZERO,
        yesVotes: '',
        noVotes: '',
        currentVotes: '',
        possibleVotes: '',
        voteThreshold: '',
        quorum: '',
    };
}
exports.QueryTallyResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.proposalId.isZero()) {
            writer.uint32(8).uint64(message.proposalId);
        }
        if (message.yesVotes !== '') {
            writer.uint32(18).string(message.yesVotes);
        }
        if (message.noVotes !== '') {
            writer.uint32(26).string(message.noVotes);
        }
        if (message.currentVotes !== '') {
            writer.uint32(34).string(message.currentVotes);
        }
        if (message.possibleVotes !== '') {
            writer.uint32(42).string(message.possibleVotes);
        }
        if (message.voteThreshold !== '') {
            writer.uint32(50).string(message.voteThreshold);
        }
        if (message.quorum !== '') {
            writer.uint32(58).string(message.quorum);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTallyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposalId = reader.uint64();
                    break;
                case 2:
                    message.yesVotes = reader.string();
                    break;
                case 3:
                    message.noVotes = reader.string();
                    break;
                case 4:
                    message.currentVotes = reader.string();
                    break;
                case 5:
                    message.possibleVotes = reader.string();
                    break;
                case 6:
                    message.voteThreshold = reader.string();
                    break;
                case 7:
                    message.quorum = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            proposalId: isSet(object.proposalId)
                ? long_1.default.fromString(object.proposalId)
                : long_1.default.UZERO,
            yesVotes: isSet(object.yesVotes) ? String(object.yesVotes) : '',
            noVotes: isSet(object.noVotes) ? String(object.noVotes) : '',
            currentVotes: isSet(object.currentVotes)
                ? String(object.currentVotes)
                : '',
            possibleVotes: isSet(object.possibleVotes)
                ? String(object.possibleVotes)
                : '',
            voteThreshold: isSet(object.voteThreshold)
                ? String(object.voteThreshold)
                : '',
            quorum: isSet(object.quorum) ? String(object.quorum) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.proposalId !== undefined &&
            (obj.proposalId = (message.proposalId || long_1.default.UZERO).toString());
        message.yesVotes !== undefined && (obj.yesVotes = message.yesVotes);
        message.noVotes !== undefined && (obj.noVotes = message.noVotes);
        message.currentVotes !== undefined &&
            (obj.currentVotes = message.currentVotes);
        message.possibleVotes !== undefined &&
            (obj.possibleVotes = message.possibleVotes);
        message.voteThreshold !== undefined &&
            (obj.voteThreshold = message.voteThreshold);
        message.quorum !== undefined && (obj.quorum = message.quorum);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseQueryTallyResponse();
        message.proposalId =
            object.proposalId !== undefined && object.proposalId !== null
                ? long_1.default.fromValue(object.proposalId)
                : long_1.default.UZERO;
        message.yesVotes = (_a = object.yesVotes) !== null && _a !== void 0 ? _a : '';
        message.noVotes = (_b = object.noVotes) !== null && _b !== void 0 ? _b : '';
        message.currentVotes = (_c = object.currentVotes) !== null && _c !== void 0 ? _c : '';
        message.possibleVotes = (_d = object.possibleVotes) !== null && _d !== void 0 ? _d : '';
        message.voteThreshold = (_e = object.voteThreshold) !== null && _e !== void 0 ? _e : '';
        message.quorum = (_f = object.quorum) !== null && _f !== void 0 ? _f : '';
        return message;
    },
};
function createBaseQueryRawParamsRequest() {
    return { subspace: '', key: '' };
}
exports.QueryRawParamsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.subspace !== '') {
            writer.uint32(10).string(message.subspace);
        }
        if (message.key !== '') {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryRawParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subspace = reader.string();
                    break;
                case 2:
                    message.key = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            subspace: isSet(object.subspace) ? String(object.subspace) : '',
            key: isSet(object.key) ? String(object.key) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.subspace !== undefined && (obj.subspace = message.subspace);
        message.key !== undefined && (obj.key = message.key);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryRawParamsRequest();
        message.subspace = (_a = object.subspace) !== null && _a !== void 0 ? _a : '';
        message.key = (_b = object.key) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseQueryRawParamsResponse() {
    return { rawData: '' };
}
exports.QueryRawParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.rawData !== '') {
            writer.uint32(10).string(message.rawData);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryRawParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rawData = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            rawData: isSet(object.rawData) ? String(object.rawData) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.rawData !== undefined && (obj.rawData = message.rawData);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryRawParamsResponse();
        message.rawData = (_a = object.rawData) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc) {
        this.rpc = rpc;
        this.Committees = this.Committees.bind(this);
        this.Committee = this.Committee.bind(this);
        this.Proposals = this.Proposals.bind(this);
        this.Proposal = this.Proposal.bind(this);
        this.NextProposalID = this.NextProposalID.bind(this);
        this.Votes = this.Votes.bind(this);
        this.Vote = this.Vote.bind(this);
        this.Tally = this.Tally.bind(this);
        this.RawParams = this.RawParams.bind(this);
    }
    QueryClientImpl.prototype.Committees = function (request) {
        var data = exports.QueryCommitteesRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Committees', data);
        return promise.then(function (data) {
            return exports.QueryCommitteesResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Committee = function (request) {
        var data = exports.QueryCommitteeRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Committee', data);
        return promise.then(function (data) {
            return exports.QueryCommitteeResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Proposals = function (request) {
        var data = exports.QueryProposalsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Proposals', data);
        return promise.then(function (data) {
            return exports.QueryProposalsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Proposal = function (request) {
        var data = exports.QueryProposalRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Proposal', data);
        return promise.then(function (data) {
            return exports.QueryProposalResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.NextProposalID = function (request) {
        var data = exports.QueryNextProposalIDRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'NextProposalID', data);
        return promise.then(function (data) {
            return exports.QueryNextProposalIDResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Votes = function (request) {
        var data = exports.QueryVotesRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Votes', data);
        return promise.then(function (data) {
            return exports.QueryVotesResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Vote = function (request) {
        var data = exports.QueryVoteRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Vote', data);
        return promise.then(function (data) {
            return exports.QueryVoteResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Tally = function (request) {
        var data = exports.QueryTallyRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'Tally', data);
        return promise.then(function (data) {
            return exports.QueryTallyResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.RawParams = function (request) {
        var data = exports.QueryRawParamsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.committee.v1beta1.Query', 'RawParams', data);
        return promise.then(function (data) {
            return exports.QueryRawParamsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
