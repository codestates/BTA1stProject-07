import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params } from '../../../kava/pricefeed/v1beta1/store';
export declare const protobufPackage = "kava.pricefeed.v1beta1";
/**
 * QueryParamsRequest defines the request type for querying x/pricefeed
 * parameters.
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse defines the response type for querying x/pricefeed
 * parameters.
 */
export interface QueryParamsResponse {
    params?: Params;
}
/** QueryPriceRequest is the request type for the Query/PriceRequest RPC method. */
export interface QueryPriceRequest {
    marketId: string;
}
/** QueryPriceResponse is the response type for the Query/Prices RPC method. */
export interface QueryPriceResponse {
    price?: CurrentPriceResponse;
}
/** QueryPricesRequest is the request type for the Query/Prices RPC method. */
export interface QueryPricesRequest {
}
/** QueryPricesResponse is the response type for the Query/Prices RPC method. */
export interface QueryPricesResponse {
    prices: CurrentPriceResponse[];
}
/** QueryRawPricesRequest is the request type for the Query/RawPrices RPC method. */
export interface QueryRawPricesRequest {
    marketId: string;
}
/**
 * QueryRawPricesResponse is the response type for the Query/RawPrices RPC
 * method.
 */
export interface QueryRawPricesResponse {
    rawPrices: PostedPriceResponse[];
}
/** QueryOraclesRequest is the request type for the Query/Oracles RPC method. */
export interface QueryOraclesRequest {
    marketId: string;
}
/** QueryOraclesResponse is the response type for the Query/Oracles RPC method. */
export interface QueryOraclesResponse {
    /** List of oracle addresses */
    oracles: string[];
}
/** QueryMarketsRequest is the request type for the Query/Markets RPC method. */
export interface QueryMarketsRequest {
}
/** QueryMarketsResponse is the response type for the Query/Markets RPC method. */
export interface QueryMarketsResponse {
    /** List of markets */
    markets: MarketResponse[];
}
/** PostedPriceResponse defines a price for market posted by a specific oracle. */
export interface PostedPriceResponse {
    marketId: string;
    oracleAddress: string;
    price: string;
    expiry?: Date;
}
/**
 * CurrentPriceResponse defines a current price for a particular market in the pricefeed
 * module.
 */
export interface CurrentPriceResponse {
    marketId: string;
    price: string;
}
/** MarketResponse defines an asset in the pricefeed. */
export interface MarketResponse {
    marketId: string;
    baseAsset: string;
    quoteAsset: string;
    oracles: string[];
    active: boolean;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            markets?: {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[] | undefined;
        } | undefined;
    } & {
        params?: ({
            markets?: {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[] | undefined;
        } & {
            markets?: ({
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[] & ({
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            } & {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["params"]["markets"][number]["oracles"], keyof Uint8Array[]>, never>) | undefined;
                active?: boolean | undefined;
            } & Record<Exclude<keyof I["params"]["markets"][number], keyof import("../../../kava/pricefeed/v1beta1/store").Market>, never>)[] & Record<Exclude<keyof I["params"]["markets"], keyof {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "markets">, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
};
export declare const QueryPriceRequest: {
    encode(message: QueryPriceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryPriceRequest;
    fromJSON(object: any): QueryPriceRequest;
    toJSON(message: QueryPriceRequest): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
    } & {
        marketId?: string | undefined;
    } & Record<Exclude<keyof I, "marketId">, never>>(object: I): QueryPriceRequest;
};
export declare const QueryPriceResponse: {
    encode(message: QueryPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryPriceResponse;
    fromJSON(object: any): QueryPriceResponse;
    toJSON(message: QueryPriceResponse): unknown;
    fromPartial<I extends {
        price?: {
            marketId?: string | undefined;
            price?: string | undefined;
        } | undefined;
    } & {
        price?: ({
            marketId?: string | undefined;
            price?: string | undefined;
        } & {
            marketId?: string | undefined;
            price?: string | undefined;
        } & Record<Exclude<keyof I["price"], keyof CurrentPriceResponse>, never>) | undefined;
    } & Record<Exclude<keyof I, "price">, never>>(object: I): QueryPriceResponse;
};
export declare const QueryPricesRequest: {
    encode(_: QueryPricesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryPricesRequest;
    fromJSON(_: any): QueryPricesRequest;
    toJSON(_: QueryPricesRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryPricesRequest;
};
export declare const QueryPricesResponse: {
    encode(message: QueryPricesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryPricesResponse;
    fromJSON(object: any): QueryPricesResponse;
    toJSON(message: QueryPricesResponse): unknown;
    fromPartial<I extends {
        prices?: {
            marketId?: string | undefined;
            price?: string | undefined;
        }[] | undefined;
    } & {
        prices?: ({
            marketId?: string | undefined;
            price?: string | undefined;
        }[] & ({
            marketId?: string | undefined;
            price?: string | undefined;
        } & {
            marketId?: string | undefined;
            price?: string | undefined;
        } & Record<Exclude<keyof I["prices"][number], keyof CurrentPriceResponse>, never>)[] & Record<Exclude<keyof I["prices"], keyof {
            marketId?: string | undefined;
            price?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "prices">, never>>(object: I): QueryPricesResponse;
};
export declare const QueryRawPricesRequest: {
    encode(message: QueryRawPricesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRawPricesRequest;
    fromJSON(object: any): QueryRawPricesRequest;
    toJSON(message: QueryRawPricesRequest): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
    } & {
        marketId?: string | undefined;
    } & Record<Exclude<keyof I, "marketId">, never>>(object: I): QueryRawPricesRequest;
};
export declare const QueryRawPricesResponse: {
    encode(message: QueryRawPricesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRawPricesResponse;
    fromJSON(object: any): QueryRawPricesResponse;
    toJSON(message: QueryRawPricesResponse): unknown;
    fromPartial<I extends {
        rawPrices?: {
            marketId?: string | undefined;
            oracleAddress?: string | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        }[] | undefined;
    } & {
        rawPrices?: ({
            marketId?: string | undefined;
            oracleAddress?: string | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        }[] & ({
            marketId?: string | undefined;
            oracleAddress?: string | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        } & {
            marketId?: string | undefined;
            oracleAddress?: string | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        } & Record<Exclude<keyof I["rawPrices"][number], keyof PostedPriceResponse>, never>)[] & Record<Exclude<keyof I["rawPrices"], keyof {
            marketId?: string | undefined;
            oracleAddress?: string | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "rawPrices">, never>>(object: I): QueryRawPricesResponse;
};
export declare const QueryOraclesRequest: {
    encode(message: QueryOraclesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryOraclesRequest;
    fromJSON(object: any): QueryOraclesRequest;
    toJSON(message: QueryOraclesRequest): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
    } & {
        marketId?: string | undefined;
    } & Record<Exclude<keyof I, "marketId">, never>>(object: I): QueryOraclesRequest;
};
export declare const QueryOraclesResponse: {
    encode(message: QueryOraclesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryOraclesResponse;
    fromJSON(object: any): QueryOraclesResponse;
    toJSON(message: QueryOraclesResponse): unknown;
    fromPartial<I extends {
        oracles?: string[] | undefined;
    } & {
        oracles?: (string[] & string[] & Record<Exclude<keyof I["oracles"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "oracles">, never>>(object: I): QueryOraclesResponse;
};
export declare const QueryMarketsRequest: {
    encode(_: QueryMarketsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryMarketsRequest;
    fromJSON(_: any): QueryMarketsRequest;
    toJSON(_: QueryMarketsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryMarketsRequest;
};
export declare const QueryMarketsResponse: {
    encode(message: QueryMarketsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryMarketsResponse;
    fromJSON(object: any): QueryMarketsResponse;
    toJSON(message: QueryMarketsResponse): unknown;
    fromPartial<I extends {
        markets?: {
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: string[] | undefined;
            active?: boolean | undefined;
        }[] | undefined;
    } & {
        markets?: ({
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: string[] | undefined;
            active?: boolean | undefined;
        }[] & ({
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: string[] | undefined;
            active?: boolean | undefined;
        } & {
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: (string[] & string[] & Record<Exclude<keyof I["markets"][number]["oracles"], keyof string[]>, never>) | undefined;
            active?: boolean | undefined;
        } & Record<Exclude<keyof I["markets"][number], keyof MarketResponse>, never>)[] & Record<Exclude<keyof I["markets"], keyof {
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: string[] | undefined;
            active?: boolean | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "markets">, never>>(object: I): QueryMarketsResponse;
};
export declare const PostedPriceResponse: {
    encode(message: PostedPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostedPriceResponse;
    fromJSON(object: any): PostedPriceResponse;
    toJSON(message: PostedPriceResponse): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
        oracleAddress?: string | undefined;
        price?: string | undefined;
        expiry?: Date | undefined;
    } & {
        marketId?: string | undefined;
        oracleAddress?: string | undefined;
        price?: string | undefined;
        expiry?: Date | undefined;
    } & Record<Exclude<keyof I, keyof PostedPriceResponse>, never>>(object: I): PostedPriceResponse;
};
export declare const CurrentPriceResponse: {
    encode(message: CurrentPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CurrentPriceResponse;
    fromJSON(object: any): CurrentPriceResponse;
    toJSON(message: CurrentPriceResponse): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
        price?: string | undefined;
    } & {
        marketId?: string | undefined;
        price?: string | undefined;
    } & Record<Exclude<keyof I, keyof CurrentPriceResponse>, never>>(object: I): CurrentPriceResponse;
};
export declare const MarketResponse: {
    encode(message: MarketResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MarketResponse;
    fromJSON(object: any): MarketResponse;
    toJSON(message: MarketResponse): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
        baseAsset?: string | undefined;
        quoteAsset?: string | undefined;
        oracles?: string[] | undefined;
        active?: boolean | undefined;
    } & {
        marketId?: string | undefined;
        baseAsset?: string | undefined;
        quoteAsset?: string | undefined;
        oracles?: (string[] & string[] & Record<Exclude<keyof I["oracles"], keyof string[]>, never>) | undefined;
        active?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof MarketResponse>, never>>(object: I): MarketResponse;
};
/** Query defines the gRPC querier service for pricefeed module */
export interface Query {
    /** Params queries all parameters of the pricefeed module. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** Price queries price details based on a market */
    Price(request: QueryPriceRequest): Promise<QueryPriceResponse>;
    /** Prices queries all prices */
    Prices(request: QueryPricesRequest): Promise<QueryPricesResponse>;
    /** RawPrices queries all raw prices based on a market */
    RawPrices(request: QueryRawPricesRequest): Promise<QueryRawPricesResponse>;
    /** Oracles queries all oracles based on a market */
    Oracles(request: QueryOraclesRequest): Promise<QueryOraclesResponse>;
    /** Markets queries all markets */
    Markets(request: QueryMarketsRequest): Promise<QueryMarketsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    Price(request: QueryPriceRequest): Promise<QueryPriceResponse>;
    Prices(request: QueryPricesRequest): Promise<QueryPricesResponse>;
    RawPrices(request: QueryRawPricesRequest): Promise<QueryRawPricesResponse>;
    Oracles(request: QueryOraclesRequest): Promise<QueryOraclesResponse>;
    Markets(request: QueryMarketsRequest): Promise<QueryMarketsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
