import Long from 'long';
import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "kava.pricefeed.v1beta1";
/** MsgPostPrice represents a method for creating a new post price */
export interface MsgPostPrice {
    /** address of client */
    from: string;
    marketId: string;
    price: string;
    expiry?: Date;
}
/** MsgPostPriceResponse defines the Msg/PostPrice response type. */
export interface MsgPostPriceResponse {
}
export declare const MsgPostPrice: {
    encode(message: MsgPostPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgPostPrice;
    fromJSON(object: any): MsgPostPrice;
    toJSON(message: MsgPostPrice): unknown;
    fromPartial<I extends {
        from?: string | undefined;
        marketId?: string | undefined;
        price?: string | undefined;
        expiry?: Date | undefined;
    } & {
        from?: string | undefined;
        marketId?: string | undefined;
        price?: string | undefined;
        expiry?: Date | undefined;
    } & Record<Exclude<keyof I, keyof MsgPostPrice>, never>>(object: I): MsgPostPrice;
};
export declare const MsgPostPriceResponse: {
    encode(_: MsgPostPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgPostPriceResponse;
    fromJSON(_: any): MsgPostPriceResponse;
    toJSON(_: MsgPostPriceResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgPostPriceResponse;
};
/** Msg defines the pricefeed Msg service. */
export interface Msg {
    /** PostPrice defines a method for creating a new post price */
    PostPrice(request: MsgPostPrice): Promise<MsgPostPriceResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    PostPrice(request: MsgPostPrice): Promise<MsgPostPriceResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
