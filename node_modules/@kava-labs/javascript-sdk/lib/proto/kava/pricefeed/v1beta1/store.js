"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrentPrice = exports.PostedPrice = exports.Market = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = 'kava.pricefeed.v1beta1';
function createBaseParams() {
    return { markets: [] };
}
exports.Params = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.markets), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Market.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.markets.push(exports.Market.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            markets: Array.isArray(object === null || object === void 0 ? void 0 : object.markets)
                ? object.markets.map(function (e) { return exports.Market.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.markets) {
            obj.markets = message.markets.map(function (e) {
                return e ? exports.Market.toJSON(e) : undefined;
            });
        }
        else {
            obj.markets = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseParams();
        message.markets = ((_a = object.markets) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Market.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseMarket() {
    return {
        marketId: '',
        baseAsset: '',
        quoteAsset: '',
        oracles: [],
        active: false,
    };
}
exports.Market = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.marketId !== '') {
            writer.uint32(10).string(message.marketId);
        }
        if (message.baseAsset !== '') {
            writer.uint32(18).string(message.baseAsset);
        }
        if (message.quoteAsset !== '') {
            writer.uint32(26).string(message.quoteAsset);
        }
        try {
            for (var _b = __values(message.oracles), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(34).bytes(v);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.active === true) {
            writer.uint32(40).bool(message.active);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMarket();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.baseAsset = reader.string();
                    break;
                case 3:
                    message.quoteAsset = reader.string();
                    break;
                case 4:
                    message.oracles.push(reader.bytes());
                    break;
                case 5:
                    message.active = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : '',
            baseAsset: isSet(object.baseAsset) ? String(object.baseAsset) : '',
            quoteAsset: isSet(object.quoteAsset) ? String(object.quoteAsset) : '',
            oracles: Array.isArray(object === null || object === void 0 ? void 0 : object.oracles)
                ? object.oracles.map(function (e) { return bytesFromBase64(e); })
                : [],
            active: isSet(object.active) ? Boolean(object.active) : false,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.baseAsset !== undefined && (obj.baseAsset = message.baseAsset);
        message.quoteAsset !== undefined && (obj.quoteAsset = message.quoteAsset);
        if (message.oracles) {
            obj.oracles = message.oracles.map(function (e) {
                return base64FromBytes(e !== undefined ? e : new Uint8Array());
            });
        }
        else {
            obj.oracles = [];
        }
        message.active !== undefined && (obj.active = message.active);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseMarket();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : '';
        message.baseAsset = (_b = object.baseAsset) !== null && _b !== void 0 ? _b : '';
        message.quoteAsset = (_c = object.quoteAsset) !== null && _c !== void 0 ? _c : '';
        message.oracles = ((_d = object.oracles) === null || _d === void 0 ? void 0 : _d.map(function (e) { return e; })) || [];
        message.active = (_e = object.active) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBasePostedPrice() {
    return {
        marketId: '',
        oracleAddress: new Uint8Array(),
        price: '',
        expiry: undefined,
    };
}
exports.PostedPrice = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.marketId !== '') {
            writer.uint32(10).string(message.marketId);
        }
        if (message.oracleAddress.length !== 0) {
            writer.uint32(18).bytes(message.oracleAddress);
        }
        if (message.price !== '') {
            writer.uint32(26).string(message.price);
        }
        if (message.expiry !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expiry), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePostedPrice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.oracleAddress = reader.bytes();
                    break;
                case 3:
                    message.price = reader.string();
                    break;
                case 4:
                    message.expiry = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : '',
            oracleAddress: isSet(object.oracleAddress)
                ? bytesFromBase64(object.oracleAddress)
                : new Uint8Array(),
            price: isSet(object.price) ? String(object.price) : '',
            expiry: isSet(object.expiry)
                ? fromJsonTimestamp(object.expiry)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.oracleAddress !== undefined &&
            (obj.oracleAddress = base64FromBytes(message.oracleAddress !== undefined
                ? message.oracleAddress
                : new Uint8Array()));
        message.price !== undefined && (obj.price = message.price);
        message.expiry !== undefined && (obj.expiry = message.expiry.toISOString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBasePostedPrice();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : '';
        message.oracleAddress = (_b = object.oracleAddress) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.price = (_c = object.price) !== null && _c !== void 0 ? _c : '';
        message.expiry = (_d = object.expiry) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseCurrentPrice() {
    return { marketId: '', price: '' };
}
exports.CurrentPrice = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.marketId !== '') {
            writer.uint32(10).string(message.marketId);
        }
        if (message.price !== '') {
            writer.uint32(18).string(message.price);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCurrentPrice();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.price = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : '',
            price: isSet(object.price) ? String(object.price) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.price !== undefined && (obj.price = message.price);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseCurrentPrice();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : '';
        message.price = (_b = object.price) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_3, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return btoa(bin.join(''));
}
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
