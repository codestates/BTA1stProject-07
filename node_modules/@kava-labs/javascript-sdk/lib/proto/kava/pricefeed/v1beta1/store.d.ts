import Long from 'long';
import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "kava.pricefeed.v1beta1";
/** Params defines the parameters for the pricefeed module. */
export interface Params {
    markets: Market[];
}
/** Market defines an asset in the pricefeed. */
export interface Market {
    marketId: string;
    baseAsset: string;
    quoteAsset: string;
    oracles: Uint8Array[];
    active: boolean;
}
/** PostedPrice defines a price for market posted by a specific oracle. */
export interface PostedPrice {
    marketId: string;
    oracleAddress: Uint8Array;
    price: string;
    expiry?: Date;
}
/**
 * CurrentPrice defines a current price for a particular market in the pricefeed
 * module.
 */
export interface CurrentPrice {
    marketId: string;
    price: string;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        markets?: {
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: Uint8Array[] | undefined;
            active?: boolean | undefined;
        }[] | undefined;
    } & {
        markets?: ({
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: Uint8Array[] | undefined;
            active?: boolean | undefined;
        }[] & ({
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: Uint8Array[] | undefined;
            active?: boolean | undefined;
        } & {
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["markets"][number]["oracles"], keyof Uint8Array[]>, never>) | undefined;
            active?: boolean | undefined;
        } & Record<Exclude<keyof I["markets"][number], keyof Market>, never>)[] & Record<Exclude<keyof I["markets"], keyof {
            marketId?: string | undefined;
            baseAsset?: string | undefined;
            quoteAsset?: string | undefined;
            oracles?: Uint8Array[] | undefined;
            active?: boolean | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "markets">, never>>(object: I): Params;
};
export declare const Market: {
    encode(message: Market, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Market;
    fromJSON(object: any): Market;
    toJSON(message: Market): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
        baseAsset?: string | undefined;
        quoteAsset?: string | undefined;
        oracles?: Uint8Array[] | undefined;
        active?: boolean | undefined;
    } & {
        marketId?: string | undefined;
        baseAsset?: string | undefined;
        quoteAsset?: string | undefined;
        oracles?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["oracles"], keyof Uint8Array[]>, never>) | undefined;
        active?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Market>, never>>(object: I): Market;
};
export declare const PostedPrice: {
    encode(message: PostedPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostedPrice;
    fromJSON(object: any): PostedPrice;
    toJSON(message: PostedPrice): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
        oracleAddress?: Uint8Array | undefined;
        price?: string | undefined;
        expiry?: Date | undefined;
    } & {
        marketId?: string | undefined;
        oracleAddress?: Uint8Array | undefined;
        price?: string | undefined;
        expiry?: Date | undefined;
    } & Record<Exclude<keyof I, keyof PostedPrice>, never>>(object: I): PostedPrice;
};
export declare const CurrentPrice: {
    encode(message: CurrentPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CurrentPrice;
    fromJSON(object: any): CurrentPrice;
    toJSON(message: CurrentPrice): unknown;
    fromPartial<I extends {
        marketId?: string | undefined;
        price?: string | undefined;
    } & {
        marketId?: string | undefined;
        price?: string | undefined;
    } & Record<Exclude<keyof I, keyof CurrentPrice>, never>>(object: I): CurrentPrice;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
