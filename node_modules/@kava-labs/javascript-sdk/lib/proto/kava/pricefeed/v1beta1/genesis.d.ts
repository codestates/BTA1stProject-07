import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params, PostedPrice } from '../../../kava/pricefeed/v1beta1/store';
export declare const protobufPackage = "kava.pricefeed.v1beta1";
/** GenesisState defines the pricefeed module's genesis state. */
export interface GenesisState {
    /** params defines all the paramaters of the module. */
    params?: Params;
    postedPrices: PostedPrice[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        params?: {
            markets?: {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[] | undefined;
        } | undefined;
        postedPrices?: {
            marketId?: string | undefined;
            oracleAddress?: Uint8Array | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        }[] | undefined;
    } & {
        params?: ({
            markets?: {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[] | undefined;
        } & {
            markets?: ({
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[] & ({
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            } & {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["params"]["markets"][number]["oracles"], keyof Uint8Array[]>, never>) | undefined;
                active?: boolean | undefined;
            } & Record<Exclude<keyof I["params"]["markets"][number], keyof import("../../../kava/pricefeed/v1beta1/store").Market>, never>)[] & Record<Exclude<keyof I["params"]["markets"], keyof {
                marketId?: string | undefined;
                baseAsset?: string | undefined;
                quoteAsset?: string | undefined;
                oracles?: Uint8Array[] | undefined;
                active?: boolean | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], "markets">, never>) | undefined;
        postedPrices?: ({
            marketId?: string | undefined;
            oracleAddress?: Uint8Array | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        }[] & ({
            marketId?: string | undefined;
            oracleAddress?: Uint8Array | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        } & {
            marketId?: string | undefined;
            oracleAddress?: Uint8Array | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        } & Record<Exclude<keyof I["postedPrices"][number], keyof PostedPrice>, never>)[] & Record<Exclude<keyof I["postedPrices"], keyof {
            marketId?: string | undefined;
            oracleAddress?: Uint8Array | undefined;
            price?: string | undefined;
            expiry?: Date | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
