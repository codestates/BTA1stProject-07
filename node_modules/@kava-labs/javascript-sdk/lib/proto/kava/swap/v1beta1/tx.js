"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgSwapForExactTokensResponse = exports.MsgSwapForExactTokens = exports.MsgSwapExactForTokensResponse = exports.MsgSwapExactForTokens = exports.MsgWithdrawResponse = exports.MsgWithdraw = exports.MsgDepositResponse = exports.MsgDeposit = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.swap.v1beta1';
function createBaseMsgDeposit() {
    return {
        depositor: '',
        tokenA: undefined,
        tokenB: undefined,
        slippage: '',
        deadline: long_1.default.ZERO,
    };
}
exports.MsgDeposit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.tokenA !== undefined) {
            coin_1.Coin.encode(message.tokenA, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenB !== undefined) {
            coin_1.Coin.encode(message.tokenB, writer.uint32(26).fork()).ldelim();
        }
        if (message.slippage !== '') {
            writer.uint32(34).string(message.slippage);
        }
        if (!message.deadline.isZero()) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDeposit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.tokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.tokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slippage = reader.string();
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            tokenA: isSet(object.tokenA) ? coin_1.Coin.fromJSON(object.tokenA) : undefined,
            tokenB: isSet(object.tokenB) ? coin_1.Coin.fromJSON(object.tokenB) : undefined,
            slippage: isSet(object.slippage) ? String(object.slippage) : '',
            deadline: isSet(object.deadline)
                ? long_1.default.fromString(object.deadline)
                : long_1.default.ZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.tokenA !== undefined &&
            (obj.tokenA = message.tokenA ? coin_1.Coin.toJSON(message.tokenA) : undefined);
        message.tokenB !== undefined &&
            (obj.tokenB = message.tokenB ? coin_1.Coin.toJSON(message.tokenB) : undefined);
        message.slippage !== undefined && (obj.slippage = message.slippage);
        message.deadline !== undefined &&
            (obj.deadline = (message.deadline || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgDeposit();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.tokenA =
            object.tokenA !== undefined && object.tokenA !== null
                ? coin_1.Coin.fromPartial(object.tokenA)
                : undefined;
        message.tokenB =
            object.tokenB !== undefined && object.tokenB !== null
                ? coin_1.Coin.fromPartial(object.tokenB)
                : undefined;
        message.slippage = (_b = object.slippage) !== null && _b !== void 0 ? _b : '';
        message.deadline =
            object.deadline !== undefined && object.deadline !== null
                ? long_1.default.fromValue(object.deadline)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseMsgDepositResponse() {
    return {};
}
exports.MsgDepositResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDepositResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgDepositResponse();
        return message;
    },
};
function createBaseMsgWithdraw() {
    return {
        from: '',
        shares: '',
        minTokenA: undefined,
        minTokenB: undefined,
        deadline: long_1.default.ZERO,
    };
}
exports.MsgWithdraw = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.from !== '') {
            writer.uint32(10).string(message.from);
        }
        if (message.shares !== '') {
            writer.uint32(18).string(message.shares);
        }
        if (message.minTokenA !== undefined) {
            coin_1.Coin.encode(message.minTokenA, writer.uint32(26).fork()).ldelim();
        }
        if (message.minTokenB !== undefined) {
            coin_1.Coin.encode(message.minTokenB, writer.uint32(34).fork()).ldelim();
        }
        if (!message.deadline.isZero()) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdraw();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.shares = reader.string();
                    break;
                case 3:
                    message.minTokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.minTokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            from: isSet(object.from) ? String(object.from) : '',
            shares: isSet(object.shares) ? String(object.shares) : '',
            minTokenA: isSet(object.minTokenA)
                ? coin_1.Coin.fromJSON(object.minTokenA)
                : undefined,
            minTokenB: isSet(object.minTokenB)
                ? coin_1.Coin.fromJSON(object.minTokenB)
                : undefined,
            deadline: isSet(object.deadline)
                ? long_1.default.fromString(object.deadline)
                : long_1.default.ZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.shares !== undefined && (obj.shares = message.shares);
        message.minTokenA !== undefined &&
            (obj.minTokenA = message.minTokenA
                ? coin_1.Coin.toJSON(message.minTokenA)
                : undefined);
        message.minTokenB !== undefined &&
            (obj.minTokenB = message.minTokenB
                ? coin_1.Coin.toJSON(message.minTokenB)
                : undefined);
        message.deadline !== undefined &&
            (obj.deadline = (message.deadline || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgWithdraw();
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : '';
        message.shares = (_b = object.shares) !== null && _b !== void 0 ? _b : '';
        message.minTokenA =
            object.minTokenA !== undefined && object.minTokenA !== null
                ? coin_1.Coin.fromPartial(object.minTokenA)
                : undefined;
        message.minTokenB =
            object.minTokenB !== undefined && object.minTokenB !== null
                ? coin_1.Coin.fromPartial(object.minTokenB)
                : undefined;
        message.deadline =
            object.deadline !== undefined && object.deadline !== null
                ? long_1.default.fromValue(object.deadline)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseMsgWithdrawResponse() {
    return {};
}
exports.MsgWithdrawResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgWithdrawResponse();
        return message;
    },
};
function createBaseMsgSwapExactForTokens() {
    return {
        requester: '',
        exactTokenA: undefined,
        tokenB: undefined,
        slippage: '',
        deadline: long_1.default.ZERO,
    };
}
exports.MsgSwapExactForTokens = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.requester !== '') {
            writer.uint32(10).string(message.requester);
        }
        if (message.exactTokenA !== undefined) {
            coin_1.Coin.encode(message.exactTokenA, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenB !== undefined) {
            coin_1.Coin.encode(message.tokenB, writer.uint32(26).fork()).ldelim();
        }
        if (message.slippage !== '') {
            writer.uint32(34).string(message.slippage);
        }
        if (!message.deadline.isZero()) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgSwapExactForTokens();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requester = reader.string();
                    break;
                case 2:
                    message.exactTokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.tokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slippage = reader.string();
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            requester: isSet(object.requester) ? String(object.requester) : '',
            exactTokenA: isSet(object.exactTokenA)
                ? coin_1.Coin.fromJSON(object.exactTokenA)
                : undefined,
            tokenB: isSet(object.tokenB) ? coin_1.Coin.fromJSON(object.tokenB) : undefined,
            slippage: isSet(object.slippage) ? String(object.slippage) : '',
            deadline: isSet(object.deadline)
                ? long_1.default.fromString(object.deadline)
                : long_1.default.ZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.requester !== undefined && (obj.requester = message.requester);
        message.exactTokenA !== undefined &&
            (obj.exactTokenA = message.exactTokenA
                ? coin_1.Coin.toJSON(message.exactTokenA)
                : undefined);
        message.tokenB !== undefined &&
            (obj.tokenB = message.tokenB ? coin_1.Coin.toJSON(message.tokenB) : undefined);
        message.slippage !== undefined && (obj.slippage = message.slippage);
        message.deadline !== undefined &&
            (obj.deadline = (message.deadline || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgSwapExactForTokens();
        message.requester = (_a = object.requester) !== null && _a !== void 0 ? _a : '';
        message.exactTokenA =
            object.exactTokenA !== undefined && object.exactTokenA !== null
                ? coin_1.Coin.fromPartial(object.exactTokenA)
                : undefined;
        message.tokenB =
            object.tokenB !== undefined && object.tokenB !== null
                ? coin_1.Coin.fromPartial(object.tokenB)
                : undefined;
        message.slippage = (_b = object.slippage) !== null && _b !== void 0 ? _b : '';
        message.deadline =
            object.deadline !== undefined && object.deadline !== null
                ? long_1.default.fromValue(object.deadline)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseMsgSwapExactForTokensResponse() {
    return {};
}
exports.MsgSwapExactForTokensResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgSwapExactForTokensResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgSwapExactForTokensResponse();
        return message;
    },
};
function createBaseMsgSwapForExactTokens() {
    return {
        requester: '',
        tokenA: undefined,
        exactTokenB: undefined,
        slippage: '',
        deadline: long_1.default.ZERO,
    };
}
exports.MsgSwapForExactTokens = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.requester !== '') {
            writer.uint32(10).string(message.requester);
        }
        if (message.tokenA !== undefined) {
            coin_1.Coin.encode(message.tokenA, writer.uint32(18).fork()).ldelim();
        }
        if (message.exactTokenB !== undefined) {
            coin_1.Coin.encode(message.exactTokenB, writer.uint32(26).fork()).ldelim();
        }
        if (message.slippage !== '') {
            writer.uint32(34).string(message.slippage);
        }
        if (!message.deadline.isZero()) {
            writer.uint32(40).int64(message.deadline);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgSwapForExactTokens();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requester = reader.string();
                    break;
                case 2:
                    message.tokenA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.exactTokenB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.slippage = reader.string();
                    break;
                case 5:
                    message.deadline = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            requester: isSet(object.requester) ? String(object.requester) : '',
            tokenA: isSet(object.tokenA) ? coin_1.Coin.fromJSON(object.tokenA) : undefined,
            exactTokenB: isSet(object.exactTokenB)
                ? coin_1.Coin.fromJSON(object.exactTokenB)
                : undefined,
            slippage: isSet(object.slippage) ? String(object.slippage) : '',
            deadline: isSet(object.deadline)
                ? long_1.default.fromString(object.deadline)
                : long_1.default.ZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.requester !== undefined && (obj.requester = message.requester);
        message.tokenA !== undefined &&
            (obj.tokenA = message.tokenA ? coin_1.Coin.toJSON(message.tokenA) : undefined);
        message.exactTokenB !== undefined &&
            (obj.exactTokenB = message.exactTokenB
                ? coin_1.Coin.toJSON(message.exactTokenB)
                : undefined);
        message.slippage !== undefined && (obj.slippage = message.slippage);
        message.deadline !== undefined &&
            (obj.deadline = (message.deadline || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgSwapForExactTokens();
        message.requester = (_a = object.requester) !== null && _a !== void 0 ? _a : '';
        message.tokenA =
            object.tokenA !== undefined && object.tokenA !== null
                ? coin_1.Coin.fromPartial(object.tokenA)
                : undefined;
        message.exactTokenB =
            object.exactTokenB !== undefined && object.exactTokenB !== null
                ? coin_1.Coin.fromPartial(object.exactTokenB)
                : undefined;
        message.slippage = (_b = object.slippage) !== null && _b !== void 0 ? _b : '';
        message.deadline =
            object.deadline !== undefined && object.deadline !== null
                ? long_1.default.fromValue(object.deadline)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseMsgSwapForExactTokensResponse() {
    return {};
}
exports.MsgSwapForExactTokensResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgSwapForExactTokensResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgSwapForExactTokensResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.Deposit = this.Deposit.bind(this);
        this.Withdraw = this.Withdraw.bind(this);
        this.SwapExactForTokens = this.SwapExactForTokens.bind(this);
        this.SwapForExactTokens = this.SwapForExactTokens.bind(this);
    }
    MsgClientImpl.prototype.Deposit = function (request) {
        var data = exports.MsgDeposit.encode(request).finish();
        var promise = this.rpc.request('kava.swap.v1beta1.Msg', 'Deposit', data);
        return promise.then(function (data) {
            return exports.MsgDepositResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.Withdraw = function (request) {
        var data = exports.MsgWithdraw.encode(request).finish();
        var promise = this.rpc.request('kava.swap.v1beta1.Msg', 'Withdraw', data);
        return promise.then(function (data) {
            return exports.MsgWithdrawResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.SwapExactForTokens = function (request) {
        var data = exports.MsgSwapExactForTokens.encode(request).finish();
        var promise = this.rpc.request('kava.swap.v1beta1.Msg', 'SwapExactForTokens', data);
        return promise.then(function (data) {
            return exports.MsgSwapExactForTokensResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.SwapForExactTokens = function (request) {
        var data = exports.MsgSwapForExactTokens.encode(request).finish();
        var promise = this.rpc.request('kava.swap.v1beta1.Msg', 'SwapForExactTokens', data);
        return promise.then(function (data) {
            return exports.MsgSwapForExactTokensResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
