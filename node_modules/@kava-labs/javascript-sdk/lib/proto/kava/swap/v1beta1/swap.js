"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShareRecord = exports.PoolRecord = exports.AllowedPool = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.swap.v1beta1';
function createBaseParams() {
    return { allowedPools: [], swapFee: '' };
}
exports.Params = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.allowedPools), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.AllowedPool.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (message.swapFee !== '') {
            writer.uint32(18).string(message.swapFee);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allowedPools.push(exports.AllowedPool.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.swapFee = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            allowedPools: Array.isArray(object === null || object === void 0 ? void 0 : object.allowedPools)
                ? object.allowedPools.map(function (e) { return exports.AllowedPool.fromJSON(e); })
                : [],
            swapFee: isSet(object.swapFee) ? String(object.swapFee) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.allowedPools) {
            obj.allowedPools = message.allowedPools.map(function (e) {
                return e ? exports.AllowedPool.toJSON(e) : undefined;
            });
        }
        else {
            obj.allowedPools = [];
        }
        message.swapFee !== undefined && (obj.swapFee = message.swapFee);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseParams();
        message.allowedPools =
            ((_a = object.allowedPools) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.AllowedPool.fromPartial(e); })) || [];
        message.swapFee = (_b = object.swapFee) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseAllowedPool() {
    return { tokenA: '', tokenB: '' };
}
exports.AllowedPool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.tokenA !== '') {
            writer.uint32(10).string(message.tokenA);
        }
        if (message.tokenB !== '') {
            writer.uint32(18).string(message.tokenB);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllowedPool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenA = reader.string();
                    break;
                case 2:
                    message.tokenB = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            tokenA: isSet(object.tokenA) ? String(object.tokenA) : '',
            tokenB: isSet(object.tokenB) ? String(object.tokenB) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.tokenA !== undefined && (obj.tokenA = message.tokenA);
        message.tokenB !== undefined && (obj.tokenB = message.tokenB);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseAllowedPool();
        message.tokenA = (_a = object.tokenA) !== null && _a !== void 0 ? _a : '';
        message.tokenB = (_b = object.tokenB) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBasePoolRecord() {
    return {
        poolId: '',
        reservesA: undefined,
        reservesB: undefined,
        totalShares: '',
    };
}
exports.PoolRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.poolId !== '') {
            writer.uint32(10).string(message.poolId);
        }
        if (message.reservesA !== undefined) {
            coin_1.Coin.encode(message.reservesA, writer.uint32(18).fork()).ldelim();
        }
        if (message.reservesB !== undefined) {
            coin_1.Coin.encode(message.reservesB, writer.uint32(26).fork()).ldelim();
        }
        if (message.totalShares !== '') {
            writer.uint32(34).string(message.totalShares);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePoolRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.string();
                    break;
                case 2:
                    message.reservesA = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.reservesB = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.totalShares = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            poolId: isSet(object.poolId) ? String(object.poolId) : '',
            reservesA: isSet(object.reservesA)
                ? coin_1.Coin.fromJSON(object.reservesA)
                : undefined,
            reservesB: isSet(object.reservesB)
                ? coin_1.Coin.fromJSON(object.reservesB)
                : undefined,
            totalShares: isSet(object.totalShares) ? String(object.totalShares) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.poolId !== undefined && (obj.poolId = message.poolId);
        message.reservesA !== undefined &&
            (obj.reservesA = message.reservesA
                ? coin_1.Coin.toJSON(message.reservesA)
                : undefined);
        message.reservesB !== undefined &&
            (obj.reservesB = message.reservesB
                ? coin_1.Coin.toJSON(message.reservesB)
                : undefined);
        message.totalShares !== undefined &&
            (obj.totalShares = message.totalShares);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBasePoolRecord();
        message.poolId = (_a = object.poolId) !== null && _a !== void 0 ? _a : '';
        message.reservesA =
            object.reservesA !== undefined && object.reservesA !== null
                ? coin_1.Coin.fromPartial(object.reservesA)
                : undefined;
        message.reservesB =
            object.reservesB !== undefined && object.reservesB !== null
                ? coin_1.Coin.fromPartial(object.reservesB)
                : undefined;
        message.totalShares = (_b = object.totalShares) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseShareRecord() {
    return { depositor: new Uint8Array(), poolId: '', sharesOwned: '' };
}
exports.ShareRecord = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor.length !== 0) {
            writer.uint32(10).bytes(message.depositor);
        }
        if (message.poolId !== '') {
            writer.uint32(18).string(message.poolId);
        }
        if (message.sharesOwned !== '') {
            writer.uint32(26).string(message.sharesOwned);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseShareRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.bytes();
                    break;
                case 2:
                    message.poolId = reader.string();
                    break;
                case 3:
                    message.sharesOwned = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor)
                ? bytesFromBase64(object.depositor)
                : new Uint8Array(),
            poolId: isSet(object.poolId) ? String(object.poolId) : '',
            sharesOwned: isSet(object.sharesOwned) ? String(object.sharesOwned) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined &&
            (obj.depositor = base64FromBytes(message.depositor !== undefined ? message.depositor : new Uint8Array()));
        message.poolId !== undefined && (obj.poolId = message.poolId);
        message.sharesOwned !== undefined &&
            (obj.sharesOwned = message.sharesOwned);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseShareRecord();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.poolId = (_b = object.poolId) !== null && _b !== void 0 ? _b : '';
        message.sharesOwned = (_c = object.sharesOwned) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_2, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
