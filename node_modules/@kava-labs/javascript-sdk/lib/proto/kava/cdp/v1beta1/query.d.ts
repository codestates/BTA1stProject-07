import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Params } from '../../../kava/cdp/v1beta1/genesis';
import { PageRequest, PageResponse } from '../../../cosmos/base/query/v1beta1/pagination';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
import { ModuleAccount } from '../../../cosmos/auth/v1beta1/auth';
import { Deposit, TotalPrincipal, TotalCollateral } from '../../../kava/cdp/v1beta1/cdp';
export declare const protobufPackage = "kava.cdp.v1beta1";
/** QueryParamsRequest defines the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse defines the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    params?: Params;
}
/** QueryAccountsRequest defines the request type for the Query/Accounts RPC method. */
export interface QueryAccountsRequest {
}
/** QueryAccountsResponse defines the response type for the Query/Accounts RPC method. */
export interface QueryAccountsResponse {
    accounts: ModuleAccount[];
}
/** QueryCdpRequest defines the request type for the Query/Cdp RPC method. */
export interface QueryCdpRequest {
    collateralType: string;
    owner: string;
}
/** QueryCdpResponse defines the response type for the Query/Cdp RPC method. */
export interface QueryCdpResponse {
    cdp?: CDPResponse;
}
/** QueryCdpsRequest is the params for a filtered CDP query, the request type for the Query/Cdps RPC method. */
export interface QueryCdpsRequest {
    collateralType: string;
    owner: string;
    id: Long;
    /** sdk.Dec as a string */
    ratio: string;
    pagination?: PageRequest;
}
/** QueryCdpsResponse defines the response type for the Query/Cdps RPC method. */
export interface QueryCdpsResponse {
    cdps: CDPResponse[];
    pagination?: PageResponse;
}
/** QueryDepositsRequest defines the request type for the Query/Deposits RPC method. */
export interface QueryDepositsRequest {
    collateralType: string;
    owner: string;
}
/** QueryDepositsResponse defines the response type for the Query/Deposits RPC method. */
export interface QueryDepositsResponse {
    deposits: Deposit[];
}
/** QueryTotalPrincipalRequest defines the request type for the Query/TotalPrincipal RPC method. */
export interface QueryTotalPrincipalRequest {
    collateralType: string;
}
/** QueryTotalPrincipalResponse defines the response type for the Query/TotalPrincipal RPC method. */
export interface QueryTotalPrincipalResponse {
    totalPrincipal: TotalPrincipal[];
}
/** QueryTotalCollateralRequest defines the request type for the Query/TotalCollateral RPC method. */
export interface QueryTotalCollateralRequest {
    collateralType: string;
}
/** QueryTotalCollateralResponse defines the response type for the Query/TotalCollateral RPC method. */
export interface QueryTotalCollateralResponse {
    totalCollateral: TotalCollateral[];
}
/** CDPResponse defines the state of a single collateralized debt position. */
export interface CDPResponse {
    id: Long;
    owner: string;
    type: string;
    collateral?: Coin;
    principal?: Coin;
    accumulatedFees?: Coin;
    feesUpdated?: Date;
    interestFactor: string;
    collateralValue?: Coin;
    collateralizationRatio: string;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            collateralParams?: {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[] | undefined;
            debtParam?: {
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } | undefined;
            globalDebtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            surplusAuctionThreshold?: string | undefined;
            surplusAuctionLot?: string | undefined;
            debtAuctionThreshold?: string | undefined;
            debtAuctionLot?: string | undefined;
            circuitBreaker?: boolean | undefined;
        } | undefined;
    } & {
        params?: ({
            collateralParams?: {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[] | undefined;
            debtParam?: {
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } | undefined;
            globalDebtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            surplusAuctionThreshold?: string | undefined;
            surplusAuctionLot?: string | undefined;
            debtAuctionThreshold?: string | undefined;
            debtAuctionLot?: string | undefined;
            circuitBreaker?: boolean | undefined;
        } & {
            collateralParams?: ({
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            } & {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & Record<Exclude<keyof I["params"]["collateralParams"][number]["debtLimit"], keyof Coin>, never>) | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            } & Record<Exclude<keyof I["params"]["collateralParams"][number], keyof import("../../../kava/cdp/v1beta1/genesis").CollateralParam>, never>)[] & Record<Exclude<keyof I["params"]["collateralParams"], keyof {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[]>, never>) | undefined;
            debtParam?: ({
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } & {
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } & Record<Exclude<keyof I["params"]["debtParam"], keyof import("../../../kava/cdp/v1beta1/genesis").DebtParam>, never>) | undefined;
            globalDebtLimit?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["params"]["globalDebtLimit"], keyof Coin>, never>) | undefined;
            surplusAuctionThreshold?: string | undefined;
            surplusAuctionLot?: string | undefined;
            debtAuctionThreshold?: string | undefined;
            debtAuctionLot?: string | undefined;
            circuitBreaker?: boolean | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
};
export declare const QueryAccountsRequest: {
    encode(_: QueryAccountsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAccountsRequest;
    fromJSON(_: any): QueryAccountsRequest;
    toJSON(_: QueryAccountsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryAccountsRequest;
};
export declare const QueryAccountsResponse: {
    encode(message: QueryAccountsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAccountsResponse;
    fromJSON(object: any): QueryAccountsResponse;
    toJSON(message: QueryAccountsResponse): unknown;
    fromPartial<I extends {
        accounts?: {
            baseAccount?: {
                address?: string | undefined;
                pubKey?: {
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
                accountNumber?: string | number | Long | undefined;
                sequence?: string | number | Long | undefined;
            } | undefined;
            name?: string | undefined;
            permissions?: string[] | undefined;
        }[] | undefined;
    } & {
        accounts?: ({
            baseAccount?: {
                address?: string | undefined;
                pubKey?: {
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
                accountNumber?: string | number | Long | undefined;
                sequence?: string | number | Long | undefined;
            } | undefined;
            name?: string | undefined;
            permissions?: string[] | undefined;
        }[] & ({
            baseAccount?: {
                address?: string | undefined;
                pubKey?: {
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
                accountNumber?: string | number | Long | undefined;
                sequence?: string | number | Long | undefined;
            } | undefined;
            name?: string | undefined;
            permissions?: string[] | undefined;
        } & {
            baseAccount?: ({
                address?: string | undefined;
                pubKey?: {
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
                accountNumber?: string | number | Long | undefined;
                sequence?: string | number | Long | undefined;
            } & {
                address?: string | undefined;
                pubKey?: ({
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } & {
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["accounts"][number]["baseAccount"]["pubKey"], keyof import("../../../google/protobuf/any").Any>, never>) | undefined;
                accountNumber?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & Record<Exclude<keyof I["accounts"][number]["baseAccount"]["accountNumber"], keyof Long>, never>) | undefined;
                sequence?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & Record<Exclude<keyof I["accounts"][number]["baseAccount"]["sequence"], keyof Long>, never>) | undefined;
            } & Record<Exclude<keyof I["accounts"][number]["baseAccount"], keyof import("../../../cosmos/auth/v1beta1/auth").BaseAccount>, never>) | undefined;
            name?: string | undefined;
            permissions?: (string[] & string[] & Record<Exclude<keyof I["accounts"][number]["permissions"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["accounts"][number], keyof ModuleAccount>, never>)[] & Record<Exclude<keyof I["accounts"], keyof {
            baseAccount?: {
                address?: string | undefined;
                pubKey?: {
                    typeUrl?: string | undefined;
                    value?: Uint8Array | undefined;
                } | undefined;
                accountNumber?: string | number | Long | undefined;
                sequence?: string | number | Long | undefined;
            } | undefined;
            name?: string | undefined;
            permissions?: string[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "accounts">, never>>(object: I): QueryAccountsResponse;
};
export declare const QueryCdpRequest: {
    encode(message: QueryCdpRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCdpRequest;
    fromJSON(object: any): QueryCdpRequest;
    toJSON(message: QueryCdpRequest): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        owner?: string | undefined;
    } & {
        collateralType?: string | undefined;
        owner?: string | undefined;
    } & Record<Exclude<keyof I, keyof QueryCdpRequest>, never>>(object: I): QueryCdpRequest;
};
export declare const QueryCdpResponse: {
    encode(message: QueryCdpResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCdpResponse;
    fromJSON(object: any): QueryCdpResponse;
    toJSON(message: QueryCdpResponse): unknown;
    fromPartial<I extends {
        cdp?: {
            id?: string | number | Long | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            collateralizationRatio?: string | undefined;
        } | undefined;
    } & {
        cdp?: ({
            id?: string | number | Long | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            collateralizationRatio?: string | undefined;
        } & {
            id?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["cdp"]["id"], keyof Long>, never>) | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdp"]["collateral"], keyof Coin>, never>) | undefined;
            principal?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdp"]["principal"], keyof Coin>, never>) | undefined;
            accumulatedFees?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdp"]["accumulatedFees"], keyof Coin>, never>) | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdp"]["collateralValue"], keyof Coin>, never>) | undefined;
            collateralizationRatio?: string | undefined;
        } & Record<Exclude<keyof I["cdp"], keyof CDPResponse>, never>) | undefined;
    } & Record<Exclude<keyof I, "cdp">, never>>(object: I): QueryCdpResponse;
};
export declare const QueryCdpsRequest: {
    encode(message: QueryCdpsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCdpsRequest;
    fromJSON(object: any): QueryCdpsRequest;
    toJSON(message: QueryCdpsRequest): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        owner?: string | undefined;
        id?: string | number | Long | undefined;
        ratio?: string | undefined;
        pagination?: {
            key?: Uint8Array | undefined;
            offset?: string | number | Long | undefined;
            limit?: string | number | Long | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } | undefined;
    } & {
        collateralType?: string | undefined;
        owner?: string | undefined;
        id?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & Record<Exclude<keyof I["id"], keyof Long>, never>) | undefined;
        ratio?: string | undefined;
        pagination?: ({
            key?: Uint8Array | undefined;
            offset?: string | number | Long | undefined;
            limit?: string | number | Long | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } & {
            key?: Uint8Array | undefined;
            offset?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["pagination"]["offset"], keyof Long>, never>) | undefined;
            limit?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["pagination"]["limit"], keyof Long>, never>) | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } & Record<Exclude<keyof I["pagination"], keyof PageRequest>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryCdpsRequest>, never>>(object: I): QueryCdpsRequest;
};
export declare const QueryCdpsResponse: {
    encode(message: QueryCdpsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCdpsResponse;
    fromJSON(object: any): QueryCdpsResponse;
    toJSON(message: QueryCdpsResponse): unknown;
    fromPartial<I extends {
        cdps?: {
            id?: string | number | Long | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            collateralizationRatio?: string | undefined;
        }[] | undefined;
        pagination?: {
            nextKey?: Uint8Array | undefined;
            total?: string | number | Long | undefined;
        } | undefined;
    } & {
        cdps?: ({
            id?: string | number | Long | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            collateralizationRatio?: string | undefined;
        }[] & ({
            id?: string | number | Long | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            collateralizationRatio?: string | undefined;
        } & {
            id?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["cdps"][number]["id"], keyof Long>, never>) | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["collateral"], keyof Coin>, never>) | undefined;
            principal?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["principal"], keyof Coin>, never>) | undefined;
            accumulatedFees?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["accumulatedFees"], keyof Coin>, never>) | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["collateralValue"], keyof Coin>, never>) | undefined;
            collateralizationRatio?: string | undefined;
        } & Record<Exclude<keyof I["cdps"][number], keyof CDPResponse>, never>)[] & Record<Exclude<keyof I["cdps"], keyof {
            id?: string | number | Long | undefined;
            owner?: string | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
            collateralValue?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            collateralizationRatio?: string | undefined;
        }[]>, never>) | undefined;
        pagination?: ({
            nextKey?: Uint8Array | undefined;
            total?: string | number | Long | undefined;
        } & {
            nextKey?: Uint8Array | undefined;
            total?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["pagination"]["total"], keyof Long>, never>) | undefined;
        } & Record<Exclude<keyof I["pagination"], keyof PageResponse>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryCdpsResponse>, never>>(object: I): QueryCdpsResponse;
};
export declare const QueryDepositsRequest: {
    encode(message: QueryDepositsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryDepositsRequest;
    fromJSON(object: any): QueryDepositsRequest;
    toJSON(message: QueryDepositsRequest): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        owner?: string | undefined;
    } & {
        collateralType?: string | undefined;
        owner?: string | undefined;
    } & Record<Exclude<keyof I, keyof QueryDepositsRequest>, never>>(object: I): QueryDepositsRequest;
};
export declare const QueryDepositsResponse: {
    encode(message: QueryDepositsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryDepositsResponse;
    fromJSON(object: any): QueryDepositsResponse;
    toJSON(message: QueryDepositsResponse): unknown;
    fromPartial<I extends {
        deposits?: {
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        deposits?: ({
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            cdpId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["deposits"][number]["cdpId"], keyof Long>, never>) | undefined;
            depositor?: string | undefined;
            amount?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["deposits"][number]["amount"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["deposits"][number], keyof Deposit>, never>)[] & Record<Exclude<keyof I["deposits"], keyof {
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "deposits">, never>>(object: I): QueryDepositsResponse;
};
export declare const QueryTotalPrincipalRequest: {
    encode(message: QueryTotalPrincipalRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTotalPrincipalRequest;
    fromJSON(object: any): QueryTotalPrincipalRequest;
    toJSON(message: QueryTotalPrincipalRequest): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
    } & {
        collateralType?: string | undefined;
    } & Record<Exclude<keyof I, "collateralType">, never>>(object: I): QueryTotalPrincipalRequest;
};
export declare const QueryTotalPrincipalResponse: {
    encode(message: QueryTotalPrincipalResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTotalPrincipalResponse;
    fromJSON(object: any): QueryTotalPrincipalResponse;
    toJSON(message: QueryTotalPrincipalResponse): unknown;
    fromPartial<I extends {
        totalPrincipal?: {
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        totalPrincipal?: ({
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            collateralType?: string | undefined;
            amount?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["totalPrincipal"][number]["amount"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["totalPrincipal"][number], keyof TotalPrincipal>, never>)[] & Record<Exclude<keyof I["totalPrincipal"], keyof {
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "totalPrincipal">, never>>(object: I): QueryTotalPrincipalResponse;
};
export declare const QueryTotalCollateralRequest: {
    encode(message: QueryTotalCollateralRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTotalCollateralRequest;
    fromJSON(object: any): QueryTotalCollateralRequest;
    toJSON(message: QueryTotalCollateralRequest): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
    } & {
        collateralType?: string | undefined;
    } & Record<Exclude<keyof I, "collateralType">, never>>(object: I): QueryTotalCollateralRequest;
};
export declare const QueryTotalCollateralResponse: {
    encode(message: QueryTotalCollateralResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryTotalCollateralResponse;
    fromJSON(object: any): QueryTotalCollateralResponse;
    toJSON(message: QueryTotalCollateralResponse): unknown;
    fromPartial<I extends {
        totalCollateral?: {
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        totalCollateral?: ({
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            collateralType?: string | undefined;
            amount?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["totalCollateral"][number]["amount"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["totalCollateral"][number], keyof TotalCollateral>, never>)[] & Record<Exclude<keyof I["totalCollateral"], keyof {
            collateralType?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "totalCollateral">, never>>(object: I): QueryTotalCollateralResponse;
};
export declare const CDPResponse: {
    encode(message: CDPResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CDPResponse;
    fromJSON(object: any): CDPResponse;
    toJSON(message: CDPResponse): unknown;
    fromPartial<I extends {
        id?: string | number | Long | undefined;
        owner?: string | undefined;
        type?: string | undefined;
        collateral?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        principal?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        accumulatedFees?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        feesUpdated?: Date | undefined;
        interestFactor?: string | undefined;
        collateralValue?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        collateralizationRatio?: string | undefined;
    } & {
        id?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & Record<Exclude<keyof I["id"], keyof Long>, never>) | undefined;
        owner?: string | undefined;
        type?: string | undefined;
        collateral?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["collateral"], keyof Coin>, never>) | undefined;
        principal?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["principal"], keyof Coin>, never>) | undefined;
        accumulatedFees?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["accumulatedFees"], keyof Coin>, never>) | undefined;
        feesUpdated?: Date | undefined;
        interestFactor?: string | undefined;
        collateralValue?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["collateralValue"], keyof Coin>, never>) | undefined;
        collateralizationRatio?: string | undefined;
    } & Record<Exclude<keyof I, keyof CDPResponse>, never>>(object: I): CDPResponse;
};
/** Query defines the gRPC querier service for cdp module */
export interface Query {
    /** Params queries all parameters of the cdp module. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** Accounts queries the CDP module accounts. */
    Accounts(request: QueryAccountsRequest): Promise<QueryAccountsResponse>;
    /** TotalPrincipal queries the total principal of a given collateral type. */
    TotalPrincipal(request: QueryTotalPrincipalRequest): Promise<QueryTotalPrincipalResponse>;
    /** TotalCollateral queries the total collateral of a given collateral type. */
    TotalCollateral(request: QueryTotalCollateralRequest): Promise<QueryTotalCollateralResponse>;
    /** Cdps queries all active CDPs. */
    Cdps(request: QueryCdpsRequest): Promise<QueryCdpsResponse>;
    /** Cdp queries a CDP with the input owner address and collateral type. */
    Cdp(request: QueryCdpRequest): Promise<QueryCdpResponse>;
    /** Deposits queries deposits associated with the CDP owned by an address for a collateral type. */
    Deposits(request: QueryDepositsRequest): Promise<QueryDepositsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    Accounts(request: QueryAccountsRequest): Promise<QueryAccountsResponse>;
    TotalPrincipal(request: QueryTotalPrincipalRequest): Promise<QueryTotalPrincipalResponse>;
    TotalCollateral(request: QueryTotalCollateralRequest): Promise<QueryTotalCollateralResponse>;
    Cdps(request: QueryCdpsRequest): Promise<QueryCdpsResponse>;
    Cdp(request: QueryCdpRequest): Promise<QueryCdpResponse>;
    Deposits(request: QueryDepositsRequest): Promise<QueryDepositsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
