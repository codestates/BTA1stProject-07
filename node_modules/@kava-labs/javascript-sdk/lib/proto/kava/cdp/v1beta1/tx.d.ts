import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
export declare const protobufPackage = "kava.cdp.v1beta1";
/** MsgCreateCDP defines a message to create a new CDP. */
export interface MsgCreateCDP {
    sender: string;
    collateral?: Coin;
    principal?: Coin;
    collateralType: string;
}
/** MsgCreateCDPResponse defines the Msg/CreateCDP response type. */
export interface MsgCreateCDPResponse {
    cdpId: Long;
}
/** MsgDeposit defines a message to deposit to a CDP. */
export interface MsgDeposit {
    depositor: string;
    owner: string;
    collateral?: Coin;
    collateralType: string;
}
/** MsgDepositResponse defines the Msg/Deposit response type. */
export interface MsgDepositResponse {
}
/** MsgWithdraw defines a message to withdraw collateral from a CDP. */
export interface MsgWithdraw {
    depositor: string;
    owner: string;
    collateral?: Coin;
    collateralType: string;
}
/** MsgWithdrawResponse defines the Msg/Withdraw response type. */
export interface MsgWithdrawResponse {
}
/** MsgDrawDebt defines a message to draw debt from a CDP. */
export interface MsgDrawDebt {
    sender: string;
    collateralType: string;
    principal?: Coin;
}
/** MsgDrawDebtResponse defines the Msg/DrawDebt response type. */
export interface MsgDrawDebtResponse {
}
/** MsgRepayDebt defines a message to repay debt from a CDP. */
export interface MsgRepayDebt {
    sender: string;
    collateralType: string;
    payment?: Coin;
}
/** MsgRepayDebtResponse defines the Msg/RepayDebt response type. */
export interface MsgRepayDebtResponse {
}
/**
 * MsgLiquidate defines a message to attempt to liquidate a CDP whos
 * collateralization ratio is under its liquidation ratio.
 */
export interface MsgLiquidate {
    keeper: string;
    borrower: string;
    collateralType: string;
}
/** MsgLiquidateResponse defines the Msg/Liquidate response type. */
export interface MsgLiquidateResponse {
}
export declare const MsgCreateCDP: {
    encode(message: MsgCreateCDP, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgCreateCDP;
    fromJSON(object: any): MsgCreateCDP;
    toJSON(message: MsgCreateCDP): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        collateral?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        principal?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        collateralType?: string | undefined;
    } & {
        sender?: string | undefined;
        collateral?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["collateral"], keyof Coin>, never>) | undefined;
        principal?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["principal"], keyof Coin>, never>) | undefined;
        collateralType?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgCreateCDP>, never>>(object: I): MsgCreateCDP;
};
export declare const MsgCreateCDPResponse: {
    encode(message: MsgCreateCDPResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgCreateCDPResponse;
    fromJSON(object: any): MsgCreateCDPResponse;
    toJSON(message: MsgCreateCDPResponse): unknown;
    fromPartial<I extends {
        cdpId?: string | number | Long | undefined;
    } & {
        cdpId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & Record<Exclude<keyof I["cdpId"], keyof Long>, never>) | undefined;
    } & Record<Exclude<keyof I, "cdpId">, never>>(object: I): MsgCreateCDPResponse;
};
export declare const MsgDeposit: {
    encode(message: MsgDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDeposit;
    fromJSON(object: any): MsgDeposit;
    toJSON(message: MsgDeposit): unknown;
    fromPartial<I extends {
        depositor?: string | undefined;
        owner?: string | undefined;
        collateral?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        collateralType?: string | undefined;
    } & {
        depositor?: string | undefined;
        owner?: string | undefined;
        collateral?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["collateral"], keyof Coin>, never>) | undefined;
        collateralType?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgDeposit>, never>>(object: I): MsgDeposit;
};
export declare const MsgDepositResponse: {
    encode(_: MsgDepositResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDepositResponse;
    fromJSON(_: any): MsgDepositResponse;
    toJSON(_: MsgDepositResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgDepositResponse;
};
export declare const MsgWithdraw: {
    encode(message: MsgWithdraw, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdraw;
    fromJSON(object: any): MsgWithdraw;
    toJSON(message: MsgWithdraw): unknown;
    fromPartial<I extends {
        depositor?: string | undefined;
        owner?: string | undefined;
        collateral?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        collateralType?: string | undefined;
    } & {
        depositor?: string | undefined;
        owner?: string | undefined;
        collateral?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["collateral"], keyof Coin>, never>) | undefined;
        collateralType?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgWithdraw>, never>>(object: I): MsgWithdraw;
};
export declare const MsgWithdrawResponse: {
    encode(_: MsgWithdrawResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgWithdrawResponse;
    fromJSON(_: any): MsgWithdrawResponse;
    toJSON(_: MsgWithdrawResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgWithdrawResponse;
};
export declare const MsgDrawDebt: {
    encode(message: MsgDrawDebt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDrawDebt;
    fromJSON(object: any): MsgDrawDebt;
    toJSON(message: MsgDrawDebt): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        collateralType?: string | undefined;
        principal?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        collateralType?: string | undefined;
        principal?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["principal"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgDrawDebt>, never>>(object: I): MsgDrawDebt;
};
export declare const MsgDrawDebtResponse: {
    encode(_: MsgDrawDebtResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDrawDebtResponse;
    fromJSON(_: any): MsgDrawDebtResponse;
    toJSON(_: MsgDrawDebtResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgDrawDebtResponse;
};
export declare const MsgRepayDebt: {
    encode(message: MsgRepayDebt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRepayDebt;
    fromJSON(object: any): MsgRepayDebt;
    toJSON(message: MsgRepayDebt): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        collateralType?: string | undefined;
        payment?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        collateralType?: string | undefined;
        payment?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["payment"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgRepayDebt>, never>>(object: I): MsgRepayDebt;
};
export declare const MsgRepayDebtResponse: {
    encode(_: MsgRepayDebtResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRepayDebtResponse;
    fromJSON(_: any): MsgRepayDebtResponse;
    toJSON(_: MsgRepayDebtResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgRepayDebtResponse;
};
export declare const MsgLiquidate: {
    encode(message: MsgLiquidate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgLiquidate;
    fromJSON(object: any): MsgLiquidate;
    toJSON(message: MsgLiquidate): unknown;
    fromPartial<I extends {
        keeper?: string | undefined;
        borrower?: string | undefined;
        collateralType?: string | undefined;
    } & {
        keeper?: string | undefined;
        borrower?: string | undefined;
        collateralType?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgLiquidate>, never>>(object: I): MsgLiquidate;
};
export declare const MsgLiquidateResponse: {
    encode(_: MsgLiquidateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgLiquidateResponse;
    fromJSON(_: any): MsgLiquidateResponse;
    toJSON(_: MsgLiquidateResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgLiquidateResponse;
};
/** Msg defines the cdp Msg service. */
export interface Msg {
    /** CreateCDP defines a method to create a new CDP. */
    CreateCDP(request: MsgCreateCDP): Promise<MsgCreateCDPResponse>;
    /** Deposit defines a method to deposit to a CDP. */
    Deposit(request: MsgDeposit): Promise<MsgDepositResponse>;
    /** Withdraw defines a method to withdraw collateral from a CDP. */
    Withdraw(request: MsgWithdraw): Promise<MsgWithdrawResponse>;
    /** DrawDebt defines a method to draw debt from a CDP. */
    DrawDebt(request: MsgDrawDebt): Promise<MsgDrawDebtResponse>;
    /** RepayDebt defines a method to repay debt from a CDP. */
    RepayDebt(request: MsgRepayDebt): Promise<MsgRepayDebtResponse>;
    /**
     * Liquidate defines a method to attempt to liquidate a CDP whos
     * collateralization ratio is under its liquidation ratio.
     */
    Liquidate(request: MsgLiquidate): Promise<MsgLiquidateResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    CreateCDP(request: MsgCreateCDP): Promise<MsgCreateCDPResponse>;
    Deposit(request: MsgDeposit): Promise<MsgDepositResponse>;
    Withdraw(request: MsgWithdraw): Promise<MsgWithdrawResponse>;
    DrawDebt(request: MsgDrawDebt): Promise<MsgDrawDebtResponse>;
    RepayDebt(request: MsgRepayDebt): Promise<MsgRepayDebtResponse>;
    Liquidate(request: MsgLiquidate): Promise<MsgLiquidateResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
