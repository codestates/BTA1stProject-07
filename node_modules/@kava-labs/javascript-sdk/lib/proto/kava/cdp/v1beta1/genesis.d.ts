import Long from 'long';
import _m0 from 'protobufjs/minimal';
import { Coin } from '../../../cosmos/base/v1beta1/coin';
import { CDP, Deposit } from '../../../kava/cdp/v1beta1/cdp';
export declare const protobufPackage = "kava.cdp.v1beta1";
/** GenesisState defines the cdp module's genesis state. */
export interface GenesisState {
    /** params defines all the paramaters of the module. */
    params?: Params;
    cdps: CDP[];
    deposits: Deposit[];
    startingCdpId: Long;
    debtDenom: string;
    govDenom: string;
    previousAccumulationTimes: GenesisAccumulationTime[];
    totalPrincipals: GenesisTotalPrincipal[];
}
/** Params defines the parameters for the cdp module. */
export interface Params {
    collateralParams: CollateralParam[];
    debtParam?: DebtParam;
    globalDebtLimit?: Coin;
    surplusAuctionThreshold: string;
    surplusAuctionLot: string;
    debtAuctionThreshold: string;
    debtAuctionLot: string;
    circuitBreaker: boolean;
}
/** DebtParam defines governance params for debt assets */
export interface DebtParam {
    denom: string;
    referenceAsset: string;
    conversionFactor: string;
    debtFloor: string;
}
/** CollateralParam defines governance parameters for each collateral type within the cdp module */
export interface CollateralParam {
    denom: string;
    type: string;
    liquidationRatio: string;
    debtLimit?: Coin;
    stabilityFee: string;
    auctionSize: string;
    liquidationPenalty: string;
    spotMarketId: string;
    liquidationMarketId: string;
    keeperRewardPercentage: string;
    checkCollateralizationIndexCount: string;
    conversionFactor: string;
}
/** GenesisAccumulationTime defines the previous distribution time and its corresponding denom */
export interface GenesisAccumulationTime {
    collateralType: string;
    previousAccumulationTime?: Date;
    interestFactor: string;
}
/** GenesisTotalPrincipal defines the total principal and its corresponding collateral type */
export interface GenesisTotalPrincipal {
    collateralType: string;
    totalPrincipal: string;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        params?: {
            collateralParams?: {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[] | undefined;
            debtParam?: {
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } | undefined;
            globalDebtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            surplusAuctionThreshold?: string | undefined;
            surplusAuctionLot?: string | undefined;
            debtAuctionThreshold?: string | undefined;
            debtAuctionLot?: string | undefined;
            circuitBreaker?: boolean | undefined;
        } | undefined;
        cdps?: {
            id?: string | number | Long | undefined;
            owner?: Uint8Array | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
        }[] | undefined;
        deposits?: {
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
        startingCdpId?: string | number | Long | undefined;
        debtDenom?: string | undefined;
        govDenom?: string | undefined;
        previousAccumulationTimes?: {
            collateralType?: string | undefined;
            previousAccumulationTime?: Date | undefined;
            interestFactor?: string | undefined;
        }[] | undefined;
        totalPrincipals?: {
            collateralType?: string | undefined;
            totalPrincipal?: string | undefined;
        }[] | undefined;
    } & {
        params?: ({
            collateralParams?: {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[] | undefined;
            debtParam?: {
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } | undefined;
            globalDebtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            surplusAuctionThreshold?: string | undefined;
            surplusAuctionLot?: string | undefined;
            debtAuctionThreshold?: string | undefined;
            debtAuctionLot?: string | undefined;
            circuitBreaker?: boolean | undefined;
        } & {
            collateralParams?: ({
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            } & {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & Record<Exclude<keyof I["params"]["collateralParams"][number]["debtLimit"], keyof Coin>, never>) | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            } & Record<Exclude<keyof I["params"]["collateralParams"][number], keyof CollateralParam>, never>)[] & Record<Exclude<keyof I["params"]["collateralParams"], keyof {
                denom?: string | undefined;
                type?: string | undefined;
                liquidationRatio?: string | undefined;
                debtLimit?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                stabilityFee?: string | undefined;
                auctionSize?: string | undefined;
                liquidationPenalty?: string | undefined;
                spotMarketId?: string | undefined;
                liquidationMarketId?: string | undefined;
                keeperRewardPercentage?: string | undefined;
                checkCollateralizationIndexCount?: string | undefined;
                conversionFactor?: string | undefined;
            }[]>, never>) | undefined;
            debtParam?: ({
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } & {
                denom?: string | undefined;
                referenceAsset?: string | undefined;
                conversionFactor?: string | undefined;
                debtFloor?: string | undefined;
            } & Record<Exclude<keyof I["params"]["debtParam"], keyof DebtParam>, never>) | undefined;
            globalDebtLimit?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["params"]["globalDebtLimit"], keyof Coin>, never>) | undefined;
            surplusAuctionThreshold?: string | undefined;
            surplusAuctionLot?: string | undefined;
            debtAuctionThreshold?: string | undefined;
            debtAuctionLot?: string | undefined;
            circuitBreaker?: boolean | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
        cdps?: ({
            id?: string | number | Long | undefined;
            owner?: Uint8Array | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
        }[] & ({
            id?: string | number | Long | undefined;
            owner?: Uint8Array | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
        } & {
            id?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["cdps"][number]["id"], keyof Long>, never>) | undefined;
            owner?: Uint8Array | undefined;
            type?: string | undefined;
            collateral?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["collateral"], keyof Coin>, never>) | undefined;
            principal?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["principal"], keyof Coin>, never>) | undefined;
            accumulatedFees?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["cdps"][number]["accumulatedFees"], keyof Coin>, never>) | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
        } & Record<Exclude<keyof I["cdps"][number], keyof CDP>, never>)[] & Record<Exclude<keyof I["cdps"], keyof {
            id?: string | number | Long | undefined;
            owner?: Uint8Array | undefined;
            type?: string | undefined;
            collateral?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            principal?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            accumulatedFees?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            feesUpdated?: Date | undefined;
            interestFactor?: string | undefined;
        }[]>, never>) | undefined;
        deposits?: ({
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            cdpId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & Record<Exclude<keyof I["deposits"][number]["cdpId"], keyof Long>, never>) | undefined;
            depositor?: string | undefined;
            amount?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["deposits"][number]["amount"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["deposits"][number], keyof Deposit>, never>)[] & Record<Exclude<keyof I["deposits"], keyof {
            cdpId?: string | number | Long | undefined;
            depositor?: string | undefined;
            amount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        startingCdpId?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & Record<Exclude<keyof I["startingCdpId"], keyof Long>, never>) | undefined;
        debtDenom?: string | undefined;
        govDenom?: string | undefined;
        previousAccumulationTimes?: ({
            collateralType?: string | undefined;
            previousAccumulationTime?: Date | undefined;
            interestFactor?: string | undefined;
        }[] & ({
            collateralType?: string | undefined;
            previousAccumulationTime?: Date | undefined;
            interestFactor?: string | undefined;
        } & {
            collateralType?: string | undefined;
            previousAccumulationTime?: Date | undefined;
            interestFactor?: string | undefined;
        } & Record<Exclude<keyof I["previousAccumulationTimes"][number], keyof GenesisAccumulationTime>, never>)[] & Record<Exclude<keyof I["previousAccumulationTimes"], keyof {
            collateralType?: string | undefined;
            previousAccumulationTime?: Date | undefined;
            interestFactor?: string | undefined;
        }[]>, never>) | undefined;
        totalPrincipals?: ({
            collateralType?: string | undefined;
            totalPrincipal?: string | undefined;
        }[] & ({
            collateralType?: string | undefined;
            totalPrincipal?: string | undefined;
        } & {
            collateralType?: string | undefined;
            totalPrincipal?: string | undefined;
        } & Record<Exclude<keyof I["totalPrincipals"][number], keyof GenesisTotalPrincipal>, never>)[] & Record<Exclude<keyof I["totalPrincipals"], keyof {
            collateralType?: string | undefined;
            totalPrincipal?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        collateralParams?: {
            denom?: string | undefined;
            type?: string | undefined;
            liquidationRatio?: string | undefined;
            debtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            stabilityFee?: string | undefined;
            auctionSize?: string | undefined;
            liquidationPenalty?: string | undefined;
            spotMarketId?: string | undefined;
            liquidationMarketId?: string | undefined;
            keeperRewardPercentage?: string | undefined;
            checkCollateralizationIndexCount?: string | undefined;
            conversionFactor?: string | undefined;
        }[] | undefined;
        debtParam?: {
            denom?: string | undefined;
            referenceAsset?: string | undefined;
            conversionFactor?: string | undefined;
            debtFloor?: string | undefined;
        } | undefined;
        globalDebtLimit?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        surplusAuctionThreshold?: string | undefined;
        surplusAuctionLot?: string | undefined;
        debtAuctionThreshold?: string | undefined;
        debtAuctionLot?: string | undefined;
        circuitBreaker?: boolean | undefined;
    } & {
        collateralParams?: ({
            denom?: string | undefined;
            type?: string | undefined;
            liquidationRatio?: string | undefined;
            debtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            stabilityFee?: string | undefined;
            auctionSize?: string | undefined;
            liquidationPenalty?: string | undefined;
            spotMarketId?: string | undefined;
            liquidationMarketId?: string | undefined;
            keeperRewardPercentage?: string | undefined;
            checkCollateralizationIndexCount?: string | undefined;
            conversionFactor?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            type?: string | undefined;
            liquidationRatio?: string | undefined;
            debtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            stabilityFee?: string | undefined;
            auctionSize?: string | undefined;
            liquidationPenalty?: string | undefined;
            spotMarketId?: string | undefined;
            liquidationMarketId?: string | undefined;
            keeperRewardPercentage?: string | undefined;
            checkCollateralizationIndexCount?: string | undefined;
            conversionFactor?: string | undefined;
        } & {
            denom?: string | undefined;
            type?: string | undefined;
            liquidationRatio?: string | undefined;
            debtLimit?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["collateralParams"][number]["debtLimit"], keyof Coin>, never>) | undefined;
            stabilityFee?: string | undefined;
            auctionSize?: string | undefined;
            liquidationPenalty?: string | undefined;
            spotMarketId?: string | undefined;
            liquidationMarketId?: string | undefined;
            keeperRewardPercentage?: string | undefined;
            checkCollateralizationIndexCount?: string | undefined;
            conversionFactor?: string | undefined;
        } & Record<Exclude<keyof I["collateralParams"][number], keyof CollateralParam>, never>)[] & Record<Exclude<keyof I["collateralParams"], keyof {
            denom?: string | undefined;
            type?: string | undefined;
            liquidationRatio?: string | undefined;
            debtLimit?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            stabilityFee?: string | undefined;
            auctionSize?: string | undefined;
            liquidationPenalty?: string | undefined;
            spotMarketId?: string | undefined;
            liquidationMarketId?: string | undefined;
            keeperRewardPercentage?: string | undefined;
            checkCollateralizationIndexCount?: string | undefined;
            conversionFactor?: string | undefined;
        }[]>, never>) | undefined;
        debtParam?: ({
            denom?: string | undefined;
            referenceAsset?: string | undefined;
            conversionFactor?: string | undefined;
            debtFloor?: string | undefined;
        } & {
            denom?: string | undefined;
            referenceAsset?: string | undefined;
            conversionFactor?: string | undefined;
            debtFloor?: string | undefined;
        } & Record<Exclude<keyof I["debtParam"], keyof DebtParam>, never>) | undefined;
        globalDebtLimit?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["globalDebtLimit"], keyof Coin>, never>) | undefined;
        surplusAuctionThreshold?: string | undefined;
        surplusAuctionLot?: string | undefined;
        debtAuctionThreshold?: string | undefined;
        debtAuctionLot?: string | undefined;
        circuitBreaker?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
};
export declare const DebtParam: {
    encode(message: DebtParam, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DebtParam;
    fromJSON(object: any): DebtParam;
    toJSON(message: DebtParam): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        referenceAsset?: string | undefined;
        conversionFactor?: string | undefined;
        debtFloor?: string | undefined;
    } & {
        denom?: string | undefined;
        referenceAsset?: string | undefined;
        conversionFactor?: string | undefined;
        debtFloor?: string | undefined;
    } & Record<Exclude<keyof I, keyof DebtParam>, never>>(object: I): DebtParam;
};
export declare const CollateralParam: {
    encode(message: CollateralParam, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CollateralParam;
    fromJSON(object: any): CollateralParam;
    toJSON(message: CollateralParam): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        type?: string | undefined;
        liquidationRatio?: string | undefined;
        debtLimit?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        stabilityFee?: string | undefined;
        auctionSize?: string | undefined;
        liquidationPenalty?: string | undefined;
        spotMarketId?: string | undefined;
        liquidationMarketId?: string | undefined;
        keeperRewardPercentage?: string | undefined;
        checkCollateralizationIndexCount?: string | undefined;
        conversionFactor?: string | undefined;
    } & {
        denom?: string | undefined;
        type?: string | undefined;
        liquidationRatio?: string | undefined;
        debtLimit?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["debtLimit"], keyof Coin>, never>) | undefined;
        stabilityFee?: string | undefined;
        auctionSize?: string | undefined;
        liquidationPenalty?: string | undefined;
        spotMarketId?: string | undefined;
        liquidationMarketId?: string | undefined;
        keeperRewardPercentage?: string | undefined;
        checkCollateralizationIndexCount?: string | undefined;
        conversionFactor?: string | undefined;
    } & Record<Exclude<keyof I, keyof CollateralParam>, never>>(object: I): CollateralParam;
};
export declare const GenesisAccumulationTime: {
    encode(message: GenesisAccumulationTime, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisAccumulationTime;
    fromJSON(object: any): GenesisAccumulationTime;
    toJSON(message: GenesisAccumulationTime): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        previousAccumulationTime?: Date | undefined;
        interestFactor?: string | undefined;
    } & {
        collateralType?: string | undefined;
        previousAccumulationTime?: Date | undefined;
        interestFactor?: string | undefined;
    } & Record<Exclude<keyof I, keyof GenesisAccumulationTime>, never>>(object: I): GenesisAccumulationTime;
};
export declare const GenesisTotalPrincipal: {
    encode(message: GenesisTotalPrincipal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenesisTotalPrincipal;
    fromJSON(object: any): GenesisTotalPrincipal;
    toJSON(message: GenesisTotalPrincipal): unknown;
    fromPartial<I extends {
        collateralType?: string | undefined;
        totalPrincipal?: string | undefined;
    } & {
        collateralType?: string | undefined;
        totalPrincipal?: string | undefined;
    } & Record<Exclude<keyof I, keyof GenesisTotalPrincipal>, never>>(object: I): GenesisTotalPrincipal;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
