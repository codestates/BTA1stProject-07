"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgLiquidateResponse = exports.MsgLiquidate = exports.MsgRepayDebtResponse = exports.MsgRepayDebt = exports.MsgDrawDebtResponse = exports.MsgDrawDebt = exports.MsgWithdrawResponse = exports.MsgWithdraw = exports.MsgDepositResponse = exports.MsgDeposit = exports.MsgCreateCDPResponse = exports.MsgCreateCDP = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = 'kava.cdp.v1beta1';
function createBaseMsgCreateCDP() {
    return {
        sender: '',
        collateral: undefined,
        principal: undefined,
        collateralType: '',
    };
}
exports.MsgCreateCDP = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(18).fork()).ldelim();
        }
        if (message.principal !== undefined) {
            coin_1.Coin.encode(message.principal, writer.uint32(26).fork()).ldelim();
        }
        if (message.collateralType !== '') {
            writer.uint32(34).string(message.collateralType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgCreateCDP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.principal = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.collateralType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
            principal: isSet(object.principal)
                ? coin_1.Coin.fromJSON(object.principal)
                : undefined,
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        message.principal !== undefined &&
            (obj.principal = message.principal
                ? coin_1.Coin.toJSON(message.principal)
                : undefined);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgCreateCDP();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        message.principal =
            object.principal !== undefined && object.principal !== null
                ? coin_1.Coin.fromPartial(object.principal)
                : undefined;
        message.collateralType = (_b = object.collateralType) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseMsgCreateCDPResponse() {
    return { cdpId: long_1.default.UZERO };
}
exports.MsgCreateCDPResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.cdpId.isZero()) {
            writer.uint32(8).uint64(message.cdpId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgCreateCDPResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cdpId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            cdpId: isSet(object.cdpId) ? long_1.default.fromString(object.cdpId) : long_1.default.UZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.cdpId !== undefined &&
            (obj.cdpId = (message.cdpId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseMsgCreateCDPResponse();
        message.cdpId =
            object.cdpId !== undefined && object.cdpId !== null
                ? long_1.default.fromValue(object.cdpId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgDeposit() {
    return {
        depositor: '',
        owner: '',
        collateral: undefined,
        collateralType: '',
    };
}
exports.MsgDeposit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(26).fork()).ldelim();
        }
        if (message.collateralType !== '') {
            writer.uint32(34).string(message.collateralType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDeposit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.collateralType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            owner: isSet(object.owner) ? String(object.owner) : '',
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.owner !== undefined && (obj.owner = message.owner);
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgDeposit();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        message.collateralType = (_c = object.collateralType) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMsgDepositResponse() {
    return {};
}
exports.MsgDepositResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDepositResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgDepositResponse();
        return message;
    },
};
function createBaseMsgWithdraw() {
    return {
        depositor: '',
        owner: '',
        collateral: undefined,
        collateralType: '',
    };
}
exports.MsgWithdraw = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.depositor !== '') {
            writer.uint32(10).string(message.depositor);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(26).fork()).ldelim();
        }
        if (message.collateralType !== '') {
            writer.uint32(34).string(message.collateralType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdraw();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositor = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.collateralType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            owner: isSet(object.owner) ? String(object.owner) : '',
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.owner !== undefined && (obj.owner = message.owner);
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgWithdraw();
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        message.collateralType = (_c = object.collateralType) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMsgWithdrawResponse() {
    return {};
}
exports.MsgWithdrawResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgWithdrawResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgWithdrawResponse();
        return message;
    },
};
function createBaseMsgDrawDebt() {
    return { sender: '', collateralType: '', principal: undefined };
}
exports.MsgDrawDebt = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.collateralType !== '') {
            writer.uint32(18).string(message.collateralType);
        }
        if (message.principal !== undefined) {
            coin_1.Coin.encode(message.principal, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDrawDebt();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.collateralType = reader.string();
                    break;
                case 3:
                    message.principal = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            principal: isSet(object.principal)
                ? coin_1.Coin.fromJSON(object.principal)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.principal !== undefined &&
            (obj.principal = message.principal
                ? coin_1.Coin.toJSON(message.principal)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgDrawDebt();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.collateralType = (_b = object.collateralType) !== null && _b !== void 0 ? _b : '';
        message.principal =
            object.principal !== undefined && object.principal !== null
                ? coin_1.Coin.fromPartial(object.principal)
                : undefined;
        return message;
    },
};
function createBaseMsgDrawDebtResponse() {
    return {};
}
exports.MsgDrawDebtResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgDrawDebtResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgDrawDebtResponse();
        return message;
    },
};
function createBaseMsgRepayDebt() {
    return { sender: '', collateralType: '', payment: undefined };
}
exports.MsgRepayDebt = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.sender !== '') {
            writer.uint32(10).string(message.sender);
        }
        if (message.collateralType !== '') {
            writer.uint32(18).string(message.collateralType);
        }
        if (message.payment !== undefined) {
            coin_1.Coin.encode(message.payment, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgRepayDebt();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.collateralType = reader.string();
                    break;
                case 3:
                    message.payment = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : '',
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            payment: isSet(object.payment)
                ? coin_1.Coin.fromJSON(object.payment)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.payment !== undefined &&
            (obj.payment = message.payment
                ? coin_1.Coin.toJSON(message.payment)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgRepayDebt();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : '';
        message.collateralType = (_b = object.collateralType) !== null && _b !== void 0 ? _b : '';
        message.payment =
            object.payment !== undefined && object.payment !== null
                ? coin_1.Coin.fromPartial(object.payment)
                : undefined;
        return message;
    },
};
function createBaseMsgRepayDebtResponse() {
    return {};
}
exports.MsgRepayDebtResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgRepayDebtResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgRepayDebtResponse();
        return message;
    },
};
function createBaseMsgLiquidate() {
    return { keeper: '', borrower: '', collateralType: '' };
}
exports.MsgLiquidate = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.keeper !== '') {
            writer.uint32(10).string(message.keeper);
        }
        if (message.borrower !== '') {
            writer.uint32(18).string(message.borrower);
        }
        if (message.collateralType !== '') {
            writer.uint32(26).string(message.collateralType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgLiquidate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keeper = reader.string();
                    break;
                case 2:
                    message.borrower = reader.string();
                    break;
                case 3:
                    message.collateralType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            keeper: isSet(object.keeper) ? String(object.keeper) : '',
            borrower: isSet(object.borrower) ? String(object.borrower) : '',
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.keeper !== undefined && (obj.keeper = message.keeper);
        message.borrower !== undefined && (obj.borrower = message.borrower);
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgLiquidate();
        message.keeper = (_a = object.keeper) !== null && _a !== void 0 ? _a : '';
        message.borrower = (_b = object.borrower) !== null && _b !== void 0 ? _b : '';
        message.collateralType = (_c = object.collateralType) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMsgLiquidateResponse() {
    return {};
}
exports.MsgLiquidateResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgLiquidateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgLiquidateResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.CreateCDP = this.CreateCDP.bind(this);
        this.Deposit = this.Deposit.bind(this);
        this.Withdraw = this.Withdraw.bind(this);
        this.DrawDebt = this.DrawDebt.bind(this);
        this.RepayDebt = this.RepayDebt.bind(this);
        this.Liquidate = this.Liquidate.bind(this);
    }
    MsgClientImpl.prototype.CreateCDP = function (request) {
        var data = exports.MsgCreateCDP.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Msg', 'CreateCDP', data);
        return promise.then(function (data) {
            return exports.MsgCreateCDPResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.Deposit = function (request) {
        var data = exports.MsgDeposit.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Msg', 'Deposit', data);
        return promise.then(function (data) {
            return exports.MsgDepositResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.Withdraw = function (request) {
        var data = exports.MsgWithdraw.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Msg', 'Withdraw', data);
        return promise.then(function (data) {
            return exports.MsgWithdrawResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.DrawDebt = function (request) {
        var data = exports.MsgDrawDebt.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Msg', 'DrawDebt', data);
        return promise.then(function (data) {
            return exports.MsgDrawDebtResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.RepayDebt = function (request) {
        var data = exports.MsgRepayDebt.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Msg', 'RepayDebt', data);
        return promise.then(function (data) {
            return exports.MsgRepayDebtResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    MsgClientImpl.prototype.Liquidate = function (request) {
        var data = exports.MsgLiquidate.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Msg', 'Liquidate', data);
        return promise.then(function (data) {
            return exports.MsgLiquidateResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
