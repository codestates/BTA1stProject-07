"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisTotalPrincipal = exports.GenesisAccumulationTime = exports.CollateralParam = exports.DebtParam = exports.Params = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var timestamp_1 = require("../../../google/protobuf/timestamp");
var cdp_1 = require("../../../kava/cdp/v1beta1/cdp");
exports.protobufPackage = 'kava.cdp.v1beta1';
function createBaseGenesisState() {
    return {
        params: undefined,
        cdps: [],
        deposits: [],
        startingCdpId: long_1.default.UZERO,
        debtDenom: '',
        govDenom: '',
        previousAccumulationTimes: [],
        totalPrincipals: [],
    };
}
exports.GenesisState = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            exports.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        try {
            for (var _e = __values(message.cdps), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                cdp_1.CDP.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _g = __values(message.deposits), _h = _g.next(); !_h.done; _h = _g.next()) {
                var v = _h.value;
                cdp_1.Deposit.encode(v, writer.uint32(26).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (!message.startingCdpId.isZero()) {
            writer.uint32(32).uint64(message.startingCdpId);
        }
        if (message.debtDenom !== '') {
            writer.uint32(42).string(message.debtDenom);
        }
        if (message.govDenom !== '') {
            writer.uint32(50).string(message.govDenom);
        }
        try {
            for (var _j = __values(message.previousAccumulationTimes), _k = _j.next(); !_k.done; _k = _j.next()) {
                var v = _k.value;
                exports.GenesisAccumulationTime.encode(v, writer.uint32(58).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _l = __values(message.totalPrincipals), _m = _l.next(); !_m.done; _m = _l.next()) {
                var v = _m.value;
                exports.GenesisTotalPrincipal.encode(v, writer.uint32(66).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = exports.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.cdps.push(cdp_1.CDP.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.deposits.push(cdp_1.Deposit.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.startingCdpId = reader.uint64();
                    break;
                case 5:
                    message.debtDenom = reader.string();
                    break;
                case 6:
                    message.govDenom = reader.string();
                    break;
                case 7:
                    message.previousAccumulationTimes.push(exports.GenesisAccumulationTime.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.totalPrincipals.push(exports.GenesisTotalPrincipal.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? exports.Params.fromJSON(object.params) : undefined,
            cdps: Array.isArray(object === null || object === void 0 ? void 0 : object.cdps)
                ? object.cdps.map(function (e) { return cdp_1.CDP.fromJSON(e); })
                : [],
            deposits: Array.isArray(object === null || object === void 0 ? void 0 : object.deposits)
                ? object.deposits.map(function (e) { return cdp_1.Deposit.fromJSON(e); })
                : [],
            startingCdpId: isSet(object.startingCdpId)
                ? long_1.default.fromString(object.startingCdpId)
                : long_1.default.UZERO,
            debtDenom: isSet(object.debtDenom) ? String(object.debtDenom) : '',
            govDenom: isSet(object.govDenom) ? String(object.govDenom) : '',
            previousAccumulationTimes: Array.isArray(object === null || object === void 0 ? void 0 : object.previousAccumulationTimes)
                ? object.previousAccumulationTimes.map(function (e) {
                    return exports.GenesisAccumulationTime.fromJSON(e);
                })
                : [],
            totalPrincipals: Array.isArray(object === null || object === void 0 ? void 0 : object.totalPrincipals)
                ? object.totalPrincipals.map(function (e) {
                    return exports.GenesisTotalPrincipal.fromJSON(e);
                })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? exports.Params.toJSON(message.params) : undefined);
        if (message.cdps) {
            obj.cdps = message.cdps.map(function (e) { return (e ? cdp_1.CDP.toJSON(e) : undefined); });
        }
        else {
            obj.cdps = [];
        }
        if (message.deposits) {
            obj.deposits = message.deposits.map(function (e) {
                return e ? cdp_1.Deposit.toJSON(e) : undefined;
            });
        }
        else {
            obj.deposits = [];
        }
        message.startingCdpId !== undefined &&
            (obj.startingCdpId = (message.startingCdpId || long_1.default.UZERO).toString());
        message.debtDenom !== undefined && (obj.debtDenom = message.debtDenom);
        message.govDenom !== undefined && (obj.govDenom = message.govDenom);
        if (message.previousAccumulationTimes) {
            obj.previousAccumulationTimes = message.previousAccumulationTimes.map(function (e) { return (e ? exports.GenesisAccumulationTime.toJSON(e) : undefined); });
        }
        else {
            obj.previousAccumulationTimes = [];
        }
        if (message.totalPrincipals) {
            obj.totalPrincipals = message.totalPrincipals.map(function (e) {
                return e ? exports.GenesisTotalPrincipal.toJSON(e) : undefined;
            });
        }
        else {
            obj.totalPrincipals = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? exports.Params.fromPartial(object.params)
                : undefined;
        message.cdps = ((_a = object.cdps) === null || _a === void 0 ? void 0 : _a.map(function (e) { return cdp_1.CDP.fromPartial(e); })) || [];
        message.deposits =
            ((_b = object.deposits) === null || _b === void 0 ? void 0 : _b.map(function (e) { return cdp_1.Deposit.fromPartial(e); })) || [];
        message.startingCdpId =
            object.startingCdpId !== undefined && object.startingCdpId !== null
                ? long_1.default.fromValue(object.startingCdpId)
                : long_1.default.UZERO;
        message.debtDenom = (_c = object.debtDenom) !== null && _c !== void 0 ? _c : '';
        message.govDenom = (_d = object.govDenom) !== null && _d !== void 0 ? _d : '';
        message.previousAccumulationTimes =
            ((_e = object.previousAccumulationTimes) === null || _e === void 0 ? void 0 : _e.map(function (e) {
                return exports.GenesisAccumulationTime.fromPartial(e);
            })) || [];
        message.totalPrincipals =
            ((_f = object.totalPrincipals) === null || _f === void 0 ? void 0 : _f.map(function (e) {
                return exports.GenesisTotalPrincipal.fromPartial(e);
            })) || [];
        return message;
    },
};
function createBaseParams() {
    return {
        collateralParams: [],
        debtParam: undefined,
        globalDebtLimit: undefined,
        surplusAuctionThreshold: '',
        surplusAuctionLot: '',
        debtAuctionThreshold: '',
        debtAuctionLot: '',
        circuitBreaker: false,
    };
}
exports.Params = {
    encode: function (message, writer) {
        var e_5, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.collateralParams), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.CollateralParam.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        if (message.debtParam !== undefined) {
            exports.DebtParam.encode(message.debtParam, writer.uint32(18).fork()).ldelim();
        }
        if (message.globalDebtLimit !== undefined) {
            coin_1.Coin.encode(message.globalDebtLimit, writer.uint32(26).fork()).ldelim();
        }
        if (message.surplusAuctionThreshold !== '') {
            writer.uint32(34).string(message.surplusAuctionThreshold);
        }
        if (message.surplusAuctionLot !== '') {
            writer.uint32(42).string(message.surplusAuctionLot);
        }
        if (message.debtAuctionThreshold !== '') {
            writer.uint32(50).string(message.debtAuctionThreshold);
        }
        if (message.debtAuctionLot !== '') {
            writer.uint32(58).string(message.debtAuctionLot);
        }
        if (message.circuitBreaker === true) {
            writer.uint32(64).bool(message.circuitBreaker);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralParams.push(exports.CollateralParam.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.debtParam = exports.DebtParam.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.globalDebtLimit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.surplusAuctionThreshold = reader.string();
                    break;
                case 5:
                    message.surplusAuctionLot = reader.string();
                    break;
                case 6:
                    message.debtAuctionThreshold = reader.string();
                    break;
                case 7:
                    message.debtAuctionLot = reader.string();
                    break;
                case 8:
                    message.circuitBreaker = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralParams: Array.isArray(object === null || object === void 0 ? void 0 : object.collateralParams)
                ? object.collateralParams.map(function (e) { return exports.CollateralParam.fromJSON(e); })
                : [],
            debtParam: isSet(object.debtParam)
                ? exports.DebtParam.fromJSON(object.debtParam)
                : undefined,
            globalDebtLimit: isSet(object.globalDebtLimit)
                ? coin_1.Coin.fromJSON(object.globalDebtLimit)
                : undefined,
            surplusAuctionThreshold: isSet(object.surplusAuctionThreshold)
                ? String(object.surplusAuctionThreshold)
                : '',
            surplusAuctionLot: isSet(object.surplusAuctionLot)
                ? String(object.surplusAuctionLot)
                : '',
            debtAuctionThreshold: isSet(object.debtAuctionThreshold)
                ? String(object.debtAuctionThreshold)
                : '',
            debtAuctionLot: isSet(object.debtAuctionLot)
                ? String(object.debtAuctionLot)
                : '',
            circuitBreaker: isSet(object.circuitBreaker)
                ? Boolean(object.circuitBreaker)
                : false,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.collateralParams) {
            obj.collateralParams = message.collateralParams.map(function (e) {
                return e ? exports.CollateralParam.toJSON(e) : undefined;
            });
        }
        else {
            obj.collateralParams = [];
        }
        message.debtParam !== undefined &&
            (obj.debtParam = message.debtParam
                ? exports.DebtParam.toJSON(message.debtParam)
                : undefined);
        message.globalDebtLimit !== undefined &&
            (obj.globalDebtLimit = message.globalDebtLimit
                ? coin_1.Coin.toJSON(message.globalDebtLimit)
                : undefined);
        message.surplusAuctionThreshold !== undefined &&
            (obj.surplusAuctionThreshold = message.surplusAuctionThreshold);
        message.surplusAuctionLot !== undefined &&
            (obj.surplusAuctionLot = message.surplusAuctionLot);
        message.debtAuctionThreshold !== undefined &&
            (obj.debtAuctionThreshold = message.debtAuctionThreshold);
        message.debtAuctionLot !== undefined &&
            (obj.debtAuctionLot = message.debtAuctionLot);
        message.circuitBreaker !== undefined &&
            (obj.circuitBreaker = message.circuitBreaker);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseParams();
        message.collateralParams =
            ((_a = object.collateralParams) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.CollateralParam.fromPartial(e); })) || [];
        message.debtParam =
            object.debtParam !== undefined && object.debtParam !== null
                ? exports.DebtParam.fromPartial(object.debtParam)
                : undefined;
        message.globalDebtLimit =
            object.globalDebtLimit !== undefined && object.globalDebtLimit !== null
                ? coin_1.Coin.fromPartial(object.globalDebtLimit)
                : undefined;
        message.surplusAuctionThreshold = (_b = object.surplusAuctionThreshold) !== null && _b !== void 0 ? _b : '';
        message.surplusAuctionLot = (_c = object.surplusAuctionLot) !== null && _c !== void 0 ? _c : '';
        message.debtAuctionThreshold = (_d = object.debtAuctionThreshold) !== null && _d !== void 0 ? _d : '';
        message.debtAuctionLot = (_e = object.debtAuctionLot) !== null && _e !== void 0 ? _e : '';
        message.circuitBreaker = (_f = object.circuitBreaker) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseDebtParam() {
    return { denom: '', referenceAsset: '', conversionFactor: '', debtFloor: '' };
}
exports.DebtParam = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        if (message.referenceAsset !== '') {
            writer.uint32(18).string(message.referenceAsset);
        }
        if (message.conversionFactor !== '') {
            writer.uint32(26).string(message.conversionFactor);
        }
        if (message.debtFloor !== '') {
            writer.uint32(34).string(message.debtFloor);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDebtParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.referenceAsset = reader.string();
                    break;
                case 3:
                    message.conversionFactor = reader.string();
                    break;
                case 4:
                    message.debtFloor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            referenceAsset: isSet(object.referenceAsset)
                ? String(object.referenceAsset)
                : '',
            conversionFactor: isSet(object.conversionFactor)
                ? String(object.conversionFactor)
                : '',
            debtFloor: isSet(object.debtFloor) ? String(object.debtFloor) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.referenceAsset !== undefined &&
            (obj.referenceAsset = message.referenceAsset);
        message.conversionFactor !== undefined &&
            (obj.conversionFactor = message.conversionFactor);
        message.debtFloor !== undefined && (obj.debtFloor = message.debtFloor);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseDebtParam();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.referenceAsset = (_b = object.referenceAsset) !== null && _b !== void 0 ? _b : '';
        message.conversionFactor = (_c = object.conversionFactor) !== null && _c !== void 0 ? _c : '';
        message.debtFloor = (_d = object.debtFloor) !== null && _d !== void 0 ? _d : '';
        return message;
    },
};
function createBaseCollateralParam() {
    return {
        denom: '',
        type: '',
        liquidationRatio: '',
        debtLimit: undefined,
        stabilityFee: '',
        auctionSize: '',
        liquidationPenalty: '',
        spotMarketId: '',
        liquidationMarketId: '',
        keeperRewardPercentage: '',
        checkCollateralizationIndexCount: '',
        conversionFactor: '',
    };
}
exports.CollateralParam = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.denom !== '') {
            writer.uint32(10).string(message.denom);
        }
        if (message.type !== '') {
            writer.uint32(18).string(message.type);
        }
        if (message.liquidationRatio !== '') {
            writer.uint32(26).string(message.liquidationRatio);
        }
        if (message.debtLimit !== undefined) {
            coin_1.Coin.encode(message.debtLimit, writer.uint32(34).fork()).ldelim();
        }
        if (message.stabilityFee !== '') {
            writer.uint32(42).string(message.stabilityFee);
        }
        if (message.auctionSize !== '') {
            writer.uint32(50).string(message.auctionSize);
        }
        if (message.liquidationPenalty !== '') {
            writer.uint32(58).string(message.liquidationPenalty);
        }
        if (message.spotMarketId !== '') {
            writer.uint32(66).string(message.spotMarketId);
        }
        if (message.liquidationMarketId !== '') {
            writer.uint32(74).string(message.liquidationMarketId);
        }
        if (message.keeperRewardPercentage !== '') {
            writer.uint32(82).string(message.keeperRewardPercentage);
        }
        if (message.checkCollateralizationIndexCount !== '') {
            writer.uint32(90).string(message.checkCollateralizationIndexCount);
        }
        if (message.conversionFactor !== '') {
            writer.uint32(98).string(message.conversionFactor);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCollateralParam();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.type = reader.string();
                    break;
                case 3:
                    message.liquidationRatio = reader.string();
                    break;
                case 4:
                    message.debtLimit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.stabilityFee = reader.string();
                    break;
                case 6:
                    message.auctionSize = reader.string();
                    break;
                case 7:
                    message.liquidationPenalty = reader.string();
                    break;
                case 8:
                    message.spotMarketId = reader.string();
                    break;
                case 9:
                    message.liquidationMarketId = reader.string();
                    break;
                case 10:
                    message.keeperRewardPercentage = reader.string();
                    break;
                case 11:
                    message.checkCollateralizationIndexCount = reader.string();
                    break;
                case 12:
                    message.conversionFactor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : '',
            type: isSet(object.type) ? String(object.type) : '',
            liquidationRatio: isSet(object.liquidationRatio)
                ? String(object.liquidationRatio)
                : '',
            debtLimit: isSet(object.debtLimit)
                ? coin_1.Coin.fromJSON(object.debtLimit)
                : undefined,
            stabilityFee: isSet(object.stabilityFee)
                ? String(object.stabilityFee)
                : '',
            auctionSize: isSet(object.auctionSize) ? String(object.auctionSize) : '',
            liquidationPenalty: isSet(object.liquidationPenalty)
                ? String(object.liquidationPenalty)
                : '',
            spotMarketId: isSet(object.spotMarketId)
                ? String(object.spotMarketId)
                : '',
            liquidationMarketId: isSet(object.liquidationMarketId)
                ? String(object.liquidationMarketId)
                : '',
            keeperRewardPercentage: isSet(object.keeperRewardPercentage)
                ? String(object.keeperRewardPercentage)
                : '',
            checkCollateralizationIndexCount: isSet(object.checkCollateralizationIndexCount)
                ? String(object.checkCollateralizationIndexCount)
                : '',
            conversionFactor: isSet(object.conversionFactor)
                ? String(object.conversionFactor)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.type !== undefined && (obj.type = message.type);
        message.liquidationRatio !== undefined &&
            (obj.liquidationRatio = message.liquidationRatio);
        message.debtLimit !== undefined &&
            (obj.debtLimit = message.debtLimit
                ? coin_1.Coin.toJSON(message.debtLimit)
                : undefined);
        message.stabilityFee !== undefined &&
            (obj.stabilityFee = message.stabilityFee);
        message.auctionSize !== undefined &&
            (obj.auctionSize = message.auctionSize);
        message.liquidationPenalty !== undefined &&
            (obj.liquidationPenalty = message.liquidationPenalty);
        message.spotMarketId !== undefined &&
            (obj.spotMarketId = message.spotMarketId);
        message.liquidationMarketId !== undefined &&
            (obj.liquidationMarketId = message.liquidationMarketId);
        message.keeperRewardPercentage !== undefined &&
            (obj.keeperRewardPercentage = message.keeperRewardPercentage);
        message.checkCollateralizationIndexCount !== undefined &&
            (obj.checkCollateralizationIndexCount =
                message.checkCollateralizationIndexCount);
        message.conversionFactor !== undefined &&
            (obj.conversionFactor = message.conversionFactor);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var message = createBaseCollateralParam();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : '';
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : '';
        message.liquidationRatio = (_c = object.liquidationRatio) !== null && _c !== void 0 ? _c : '';
        message.debtLimit =
            object.debtLimit !== undefined && object.debtLimit !== null
                ? coin_1.Coin.fromPartial(object.debtLimit)
                : undefined;
        message.stabilityFee = (_d = object.stabilityFee) !== null && _d !== void 0 ? _d : '';
        message.auctionSize = (_e = object.auctionSize) !== null && _e !== void 0 ? _e : '';
        message.liquidationPenalty = (_f = object.liquidationPenalty) !== null && _f !== void 0 ? _f : '';
        message.spotMarketId = (_g = object.spotMarketId) !== null && _g !== void 0 ? _g : '';
        message.liquidationMarketId = (_h = object.liquidationMarketId) !== null && _h !== void 0 ? _h : '';
        message.keeperRewardPercentage = (_j = object.keeperRewardPercentage) !== null && _j !== void 0 ? _j : '';
        message.checkCollateralizationIndexCount =
            (_k = object.checkCollateralizationIndexCount) !== null && _k !== void 0 ? _k : '';
        message.conversionFactor = (_l = object.conversionFactor) !== null && _l !== void 0 ? _l : '';
        return message;
    },
};
function createBaseGenesisAccumulationTime() {
    return {
        collateralType: '',
        previousAccumulationTime: undefined,
        interestFactor: '',
    };
}
exports.GenesisAccumulationTime = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.previousAccumulationTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.previousAccumulationTime), writer.uint32(18).fork()).ldelim();
        }
        if (message.interestFactor !== '') {
            writer.uint32(26).string(message.interestFactor);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisAccumulationTime();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.previousAccumulationTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.interestFactor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            previousAccumulationTime: isSet(object.previousAccumulationTime)
                ? fromJsonTimestamp(object.previousAccumulationTime)
                : undefined,
            interestFactor: isSet(object.interestFactor)
                ? String(object.interestFactor)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.previousAccumulationTime !== undefined &&
            (obj.previousAccumulationTime =
                message.previousAccumulationTime.toISOString());
        message.interestFactor !== undefined &&
            (obj.interestFactor = message.interestFactor);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGenesisAccumulationTime();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.previousAccumulationTime =
            (_b = object.previousAccumulationTime) !== null && _b !== void 0 ? _b : undefined;
        message.interestFactor = (_c = object.interestFactor) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseGenesisTotalPrincipal() {
    return { collateralType: '', totalPrincipal: '' };
}
exports.GenesisTotalPrincipal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.totalPrincipal !== '') {
            writer.uint32(18).string(message.totalPrincipal);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisTotalPrincipal();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.totalPrincipal = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            totalPrincipal: isSet(object.totalPrincipal)
                ? String(object.totalPrincipal)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.totalPrincipal !== undefined &&
            (obj.totalPrincipal = message.totalPrincipal);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGenesisTotalPrincipal();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.totalPrincipal = (_b = object.totalPrincipal) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
