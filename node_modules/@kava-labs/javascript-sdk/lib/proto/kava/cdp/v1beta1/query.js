"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.CDPResponse = exports.QueryTotalCollateralResponse = exports.QueryTotalCollateralRequest = exports.QueryTotalPrincipalResponse = exports.QueryTotalPrincipalRequest = exports.QueryDepositsResponse = exports.QueryDepositsRequest = exports.QueryCdpsResponse = exports.QueryCdpsRequest = exports.QueryCdpResponse = exports.QueryCdpRequest = exports.QueryAccountsResponse = exports.QueryAccountsRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var genesis_1 = require("../../../kava/cdp/v1beta1/genesis");
var pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var timestamp_1 = require("../../../google/protobuf/timestamp");
var auth_1 = require("../../../cosmos/auth/v1beta1/auth");
var cdp_1 = require("../../../kava/cdp/v1beta1/cdp");
exports.protobufPackage = 'kava.cdp.v1beta1';
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            genesis_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = genesis_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            params: isSet(object.params) ? genesis_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? genesis_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? genesis_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryAccountsRequest() {
    return {};
}
exports.QueryAccountsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAccountsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryAccountsRequest();
        return message;
    },
};
function createBaseQueryAccountsResponse() {
    return { accounts: [] };
}
exports.QueryAccountsResponse = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.accounts), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                auth_1.ModuleAccount.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAccountsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accounts.push(auth_1.ModuleAccount.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            accounts: Array.isArray(object === null || object === void 0 ? void 0 : object.accounts)
                ? object.accounts.map(function (e) { return auth_1.ModuleAccount.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.accounts) {
            obj.accounts = message.accounts.map(function (e) {
                return e ? auth_1.ModuleAccount.toJSON(e) : undefined;
            });
        }
        else {
            obj.accounts = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryAccountsResponse();
        message.accounts =
            ((_a = object.accounts) === null || _a === void 0 ? void 0 : _a.map(function (e) { return auth_1.ModuleAccount.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryCdpRequest() {
    return { collateralType: '', owner: '' };
}
exports.QueryCdpRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCdpRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            owner: isSet(object.owner) ? String(object.owner) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryCdpRequest();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseQueryCdpResponse() {
    return { cdp: undefined };
}
exports.QueryCdpResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.cdp !== undefined) {
            exports.CDPResponse.encode(message.cdp, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCdpResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cdp = exports.CDPResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            cdp: isSet(object.cdp) ? exports.CDPResponse.fromJSON(object.cdp) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.cdp !== undefined &&
            (obj.cdp = message.cdp ? exports.CDPResponse.toJSON(message.cdp) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryCdpResponse();
        message.cdp =
            object.cdp !== undefined && object.cdp !== null
                ? exports.CDPResponse.fromPartial(object.cdp)
                : undefined;
        return message;
    },
};
function createBaseQueryCdpsRequest() {
    return {
        collateralType: '',
        owner: '',
        id: long_1.default.UZERO,
        ratio: '',
        pagination: undefined,
    };
}
exports.QueryCdpsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (!message.id.isZero()) {
            writer.uint32(24).uint64(message.id);
        }
        if (message.ratio !== '') {
            writer.uint32(34).string(message.ratio);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCdpsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.id = reader.uint64();
                    break;
                case 4:
                    message.ratio = reader.string();
                    break;
                case 5:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            owner: isSet(object.owner) ? String(object.owner) : '',
            id: isSet(object.id) ? long_1.default.fromString(object.id) : long_1.default.UZERO,
            ratio: isSet(object.ratio) ? String(object.ratio) : '',
            pagination: isSet(object.pagination)
                ? pagination_1.PageRequest.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.owner !== undefined && (obj.owner = message.owner);
        message.id !== undefined &&
            (obj.id = (message.id || long_1.default.UZERO).toString());
        message.ratio !== undefined && (obj.ratio = message.ratio);
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageRequest.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseQueryCdpsRequest();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
        message.id =
            object.id !== undefined && object.id !== null
                ? long_1.default.fromValue(object.id)
                : long_1.default.UZERO;
        message.ratio = (_c = object.ratio) !== null && _c !== void 0 ? _c : '';
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryCdpsResponse() {
    return { cdps: [], pagination: undefined };
}
exports.QueryCdpsResponse = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.cdps), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.CDPResponse.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryCdpsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cdps.push(exports.CDPResponse.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            cdps: Array.isArray(object === null || object === void 0 ? void 0 : object.cdps)
                ? object.cdps.map(function (e) { return exports.CDPResponse.fromJSON(e); })
                : [],
            pagination: isSet(object.pagination)
                ? pagination_1.PageResponse.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.cdps) {
            obj.cdps = message.cdps.map(function (e) {
                return e ? exports.CDPResponse.toJSON(e) : undefined;
            });
        }
        else {
            obj.cdps = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination
                ? pagination_1.PageResponse.toJSON(message.pagination)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryCdpsResponse();
        message.cdps = ((_a = object.cdps) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.CDPResponse.fromPartial(e); })) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryDepositsRequest() {
    return { collateralType: '', owner: '' };
}
exports.QueryDepositsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryDepositsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            owner: isSet(object.owner) ? String(object.owner) : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryDepositsRequest();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.owner = (_b = object.owner) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseQueryDepositsResponse() {
    return { deposits: [] };
}
exports.QueryDepositsResponse = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.deposits), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                cdp_1.Deposit.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryDepositsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.deposits.push(cdp_1.Deposit.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            deposits: Array.isArray(object === null || object === void 0 ? void 0 : object.deposits)
                ? object.deposits.map(function (e) { return cdp_1.Deposit.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.deposits) {
            obj.deposits = message.deposits.map(function (e) {
                return e ? cdp_1.Deposit.toJSON(e) : undefined;
            });
        }
        else {
            obj.deposits = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryDepositsResponse();
        message.deposits =
            ((_a = object.deposits) === null || _a === void 0 ? void 0 : _a.map(function (e) { return cdp_1.Deposit.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryTotalPrincipalRequest() {
    return { collateralType: '' };
}
exports.QueryTotalPrincipalRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTotalPrincipalRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTotalPrincipalRequest();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryTotalPrincipalResponse() {
    return { totalPrincipal: [] };
}
exports.QueryTotalPrincipalResponse = {
    encode: function (message, writer) {
        var e_4, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.totalPrincipal), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                cdp_1.TotalPrincipal.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTotalPrincipalResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.totalPrincipal.push(cdp_1.TotalPrincipal.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            totalPrincipal: Array.isArray(object === null || object === void 0 ? void 0 : object.totalPrincipal)
                ? object.totalPrincipal.map(function (e) { return cdp_1.TotalPrincipal.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.totalPrincipal) {
            obj.totalPrincipal = message.totalPrincipal.map(function (e) {
                return e ? cdp_1.TotalPrincipal.toJSON(e) : undefined;
            });
        }
        else {
            obj.totalPrincipal = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTotalPrincipalResponse();
        message.totalPrincipal =
            ((_a = object.totalPrincipal) === null || _a === void 0 ? void 0 : _a.map(function (e) { return cdp_1.TotalPrincipal.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseQueryTotalCollateralRequest() {
    return { collateralType: '' };
}
exports.QueryTotalCollateralRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTotalCollateralRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTotalCollateralRequest();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseQueryTotalCollateralResponse() {
    return { totalCollateral: [] };
}
exports.QueryTotalCollateralResponse = {
    encode: function (message, writer) {
        var e_5, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.totalCollateral), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                cdp_1.TotalCollateral.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryTotalCollateralResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.totalCollateral.push(cdp_1.TotalCollateral.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            totalCollateral: Array.isArray(object === null || object === void 0 ? void 0 : object.totalCollateral)
                ? object.totalCollateral.map(function (e) { return cdp_1.TotalCollateral.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.totalCollateral) {
            obj.totalCollateral = message.totalCollateral.map(function (e) {
                return e ? cdp_1.TotalCollateral.toJSON(e) : undefined;
            });
        }
        else {
            obj.totalCollateral = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryTotalCollateralResponse();
        message.totalCollateral =
            ((_a = object.totalCollateral) === null || _a === void 0 ? void 0 : _a.map(function (e) { return cdp_1.TotalCollateral.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseCDPResponse() {
    return {
        id: long_1.default.UZERO,
        owner: '',
        type: '',
        collateral: undefined,
        principal: undefined,
        accumulatedFees: undefined,
        feesUpdated: undefined,
        interestFactor: '',
        collateralValue: undefined,
        collateralizationRatio: '',
    };
}
exports.CDPResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.type !== '') {
            writer.uint32(26).string(message.type);
        }
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(34).fork()).ldelim();
        }
        if (message.principal !== undefined) {
            coin_1.Coin.encode(message.principal, writer.uint32(42).fork()).ldelim();
        }
        if (message.accumulatedFees !== undefined) {
            coin_1.Coin.encode(message.accumulatedFees, writer.uint32(50).fork()).ldelim();
        }
        if (message.feesUpdated !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.feesUpdated), writer.uint32(58).fork()).ldelim();
        }
        if (message.interestFactor !== '') {
            writer.uint32(66).string(message.interestFactor);
        }
        if (message.collateralValue !== undefined) {
            coin_1.Coin.encode(message.collateralValue, writer.uint32(74).fork()).ldelim();
        }
        if (message.collateralizationRatio !== '') {
            writer.uint32(82).string(message.collateralizationRatio);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCDPResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.type = reader.string();
                    break;
                case 4:
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.principal = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.accumulatedFees = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.feesUpdated = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.interestFactor = reader.string();
                    break;
                case 9:
                    message.collateralValue = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.collateralizationRatio = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? long_1.default.fromString(object.id) : long_1.default.UZERO,
            owner: isSet(object.owner) ? String(object.owner) : '',
            type: isSet(object.type) ? String(object.type) : '',
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
            principal: isSet(object.principal)
                ? coin_1.Coin.fromJSON(object.principal)
                : undefined,
            accumulatedFees: isSet(object.accumulatedFees)
                ? coin_1.Coin.fromJSON(object.accumulatedFees)
                : undefined,
            feesUpdated: isSet(object.feesUpdated)
                ? fromJsonTimestamp(object.feesUpdated)
                : undefined,
            interestFactor: isSet(object.interestFactor)
                ? String(object.interestFactor)
                : '',
            collateralValue: isSet(object.collateralValue)
                ? coin_1.Coin.fromJSON(object.collateralValue)
                : undefined,
            collateralizationRatio: isSet(object.collateralizationRatio)
                ? String(object.collateralizationRatio)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined &&
            (obj.id = (message.id || long_1.default.UZERO).toString());
        message.owner !== undefined && (obj.owner = message.owner);
        message.type !== undefined && (obj.type = message.type);
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        message.principal !== undefined &&
            (obj.principal = message.principal
                ? coin_1.Coin.toJSON(message.principal)
                : undefined);
        message.accumulatedFees !== undefined &&
            (obj.accumulatedFees = message.accumulatedFees
                ? coin_1.Coin.toJSON(message.accumulatedFees)
                : undefined);
        message.feesUpdated !== undefined &&
            (obj.feesUpdated = message.feesUpdated.toISOString());
        message.interestFactor !== undefined &&
            (obj.interestFactor = message.interestFactor);
        message.collateralValue !== undefined &&
            (obj.collateralValue = message.collateralValue
                ? coin_1.Coin.toJSON(message.collateralValue)
                : undefined);
        message.collateralizationRatio !== undefined &&
            (obj.collateralizationRatio = message.collateralizationRatio);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseCDPResponse();
        message.id =
            object.id !== undefined && object.id !== null
                ? long_1.default.fromValue(object.id)
                : long_1.default.UZERO;
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : '';
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : '';
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        message.principal =
            object.principal !== undefined && object.principal !== null
                ? coin_1.Coin.fromPartial(object.principal)
                : undefined;
        message.accumulatedFees =
            object.accumulatedFees !== undefined && object.accumulatedFees !== null
                ? coin_1.Coin.fromPartial(object.accumulatedFees)
                : undefined;
        message.feesUpdated = (_c = object.feesUpdated) !== null && _c !== void 0 ? _c : undefined;
        message.interestFactor = (_d = object.interestFactor) !== null && _d !== void 0 ? _d : '';
        message.collateralValue =
            object.collateralValue !== undefined && object.collateralValue !== null
                ? coin_1.Coin.fromPartial(object.collateralValue)
                : undefined;
        message.collateralizationRatio = (_e = object.collateralizationRatio) !== null && _e !== void 0 ? _e : '';
        return message;
    },
};
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Accounts = this.Accounts.bind(this);
        this.TotalPrincipal = this.TotalPrincipal.bind(this);
        this.TotalCollateral = this.TotalCollateral.bind(this);
        this.Cdps = this.Cdps.bind(this);
        this.Cdp = this.Cdp.bind(this);
        this.Deposits = this.Deposits.bind(this);
    }
    QueryClientImpl.prototype.Params = function (request) {
        var data = exports.QueryParamsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'Params', data);
        return promise.then(function (data) {
            return exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Accounts = function (request) {
        var data = exports.QueryAccountsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'Accounts', data);
        return promise.then(function (data) {
            return exports.QueryAccountsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.TotalPrincipal = function (request) {
        var data = exports.QueryTotalPrincipalRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'TotalPrincipal', data);
        return promise.then(function (data) {
            return exports.QueryTotalPrincipalResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.TotalCollateral = function (request) {
        var data = exports.QueryTotalCollateralRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'TotalCollateral', data);
        return promise.then(function (data) {
            return exports.QueryTotalCollateralResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Cdps = function (request) {
        var data = exports.QueryCdpsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'Cdps', data);
        return promise.then(function (data) {
            return exports.QueryCdpsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Cdp = function (request) {
        var data = exports.QueryCdpRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'Cdp', data);
        return promise.then(function (data) {
            return exports.QueryCdpResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    QueryClientImpl.prototype.Deposits = function (request) {
        var data = exports.QueryDepositsRequest.encode(request).finish();
        var promise = this.rpc.request('kava.cdp.v1beta1.Query', 'Deposits', data);
        return promise.then(function (data) {
            return exports.QueryDepositsResponse.decode(new minimal_1.default.Reader(data));
        });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
