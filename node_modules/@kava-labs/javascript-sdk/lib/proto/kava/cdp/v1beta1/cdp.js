"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OwnerCDPIndex = exports.TotalCollateral = exports.TotalPrincipal = exports.Deposit = exports.CDP = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../../cosmos/base/v1beta1/coin");
var timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = 'kava.cdp.v1beta1';
function createBaseCDP() {
    return {
        id: long_1.default.UZERO,
        owner: new Uint8Array(),
        type: '',
        collateral: undefined,
        principal: undefined,
        accumulatedFees: undefined,
        feesUpdated: undefined,
        interestFactor: '',
    };
}
exports.CDP = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.owner.length !== 0) {
            writer.uint32(18).bytes(message.owner);
        }
        if (message.type !== '') {
            writer.uint32(26).string(message.type);
        }
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(34).fork()).ldelim();
        }
        if (message.principal !== undefined) {
            coin_1.Coin.encode(message.principal, writer.uint32(42).fork()).ldelim();
        }
        if (message.accumulatedFees !== undefined) {
            coin_1.Coin.encode(message.accumulatedFees, writer.uint32(50).fork()).ldelim();
        }
        if (message.feesUpdated !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.feesUpdated), writer.uint32(58).fork()).ldelim();
        }
        if (message.interestFactor !== '') {
            writer.uint32(66).string(message.interestFactor);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCDP();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.owner = reader.bytes();
                    break;
                case 3:
                    message.type = reader.string();
                    break;
                case 4:
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.principal = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.accumulatedFees = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.feesUpdated = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.interestFactor = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? long_1.default.fromString(object.id) : long_1.default.UZERO,
            owner: isSet(object.owner)
                ? bytesFromBase64(object.owner)
                : new Uint8Array(),
            type: isSet(object.type) ? String(object.type) : '',
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
            principal: isSet(object.principal)
                ? coin_1.Coin.fromJSON(object.principal)
                : undefined,
            accumulatedFees: isSet(object.accumulatedFees)
                ? coin_1.Coin.fromJSON(object.accumulatedFees)
                : undefined,
            feesUpdated: isSet(object.feesUpdated)
                ? fromJsonTimestamp(object.feesUpdated)
                : undefined,
            interestFactor: isSet(object.interestFactor)
                ? String(object.interestFactor)
                : '',
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined &&
            (obj.id = (message.id || long_1.default.UZERO).toString());
        message.owner !== undefined &&
            (obj.owner = base64FromBytes(message.owner !== undefined ? message.owner : new Uint8Array()));
        message.type !== undefined && (obj.type = message.type);
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        message.principal !== undefined &&
            (obj.principal = message.principal
                ? coin_1.Coin.toJSON(message.principal)
                : undefined);
        message.accumulatedFees !== undefined &&
            (obj.accumulatedFees = message.accumulatedFees
                ? coin_1.Coin.toJSON(message.accumulatedFees)
                : undefined);
        message.feesUpdated !== undefined &&
            (obj.feesUpdated = message.feesUpdated.toISOString());
        message.interestFactor !== undefined &&
            (obj.interestFactor = message.interestFactor);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseCDP();
        message.id =
            object.id !== undefined && object.id !== null
                ? long_1.default.fromValue(object.id)
                : long_1.default.UZERO;
        message.owner = (_a = object.owner) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : '';
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        message.principal =
            object.principal !== undefined && object.principal !== null
                ? coin_1.Coin.fromPartial(object.principal)
                : undefined;
        message.accumulatedFees =
            object.accumulatedFees !== undefined && object.accumulatedFees !== null
                ? coin_1.Coin.fromPartial(object.accumulatedFees)
                : undefined;
        message.feesUpdated = (_c = object.feesUpdated) !== null && _c !== void 0 ? _c : undefined;
        message.interestFactor = (_d = object.interestFactor) !== null && _d !== void 0 ? _d : '';
        return message;
    },
};
function createBaseDeposit() {
    return { cdpId: long_1.default.UZERO, depositor: '', amount: undefined };
}
exports.Deposit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.cdpId.isZero()) {
            writer.uint32(8).uint64(message.cdpId);
        }
        if (message.depositor !== '') {
            writer.uint32(18).string(message.depositor);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeposit();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cdpId = reader.uint64();
                    break;
                case 2:
                    message.depositor = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            cdpId: isSet(object.cdpId) ? long_1.default.fromString(object.cdpId) : long_1.default.UZERO,
            depositor: isSet(object.depositor) ? String(object.depositor) : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.cdpId !== undefined &&
            (obj.cdpId = (message.cdpId || long_1.default.UZERO).toString());
        message.depositor !== undefined && (obj.depositor = message.depositor);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDeposit();
        message.cdpId =
            object.cdpId !== undefined && object.cdpId !== null
                ? long_1.default.fromValue(object.cdpId)
                : long_1.default.UZERO;
        message.depositor = (_a = object.depositor) !== null && _a !== void 0 ? _a : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseTotalPrincipal() {
    return { collateralType: '', amount: undefined };
}
exports.TotalPrincipal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseTotalPrincipal();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseTotalPrincipal();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseTotalCollateral() {
    return { collateralType: '', amount: undefined };
}
exports.TotalCollateral = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.collateralType !== '') {
            writer.uint32(10).string(message.collateralType);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseTotalCollateral();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateralType = reader.string();
                    break;
                case 2:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            collateralType: isSet(object.collateralType)
                ? String(object.collateralType)
                : '',
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.collateralType !== undefined &&
            (obj.collateralType = message.collateralType);
        message.amount !== undefined &&
            (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseTotalCollateral();
        message.collateralType = (_a = object.collateralType) !== null && _a !== void 0 ? _a : '';
        message.amount =
            object.amount !== undefined && object.amount !== null
                ? coin_1.Coin.fromPartial(object.amount)
                : undefined;
        return message;
    },
};
function createBaseOwnerCDPIndex() {
    return { cdpIds: [] };
}
exports.OwnerCDPIndex = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        writer.uint32(10).fork();
        try {
            for (var _b = __values(message.cdpIds), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint64(v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        writer.ldelim();
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseOwnerCDPIndex();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.cdpIds.push(reader.uint64());
                        }
                    }
                    else {
                        message.cdpIds.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            cdpIds: Array.isArray(object === null || object === void 0 ? void 0 : object.cdpIds)
                ? object.cdpIds.map(function (e) { return long_1.default.fromString(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.cdpIds) {
            obj.cdpIds = message.cdpIds.map(function (e) { return (e || long_1.default.UZERO).toString(); });
        }
        else {
            obj.cdpIds = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseOwnerCDPIndex();
        message.cdpIds = ((_a = object.cdpIds) === null || _a === void 0 ? void 0 : _a.map(function (e) { return long_1.default.fromValue(e); })) || [];
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, 'base64').toString('binary'); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, 'binary').toString('base64'); });
function base64FromBytes(arr) {
    var e_2, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return btoa(bin.join(''));
}
function toTimestamp(date) {
    var seconds = numberToLong(date.getTime() / 1000);
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === 'string') {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
