"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kava = void 0;
/***************************************************
 *                   Auction
 ***************************************************/
function newMsgPlaceBid(auctionID, bidder, amount) {
    return {
        type: 'auction/MsgPlaceBid',
        value: {
            auction_id: auctionID,
            bidder: bidder,
            amount: amount,
        },
    };
}
/***************************************************
 *                     BEP3
 ***************************************************/
// newMsgCreateAtomicSwap creates a new MsgCreateAtomicSwap
function newMsgCreateAtomicSwap(from, to, recipientOtherChain, senderOtherChain, randomNumberHash, timestamp, amount, heightSpan) {
    return {
        type: 'bep3/MsgCreateAtomicSwap',
        value: {
            from: from,
            to: to,
            recipient_other_chain: recipientOtherChain,
            sender_other_chain: senderOtherChain,
            random_number_hash: randomNumberHash,
            timestamp: String(timestamp),
            amount: amount,
            height_span: String(heightSpan),
        },
    };
}
// newMsgClaimAtomicSwap creates a new MsgClaimAtomicSwap
function newMsgClaimAtomicSwap(from, swapID, randomNumber) {
    return {
        type: 'bep3/MsgClaimAtomicSwap',
        value: {
            from: from,
            swap_id: swapID,
            random_number: randomNumber,
        },
    };
}
// newMsgRefundAtomicSwap creates a new MsgRefundAtomicSwap
function newMsgRefundAtomicSwap(from, swapID) {
    return {
        type: 'bep3/MsgRefundAtomicSwap',
        value: {
            from: from,
            swap_id: swapID,
        },
    };
}
/***************************************************
 *                       CDP
 ***************************************************/
function newMsgCreateCDP(sender, principal, collateral, collateralType) {
    return {
        type: 'cdp/MsgCreateCDP',
        value: {
            sender: sender,
            principal: principal,
            collateral: collateral,
            collateral_type: collateralType,
        },
    };
}
function newMsgDeposit(owner, depositor, collateral, collateralType) {
    return {
        type: 'cdp/MsgDeposit',
        value: {
            owner: owner,
            depositor: depositor,
            collateral: collateral,
            collateral_type: collateralType,
        },
    };
}
function newMsgWithdraw(owner, depositor, collateral, collateralType) {
    return {
        type: 'cdp/MsgWithdraw',
        value: {
            owner: owner,
            depositor: depositor,
            collateral: collateral,
            collateral_type: collateralType,
        },
    };
}
function newMsgDrawDebt(sender, collateralType, principal) {
    return {
        type: 'cdp/MsgDrawDebt',
        value: {
            sender: sender,
            collateral_type: collateralType,
            principal: principal,
        },
    };
}
function newMsgRepayDebt(sender, collateralType, payment) {
    return {
        type: 'cdp/MsgRepayDebt',
        value: {
            sender: sender,
            collateral_type: collateralType,
            payment: payment,
        },
    };
}
function newMsgLiquidate(keeper, borrower, collateralType) {
    return {
        type: 'cdp/MsgLiquidate',
        value: {
            keeper: keeper,
            borrower: borrower,
            collateral_type: collateralType,
        },
    };
}
/***************************************************
 *                   Committee
 ***************************************************/
function newMsgSubmitProposal(pubProposal, proposer, committeeID) {
    return {
        type: 'kava/MsgSubmitProposal',
        value: {
            pub_proposal: pubProposal,
            proposer: proposer,
            committee_id: String(committeeID),
        },
    };
}
function newMsgVote(proposalID, voter, voteType) {
    return {
        type: 'kava/MsgVote',
        value: {
            proposal_id: String(proposalID),
            voter: voter,
            vote_type: voteType,
        },
    };
}
/***************************************************
 *                   Incentive
 ***************************************************/
function newMsgClaimUSDXMintingReward(sender, multiplierName) {
    return {
        type: 'incentive/MsgClaimUSDXMintingReward',
        value: {
            sender: sender,
            multiplier_name: multiplierName,
        },
    };
}
function newMsgClaimHardReward(sender, denomsToClaim) {
    return {
        type: 'incentive/MsgClaimHardReward',
        value: {
            sender: sender,
            denoms_to_claim: denomsToClaim,
        },
    };
}
function newMsgClaimDelegatorReward(sender, denomsToClaim) {
    return {
        type: 'incentive/MsgClaimDelegatorReward',
        value: {
            sender: sender,
            denoms_to_claim: denomsToClaim,
        },
    };
}
function newMsgClaimSwapReward(sender, denomsToClaim) {
    return {
        type: 'incentive/MsgClaimSwapReward',
        value: {
            sender: sender,
            denoms_to_claim: denomsToClaim,
        },
    };
}
function newMsgClaimSavingsReward(sender, denomsToClaim) {
    return {
        type: 'incentive/MsgClaimSavingsReward',
        value: {
            sender: sender,
            denoms_to_claim: denomsToClaim,
        },
    };
}
function newMsgClaimEarnReward(sender, denomsToClaim) {
    return {
        type: 'incentive/MsgClaimEarnReward',
        value: {
            sender: sender,
            denoms_to_claim: denomsToClaim,
        },
    };
}
/***************************************************
 *                   Issuance
 ***************************************************/
function newMsgIssueTokens(sender, tokens, receiver) {
    return {
        type: 'issuance/MsgIssueTokens',
        value: {
            sender: sender,
            tokens: tokens,
            receiver: receiver,
        },
    };
}
function newMsgRedeemTokens(sender, tokens) {
    return {
        type: 'issuance/MsgRedeemTokens',
        value: {
            sender: sender,
            tokens: tokens,
        },
    };
}
function newMsgBlockAddress(sender, denom, blockedAddress) {
    return {
        type: 'issuance/MsgBlockAddress',
        value: {
            sender: sender,
            denom: denom,
            blocked_address: blockedAddress,
        },
    };
}
function newMsgUnblockAddress(sender, denom, address) {
    return {
        type: 'issuance/MsgUnblockAddress',
        value: {
            sender: sender,
            denom: denom,
            address: address,
        },
    };
}
function newMsgSetPauseStatus(sender, denom, status) {
    return {
        type: 'issuance/MsgChangePauseStatus',
        value: {
            sender: sender,
            denom: denom,
            status: status,
        },
    };
}
/***************************************************
 *                   Pricefeed
 ***************************************************/
function newMsgPostPrice(from, marketID, price, expiry) {
    return {
        type: 'pricefeed/MsgPostPrice',
        value: {
            from: from,
            market_id: marketID,
            price: price,
            expiry: expiry,
        },
    };
}
exports.kava = {
    newMsgPlaceBid: newMsgPlaceBid,
    newMsgCreateAtomicSwap: newMsgCreateAtomicSwap,
    newMsgClaimAtomicSwap: newMsgClaimAtomicSwap,
    newMsgRefundAtomicSwap: newMsgRefundAtomicSwap,
    newMsgCreateCDP: newMsgCreateCDP,
    newMsgDeposit: newMsgDeposit,
    newMsgWithdraw: newMsgWithdraw,
    newMsgDrawDebt: newMsgDrawDebt,
    newMsgRepayDebt: newMsgRepayDebt,
    newMsgLiquidate: newMsgLiquidate,
    newMsgSubmitProposal: newMsgSubmitProposal,
    newMsgVote: newMsgVote,
    newMsgClaimUSDXMintingReward: newMsgClaimUSDXMintingReward,
    newMsgClaimHardReward: newMsgClaimHardReward,
    newMsgClaimDelegatorReward: newMsgClaimDelegatorReward,
    newMsgClaimSwapReward: newMsgClaimSwapReward,
    newMsgClaimSavingsReward: newMsgClaimSavingsReward,
    newMsgClaimEarnReward: newMsgClaimEarnReward,
    newMsgIssueTokens: newMsgIssueTokens,
    newMsgRedeemTokens: newMsgRedeemTokens,
    newMsgBlockAddress: newMsgBlockAddress,
    newMsgUnblockAddress: newMsgUnblockAddress,
    newMsgSetPauseStatus: newMsgSetPauseStatus,
    newMsgPostPrice: newMsgPostPrice,
};
