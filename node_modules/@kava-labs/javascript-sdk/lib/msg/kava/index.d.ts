import { Coin } from '../../types/Coin';
import { DenomToClaim } from '../../types/DenomToClaim';
import { VoteType } from '../../types/VoteType';
/***************************************************
 *                   Auction
 ***************************************************/
declare function newMsgPlaceBid(auctionID: string, bidder: string, amount: Coin): {
    type: string;
    value: {
        auction_id: string;
        bidder: string;
        amount: Coin;
    };
};
/***************************************************
 *                     BEP3
 ***************************************************/
declare function newMsgCreateAtomicSwap(from: string, to: string, recipientOtherChain: string, senderOtherChain: string, randomNumberHash: string, timestamp: number, amount: Coin[], heightSpan: number): {
    type: string;
    value: {
        from: string;
        to: string;
        recipient_other_chain: string;
        sender_other_chain: string;
        random_number_hash: string;
        timestamp: string;
        amount: Coin[];
        height_span: string;
    };
};
declare function newMsgClaimAtomicSwap(from: string, swapID: string, randomNumber: string): {
    type: string;
    value: {
        from: string;
        swap_id: string;
        random_number: string;
    };
};
declare function newMsgRefundAtomicSwap(from: string, swapID: string): {
    type: string;
    value: {
        from: string;
        swap_id: string;
    };
};
/***************************************************
 *                       CDP
 ***************************************************/
declare function newMsgCreateCDP(sender: string, principal: Coin, collateral: Coin, collateralType: string): {
    type: string;
    value: {
        sender: string;
        principal: Coin;
        collateral: Coin;
        collateral_type: string;
    };
};
declare function newMsgDeposit(owner: string, depositor: string, collateral: Coin, collateralType: string): {
    type: string;
    value: {
        owner: string;
        depositor: string;
        collateral: Coin;
        collateral_type: string;
    };
};
declare function newMsgWithdraw(owner: string, depositor: string, collateral: Coin, collateralType: string): {
    type: string;
    value: {
        owner: string;
        depositor: string;
        collateral: Coin;
        collateral_type: string;
    };
};
declare function newMsgDrawDebt(sender: string, collateralType: string, principal: Coin): {
    type: string;
    value: {
        sender: string;
        collateral_type: string;
        principal: Coin;
    };
};
declare function newMsgRepayDebt(sender: string, collateralType: string, payment: Coin): {
    type: string;
    value: {
        sender: string;
        collateral_type: string;
        payment: Coin;
    };
};
declare function newMsgLiquidate(keeper: string, borrower: string, collateralType: string): {
    type: string;
    value: {
        keeper: string;
        borrower: string;
        collateral_type: string;
    };
};
/***************************************************
 *                   Committee
 ***************************************************/
declare function newMsgSubmitProposal(pubProposal: string, proposer: string, committeeID: string): {
    type: string;
    value: {
        pub_proposal: string;
        proposer: string;
        committee_id: string;
    };
};
declare function newMsgVote(proposalID: string, voter: string, voteType: VoteType): {
    type: string;
    value: {
        proposal_id: string;
        voter: string;
        vote_type: VoteType;
    };
};
/***************************************************
 *                   Incentive
 ***************************************************/
declare function newMsgClaimUSDXMintingReward(sender: string, multiplierName: string): {
    type: string;
    value: {
        sender: string;
        multiplier_name: string;
    };
};
declare function newMsgClaimHardReward(sender: string, denomsToClaim: DenomToClaim[]): {
    type: string;
    value: {
        sender: string;
        denoms_to_claim: DenomToClaim[];
    };
};
declare function newMsgClaimDelegatorReward(sender: string, denomsToClaim: DenomToClaim[]): {
    type: string;
    value: {
        sender: string;
        denoms_to_claim: DenomToClaim[];
    };
};
declare function newMsgClaimSwapReward(sender: string, denomsToClaim: DenomToClaim[]): {
    type: string;
    value: {
        sender: string;
        denoms_to_claim: DenomToClaim[];
    };
};
declare function newMsgClaimSavingsReward(sender: string, denomsToClaim: DenomToClaim[]): {
    type: string;
    value: {
        sender: string;
        denoms_to_claim: DenomToClaim[];
    };
};
declare function newMsgClaimEarnReward(sender: string, denomsToClaim: DenomToClaim[]): {
    type: string;
    value: {
        sender: string;
        denoms_to_claim: DenomToClaim[];
    };
};
/***************************************************
 *                   Issuance
 ***************************************************/
declare function newMsgIssueTokens(sender: string, tokens: Coin[], receiver: string): {
    type: string;
    value: {
        sender: string;
        tokens: Coin[];
        receiver: string;
    };
};
declare function newMsgRedeemTokens(sender: string, tokens: Coin[]): {
    type: string;
    value: {
        sender: string;
        tokens: Coin[];
    };
};
declare function newMsgBlockAddress(sender: string, denom: string, blockedAddress: string): {
    type: string;
    value: {
        sender: string;
        denom: string;
        blocked_address: string;
    };
};
declare function newMsgUnblockAddress(sender: string, denom: string, address: string): {
    type: string;
    value: {
        sender: string;
        denom: string;
        address: string;
    };
};
declare function newMsgSetPauseStatus(sender: string, denom: string, status: string): {
    type: string;
    value: {
        sender: string;
        denom: string;
        status: string;
    };
};
/***************************************************
 *                   Pricefeed
 ***************************************************/
declare function newMsgPostPrice(from: string, marketID: string, price: string, expiry: string): {
    type: string;
    value: {
        from: string;
        market_id: string;
        price: string;
        expiry: string;
    };
};
export declare const kava: {
    newMsgPlaceBid: typeof newMsgPlaceBid;
    newMsgCreateAtomicSwap: typeof newMsgCreateAtomicSwap;
    newMsgClaimAtomicSwap: typeof newMsgClaimAtomicSwap;
    newMsgRefundAtomicSwap: typeof newMsgRefundAtomicSwap;
    newMsgCreateCDP: typeof newMsgCreateCDP;
    newMsgDeposit: typeof newMsgDeposit;
    newMsgWithdraw: typeof newMsgWithdraw;
    newMsgDrawDebt: typeof newMsgDrawDebt;
    newMsgRepayDebt: typeof newMsgRepayDebt;
    newMsgLiquidate: typeof newMsgLiquidate;
    newMsgSubmitProposal: typeof newMsgSubmitProposal;
    newMsgVote: typeof newMsgVote;
    newMsgClaimUSDXMintingReward: typeof newMsgClaimUSDXMintingReward;
    newMsgClaimHardReward: typeof newMsgClaimHardReward;
    newMsgClaimDelegatorReward: typeof newMsgClaimDelegatorReward;
    newMsgClaimSwapReward: typeof newMsgClaimSwapReward;
    newMsgClaimSavingsReward: typeof newMsgClaimSavingsReward;
    newMsgClaimEarnReward: typeof newMsgClaimEarnReward;
    newMsgIssueTokens: typeof newMsgIssueTokens;
    newMsgRedeemTokens: typeof newMsgRedeemTokens;
    newMsgBlockAddress: typeof newMsgBlockAddress;
    newMsgUnblockAddress: typeof newMsgUnblockAddress;
    newMsgSetPauseStatus: typeof newMsgSetPauseStatus;
    newMsgPostPrice: typeof newMsgPostPrice;
};
export {};
