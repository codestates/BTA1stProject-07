"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cosmos = exports.newMsgUnDelegate = exports.newMsgDelegate = void 0;
var FEE_DEFAULT = { amount: [], gas: '300000' };
/**
 * Creates a new StdTx from some messages with a default fee
 * @param {Object} msgs an array of msgs to be included in the transaction
 * @param {Object} fee optional fee
 * @param {Object} memo optional memo
 * @param {Object} signatures generated when an address signs a data package, required for tx confirmation
 * @return {Promise}
 */
function newStdTx(msgs, fee, memo, signatures) {
    if (fee === void 0) { fee = FEE_DEFAULT; }
    if (memo === void 0) { memo = ''; }
    if (signatures === void 0) { signatures = null; }
    return {
        type: 'cosmos-sdk/StdTx',
        value: {
            msg: msgs,
            fee: fee,
            signatures: signatures,
            memo: memo,
        },
    };
}
function newMsgSend(address, to, coins) {
    var sendTx = {
        type: 'cosmos-sdk/MsgSend',
        value: {
            from_address: address,
            to_address: to,
            amount: coins.sort(function (coinA, coinB) {
                return coinA.denom > coinB.denom ? 1 : -1;
            }),
        },
    };
    return sendTx;
}
function newMsgVoteGovernance(proposalID, voter, voteType) {
    return {
        type: 'cosmos-sdk/MsgVote',
        value: {
            voter: voter,
            proposal_id: proposalID,
            option: voteType,
        },
    };
}
/**
 * Creates an IBC transfer
 * @param {String} sourcePort the port identifier, we would expect to always be "transfer" * @param {String} sourcePort the port identifier, we would expect to always be "transfer"
 * @param {String} source_channel the channel identifier
 * @param {Coin} token
 * @param {String} sender address of sender on the origin chain
 * @param {String} receiver address of recipient on the destination chain
 * @param {Integer} timeoutTimestamp nanoseconds to allow transfer to complete

 */
function newMsgTransfer(sourcePort, sourceChannel, token, sender, receiver, timeoutTimestamp) {
    return {
        type: 'cosmos-sdk/MsgTransfer',
        value: {
            source_port: sourcePort,
            source_channel: sourceChannel,
            token: token,
            sender: sender,
            receiver: receiver,
            timeout_height: {},
            timeout_timestamp: timeoutTimestamp.toString(),
        },
    };
}
function newMsgDelegate(delegatorAddress, validatorAddress, amount) {
    return {
        type: 'cosmos-sdk/MsgDelegate',
        value: {
            delegator_address: delegatorAddress,
            validator_address: validatorAddress,
            amount: amount,
        },
    };
}
exports.newMsgDelegate = newMsgDelegate;
function newMsgUnDelegate(delegatorAddress, validatorAddress, amount) {
    return {
        type: 'cosmos-sdk/MsgUndelegate',
        value: {
            delegator_address: delegatorAddress,
            validator_address: validatorAddress,
            amount: amount,
        },
    };
}
exports.newMsgUnDelegate = newMsgUnDelegate;
exports.cosmos = {
    newStdTx: newStdTx,
    newMsgSend: newMsgSend,
    newMsgVoteGovernance: newMsgVoteGovernance,
    newMsgTransfer: newMsgTransfer,
    newMsgDelegate: newMsgDelegate,
    newMsgUnDelegate: newMsgUnDelegate,
};
