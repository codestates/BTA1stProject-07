/* eslint-disable */
import Long from 'long';
import _m0 from 'protobufjs/minimal';
import {
  StrategyType,
  strategyTypeFromJSON,
  strategyTypeToJSON,
} from '../../../kava/earn/v1beta1/strategy';

export const protobufPackage = 'kava.earn.v1beta1';

/**
 * AllowedVault is a vault that is allowed to be created. These can be
 * modified via parameter governance.
 */
export interface AllowedVault {
  /** Denom is the only supported denomination of the vault for deposits and withdrawals. */
  denom: string;
  /** VaultStrategy is the strategy used for this vault. */
  strategies: StrategyType[];
  /**
   * IsPrivateVault is true if the vault only allows depositors contained in
   * AllowedDepositors.
   */
  isPrivateVault: boolean;
  /**
   * AllowedDepositors is a list of addresses that are allowed to deposit to
   * this vault if IsPrivateVault is true. Addresses not contained in this list
   * are not allowed to deposit into this vault. If IsPrivateVault is false,
   * this should be empty and ignored.
   */
  allowedDepositors: Uint8Array[];
}

/** VaultRecord is the state of a vault. */
export interface VaultRecord {
  /** TotalShares is the total distributed number of shares in the vault. */
  totalShares?: VaultShare;
}

/** VaultShareRecord defines the vault shares owned by a depositor. */
export interface VaultShareRecord {
  /** Depositor represents the owner of the shares */
  depositor: Uint8Array;
  /** Shares represent the vault shares owned by the depositor. */
  shares: VaultShare[];
}

/** VaultShare defines shares of a vault owned by a depositor. */
export interface VaultShare {
  denom: string;
  amount: string;
}

function createBaseAllowedVault(): AllowedVault {
  return {
    denom: '',
    strategies: [],
    isPrivateVault: false,
    allowedDepositors: [],
  };
}

export const AllowedVault = {
  encode(
    message: AllowedVault,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.denom !== '') {
      writer.uint32(10).string(message.denom);
    }
    writer.uint32(18).fork();
    for (const v of message.strategies) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.isPrivateVault === true) {
      writer.uint32(24).bool(message.isPrivateVault);
    }
    for (const v of message.allowedDepositors) {
      writer.uint32(34).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AllowedVault {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllowedVault();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.strategies.push(reader.int32() as any);
            }
          } else {
            message.strategies.push(reader.int32() as any);
          }
          break;
        case 3:
          message.isPrivateVault = reader.bool();
          break;
        case 4:
          message.allowedDepositors.push(reader.bytes());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): AllowedVault {
    return {
      denom: isSet(object.denom) ? String(object.denom) : '',
      strategies: Array.isArray(object?.strategies)
        ? object.strategies.map((e: any) => strategyTypeFromJSON(e))
        : [],
      isPrivateVault: isSet(object.isPrivateVault)
        ? Boolean(object.isPrivateVault)
        : false,
      allowedDepositors: Array.isArray(object?.allowedDepositors)
        ? object.allowedDepositors.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: AllowedVault): unknown {
    const obj: any = {};
    message.denom !== undefined && (obj.denom = message.denom);
    if (message.strategies) {
      obj.strategies = message.strategies.map((e) => strategyTypeToJSON(e));
    } else {
      obj.strategies = [];
    }
    message.isPrivateVault !== undefined &&
      (obj.isPrivateVault = message.isPrivateVault);
    if (message.allowedDepositors) {
      obj.allowedDepositors = message.allowedDepositors.map((e) =>
        base64FromBytes(e !== undefined ? e : new Uint8Array())
      );
    } else {
      obj.allowedDepositors = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<AllowedVault>, I>>(
    object: I
  ): AllowedVault {
    const message = createBaseAllowedVault();
    message.denom = object.denom ?? '';
    message.strategies = object.strategies?.map((e) => e) || [];
    message.isPrivateVault = object.isPrivateVault ?? false;
    message.allowedDepositors = object.allowedDepositors?.map((e) => e) || [];
    return message;
  },
};

function createBaseVaultRecord(): VaultRecord {
  return { totalShares: undefined };
}

export const VaultRecord = {
  encode(
    message: VaultRecord,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.totalShares !== undefined) {
      VaultShare.encode(message.totalShares, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VaultRecord {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVaultRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.totalShares = VaultShare.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): VaultRecord {
    return {
      totalShares: isSet(object.totalShares)
        ? VaultShare.fromJSON(object.totalShares)
        : undefined,
    };
  },

  toJSON(message: VaultRecord): unknown {
    const obj: any = {};
    message.totalShares !== undefined &&
      (obj.totalShares = message.totalShares
        ? VaultShare.toJSON(message.totalShares)
        : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<VaultRecord>, I>>(
    object: I
  ): VaultRecord {
    const message = createBaseVaultRecord();
    message.totalShares =
      object.totalShares !== undefined && object.totalShares !== null
        ? VaultShare.fromPartial(object.totalShares)
        : undefined;
    return message;
  },
};

function createBaseVaultShareRecord(): VaultShareRecord {
  return { depositor: new Uint8Array(), shares: [] };
}

export const VaultShareRecord = {
  encode(
    message: VaultShareRecord,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.depositor.length !== 0) {
      writer.uint32(10).bytes(message.depositor);
    }
    for (const v of message.shares) {
      VaultShare.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VaultShareRecord {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVaultShareRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.depositor = reader.bytes();
          break;
        case 2:
          message.shares.push(VaultShare.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): VaultShareRecord {
    return {
      depositor: isSet(object.depositor)
        ? bytesFromBase64(object.depositor)
        : new Uint8Array(),
      shares: Array.isArray(object?.shares)
        ? object.shares.map((e: any) => VaultShare.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VaultShareRecord): unknown {
    const obj: any = {};
    message.depositor !== undefined &&
      (obj.depositor = base64FromBytes(
        message.depositor !== undefined ? message.depositor : new Uint8Array()
      ));
    if (message.shares) {
      obj.shares = message.shares.map((e) =>
        e ? VaultShare.toJSON(e) : undefined
      );
    } else {
      obj.shares = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<VaultShareRecord>, I>>(
    object: I
  ): VaultShareRecord {
    const message = createBaseVaultShareRecord();
    message.depositor = object.depositor ?? new Uint8Array();
    message.shares = object.shares?.map((e) => VaultShare.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVaultShare(): VaultShare {
  return { denom: '', amount: '' };
}

export const VaultShare = {
  encode(
    message: VaultShare,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.denom !== '') {
      writer.uint32(10).string(message.denom);
    }
    if (message.amount !== '') {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VaultShare {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVaultShare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.amount = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): VaultShare {
    return {
      denom: isSet(object.denom) ? String(object.denom) : '',
      amount: isSet(object.amount) ? String(object.amount) : '',
    };
  },

  toJSON(message: VaultShare): unknown {
    const obj: any = {};
    message.denom !== undefined && (obj.denom = message.denom);
    message.amount !== undefined && (obj.amount = message.amount);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<VaultShare>, I>>(
    object: I
  ): VaultShare {
    const message = createBaseVaultShare();
    message.denom = object.denom ?? '';
    message.amount = object.amount ?? '';
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== 'undefined') return globalThis;
  if (typeof self !== 'undefined') return self;
  if (typeof window !== 'undefined') return window;
  if (typeof global !== 'undefined') return global;
  throw 'Unable to locate global object';
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (const byte of arr) {
    bin.push(String.fromCharCode(byte));
  }
  return btoa(bin.join(''));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
  ? string | number | Long
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
